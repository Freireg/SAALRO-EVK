
SAALRO-EVK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab74  0800ab74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab7c  0800ab7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab7c  0800ab7c  0001ab7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab80  0800ab80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ab84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000294  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d75f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001add  00000000  00000000  0002d7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024628  00000000  00000000  00030d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7ba  00000000  00000000  00055338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4e03  00000000  00000000  00062af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001378f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e24  00000000  00000000  00137948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009fcc 	.word	0x08009fcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08009fcc 	.word	0x08009fcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468e      	mov	lr, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14d      	bne.n	80003a2 <__udivmoddi4+0xaa>
 8000306:	428a      	cmp	r2, r1
 8000308:	4694      	mov	ip, r2
 800030a:	d969      	bls.n	80003e0 <__udivmoddi4+0xe8>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b152      	cbz	r2, 8000328 <__udivmoddi4+0x30>
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	f1c2 0120 	rsb	r1, r2, #32
 800031a:	fa20 f101 	lsr.w	r1, r0, r1
 800031e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000322:	ea41 0e03 	orr.w	lr, r1, r3
 8000326:	4094      	lsls	r4, r2
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	0c21      	lsrs	r1, r4, #16
 800032e:	fbbe f6f8 	udiv	r6, lr, r8
 8000332:	fa1f f78c 	uxth.w	r7, ip
 8000336:	fb08 e316 	mls	r3, r8, r6, lr
 800033a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800033e:	fb06 f107 	mul.w	r1, r6, r7
 8000342:	4299      	cmp	r1, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x64>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 30ff 	add.w	r0, r6, #4294967295
 800034e:	f080 811f 	bcs.w	8000590 <__udivmoddi4+0x298>
 8000352:	4299      	cmp	r1, r3
 8000354:	f240 811c 	bls.w	8000590 <__udivmoddi4+0x298>
 8000358:	3e02      	subs	r6, #2
 800035a:	4463      	add	r3, ip
 800035c:	1a5b      	subs	r3, r3, r1
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800036c:	fb00 f707 	mul.w	r7, r0, r7
 8000370:	42a7      	cmp	r7, r4
 8000372:	d90a      	bls.n	800038a <__udivmoddi4+0x92>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	f080 810a 	bcs.w	8000594 <__udivmoddi4+0x29c>
 8000380:	42a7      	cmp	r7, r4
 8000382:	f240 8107 	bls.w	8000594 <__udivmoddi4+0x29c>
 8000386:	4464      	add	r4, ip
 8000388:	3802      	subs	r0, #2
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	1be4      	subs	r4, r4, r7
 8000390:	2600      	movs	r6, #0
 8000392:	b11d      	cbz	r5, 800039c <__udivmoddi4+0xa4>
 8000394:	40d4      	lsrs	r4, r2
 8000396:	2300      	movs	r3, #0
 8000398:	e9c5 4300 	strd	r4, r3, [r5]
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0xc2>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80ef 	beq.w	800058a <__udivmoddi4+0x292>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x160>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xd4>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80f9 	bhi.w	80005be <__udivmoddi4+0x2c6>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0303 	sbc.w	r3, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	469e      	mov	lr, r3
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0e0      	beq.n	800039c <__udivmoddi4+0xa4>
 80003da:	e9c5 4e00 	strd	r4, lr, [r5]
 80003de:	e7dd      	b.n	800039c <__udivmoddi4+0xa4>
 80003e0:	b902      	cbnz	r2, 80003e4 <__udivmoddi4+0xec>
 80003e2:	deff      	udf	#255	; 0xff
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	f040 8092 	bne.w	8000512 <__udivmoddi4+0x21a>
 80003ee:	eba1 010c 	sub.w	r1, r1, ip
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2601      	movs	r6, #1
 80003fc:	0c20      	lsrs	r0, r4, #16
 80003fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000402:	fb07 1113 	mls	r1, r7, r3, r1
 8000406:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040a:	fb0e f003 	mul.w	r0, lr, r3
 800040e:	4288      	cmp	r0, r1
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x12c>
 8000412:	eb1c 0101 	adds.w	r1, ip, r1
 8000416:	f103 38ff 	add.w	r8, r3, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x12a>
 800041c:	4288      	cmp	r0, r1
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2c0>
 8000422:	4643      	mov	r3, r8
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1110 	mls	r1, r7, r0, r1
 8000430:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x156>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x154>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2ca>
 800044c:	4608      	mov	r0, r1
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	e79c      	b.n	8000392 <__udivmoddi4+0x9a>
 8000458:	f1c6 0720 	rsb	r7, r6, #32
 800045c:	40b3      	lsls	r3, r6
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa20 f407 	lsr.w	r4, r0, r7
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	431c      	orrs	r4, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000476:	fa00 f306 	lsl.w	r3, r0, r6
 800047a:	fbb1 f8f9 	udiv	r8, r1, r9
 800047e:	0c20      	lsrs	r0, r4, #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fb09 1118 	mls	r1, r9, r8, r1
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	4288      	cmp	r0, r1
 8000492:	fa02 f206 	lsl.w	r2, r2, r6
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b8>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2bc>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2bc>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1a09      	subs	r1, r1, r0
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b8:	fb09 1110 	mls	r1, r9, r0, r1
 80004bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	458e      	cmp	lr, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1e2>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2b4>
 80004d2:	458e      	cmp	lr, r1
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2b4>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4461      	add	r1, ip
 80004da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004de:	fba0 9402 	umull	r9, r4, r0, r2
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46a6      	mov	lr, r4
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x2a4>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x2a0>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x212>
 80004f2:	ebb3 0208 	subs.w	r2, r3, r8
 80004f6:	eb61 010e 	sbc.w	r1, r1, lr
 80004fa:	fa01 f707 	lsl.w	r7, r1, r7
 80004fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000502:	40f1      	lsrs	r1, r6
 8000504:	431f      	orrs	r7, r3
 8000506:	e9c5 7100 	strd	r7, r1, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	f1c2 0320 	rsb	r3, r2, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	fa0c fc02 	lsl.w	ip, ip, r2
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
 8000520:	4091      	lsls	r1, r2
 8000522:	4301      	orrs	r1, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3610 	mls	r6, r7, r0, r3
 8000534:	0c0b      	lsrs	r3, r1, #16
 8000536:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053a:	fb00 f60e 	mul.w	r6, r0, lr
 800053e:	429e      	cmp	r6, r3
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x260>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b8>
 8000550:	429e      	cmp	r6, r3
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b8>
 8000554:	3802      	subs	r0, #2
 8000556:	4463      	add	r3, ip
 8000558:	1b9b      	subs	r3, r3, r6
 800055a:	b289      	uxth	r1, r1
 800055c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000560:	fb07 3316 	mls	r3, r7, r6, r3
 8000564:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000568:	fb06 f30e 	mul.w	r3, r6, lr
 800056c:	428b      	cmp	r3, r1
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x28a>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f106 38ff 	add.w	r8, r6, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 800057a:	428b      	cmp	r3, r1
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0x104>
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e705      	b.n	800039c <__udivmoddi4+0xa4>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e3      	b.n	800035c <__udivmoddi4+0x64>
 8000594:	4618      	mov	r0, r3
 8000596:	e6f8      	b.n	800038a <__udivmoddi4+0x92>
 8000598:	454b      	cmp	r3, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f8>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f8>
 80005a8:	4646      	mov	r6, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x28a>
 80005ac:	4620      	mov	r0, r4
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1e2>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x260>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b8>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x12c>
 80005be:	4630      	mov	r0, r6
 80005c0:	e709      	b.n	80003d6 <__udivmoddi4+0xde>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x156>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <dev_ext_flsh_enable_write>:
uint8_t txData[260];
uint8_t rxData[260];


uint8_t dev_ext_flsh_enable_write(uint8_t ID, bool enable)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef Hal_Result;

	if(enable)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d003      	beq.n	80005ea <dev_ext_flsh_enable_write+0x1e>
		txData[0] = FLASH_INSTRUCTION_WRITE_ENABLE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 80005e4:	2206      	movs	r2, #6
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e002      	b.n	80005f0 <dev_ext_flsh_enable_write+0x24>
	else
		txData[0] = FLASH_INSTRUCTION_WRITE_DISABLE;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <dev_ext_flsh_enable_write+0x60>)
 80005f6:	f001 f85d 	bl	80016b4 <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, 1, 100);
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	2201      	movs	r2, #1
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <dev_ext_flsh_enable_write+0x64>)
 8000602:	f001 fd1e 	bl	8002042 <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <dev_ext_flsh_enable_write+0x48>
		return 1;
 8000610:	2301      	movs	r3, #1
 8000612:	e005      	b.n	8000620 <dev_ext_flsh_enable_write+0x54>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <dev_ext_flsh_enable_write+0x60>)
 800061a:	f001 f84b 	bl	80016b4 <HAL_GPIO_WritePin>

	return 0;
 800061e:	2300      	movs	r3, #0

}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40021400 	.word	0x40021400
 8000630:	20000294 	.word	0x20000294

08000634 <dev_ext_flsh_read_status>:

uint8_t dev_ext_flsh_read_status(uint8_t ID, uint8_t *Status)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af02      	add	r7, sp, #8
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_Result;
	txData[0] = FLASH_INSTRUCTION_READ_STATUS_REGISTER;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <dev_ext_flsh_read_status+0x60>)
 8000642:	2205      	movs	r2, #5
 8000644:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <dev_ext_flsh_read_status+0x64>)
 800064c:	f001 f832 	bl	80016b4 <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_TransmitReceive(&hspi5, txData, rxData, 2, 100);
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2302      	movs	r3, #2
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <dev_ext_flsh_read_status+0x68>)
 8000658:	490e      	ldr	r1, [pc, #56]	; (8000694 <dev_ext_flsh_read_status+0x60>)
 800065a:	4811      	ldr	r0, [pc, #68]	; (80006a0 <dev_ext_flsh_read_status+0x6c>)
 800065c:	f001 fe2d 	bl	80022ba <HAL_SPI_TransmitReceive>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <dev_ext_flsh_read_status+0x3a>
		return 1;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <dev_ext_flsh_read_status+0x58>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <dev_ext_flsh_read_status+0x64>)
 8000674:	f001 f81e 	bl	80016b4 <HAL_GPIO_WritePin>
	if(Hal_Result == HAL_OK)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d105      	bne.n	800068a <dev_ext_flsh_read_status+0x56>
	{
		*Status = rxData[1];
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <dev_ext_flsh_read_status+0x68>)
 8000680:	785a      	ldrb	r2, [r3, #1]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	701a      	strb	r2, [r3, #0]
		return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <dev_ext_flsh_read_status+0x58>
	}

	return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40021400 	.word	0x40021400
 800069c:	20000190 	.word	0x20000190
 80006a0:	20000294 	.word	0x20000294

080006a4 <dev_ext_flash_read>:

uint8_t dev_ext_flash_read(uint8_t ID, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef Hal_Result;

	txData[0] = FLASH_INSTRUCTION_NORMAL_READ;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <dev_ext_flash_read+0x88>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	701a      	strb	r2, [r3, #0]
	txData[1] = Address >> 16 & 0xff;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <dev_ext_flash_read+0x88>)
 80006c2:	705a      	strb	r2, [r3, #1]
	txData[2] = Address >> 8 & 0xff;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <dev_ext_flash_read+0x88>)
 80006cc:	709a      	strb	r2, [r3, #2]
	txData[3] = Address & 0xff;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <dev_ext_flash_read+0x88>)
 80006d4:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4815      	ldr	r0, [pc, #84]	; (8000730 <dev_ext_flash_read+0x8c>)
 80006dc:	f000 ffea 	bl	80016b4 <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_TransmitReceive(&hspi5, txData, rxData, Size + 4, 100);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	3304      	adds	r3, #4
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <dev_ext_flash_read+0x90>)
 80006ee:	490f      	ldr	r1, [pc, #60]	; (800072c <dev_ext_flash_read+0x88>)
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <dev_ext_flash_read+0x94>)
 80006f2:	f001 fde2 	bl	80022ba <HAL_SPI_TransmitReceive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	75fb      	strb	r3, [r7, #23]
	if(Hal_Result != HAL_OK)
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <dev_ext_flash_read+0x60>
		return 1;
 8000700:	2301      	movs	r3, #1
 8000702:	e00e      	b.n	8000722 <dev_ext_flash_read+0x7e>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <dev_ext_flash_read+0x8c>)
 800070a:	f000 ffd3 	bl	80016b4 <HAL_GPIO_WritePin>
	if(Hal_Result == HAL_OK)
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <dev_ext_flash_read+0x7c>
		memcpy(Data, rxData + 4, Size);
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <dev_ext_flash_read+0x98>)
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f008 fc38 	bl	8008f90 <memcpy>
	return 0;
 8000720:	2300      	movs	r3, #0

}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000008c 	.word	0x2000008c
 8000730:	40021400 	.word	0x40021400
 8000734:	20000190 	.word	0x20000190
 8000738:	20000294 	.word	0x20000294
 800073c:	20000194 	.word	0x20000194

08000740 <dev_ext_flash_write>:

uint8_t dev_ext_flash_write(uint8_t ID, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef Hal_Result;
	uint8_t Memory_Status;

	if(dev_ext_flsh_enable_write(ID, true) != 0)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff39 	bl	80005cc <dev_ext_flsh_enable_write>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <dev_ext_flash_write+0x24>
		return 1;
 8000760:	2301      	movs	r3, #1
 8000762:	e03e      	b.n	80007e2 <dev_ext_flash_write+0xa2>

	txData[0] = FLASH_INSTRUCTION_PAGE_PROGRAM;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <dev_ext_flash_write+0xac>)
 8000766:	2202      	movs	r2, #2
 8000768:	701a      	strb	r2, [r3, #0]
	txData[1] = Address >> 16 & 0xff;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <dev_ext_flash_write+0xac>)
 8000772:	705a      	strb	r2, [r3, #1]
	txData[2] = Address >> 8 & 0xff;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <dev_ext_flash_write+0xac>)
 800077c:	709a      	strb	r2, [r3, #2]
	txData[3] = Address & 0xff;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <dev_ext_flash_write+0xac>)
 8000784:	70da      	strb	r2, [r3, #3]
	memcpy(txData + 4, Data, Size);
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <dev_ext_flash_write+0xb0>)
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fbff 	bl	8008f90 <memcpy>

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <dev_ext_flash_write+0xb4>)
 8000798:	f000 ff8c 	bl	80016b4 <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, Size + 4, 100);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	3304      	adds	r3, #4
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	4911      	ldr	r1, [pc, #68]	; (80007ec <dev_ext_flash_write+0xac>)
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <dev_ext_flash_write+0xb8>)
 80007aa:	f001 fc4a 	bl	8002042 <HAL_SPI_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	75fb      	strb	r3, [r7, #23]
	if(Hal_Result != HAL_OK)
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <dev_ext_flash_write+0x7c>
		return 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e012      	b.n	80007e2 <dev_ext_flash_write+0xa2>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <dev_ext_flash_write+0xb4>)
 80007c2:	f000 ff77 	bl	80016b4 <HAL_GPIO_WritePin>

	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 80007c6:	e006      	b.n	80007d6 <dev_ext_flash_write+0x96>
	{
		dev_ext_flsh_read_status(ID, &Memory_Status);
 80007c8:	f107 0216 	add.w	r2, r7, #22
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff2f 	bl	8000634 <dev_ext_flsh_read_status>
	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 80007d6:	7dbb      	ldrb	r3, [r7, #22]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f3      	bne.n	80007c8 <dev_ext_flash_write+0x88>
	}

	return 0;
 80007e0:	2300      	movs	r3, #0

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	20000090 	.word	0x20000090
 80007f4:	40021400 	.word	0x40021400
 80007f8:	20000294 	.word	0x20000294

080007fc <dev_ext_flash_erase_sector>:
uint8_t dev_ext_flash_erase_sector(uint8_t ID, uint32_t SectorAddress)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_Result;
	uint8_t Memory_Status;

	if(dev_ext_flsh_enable_write(ID, true) != 0)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fedd 	bl	80005cc <dev_ext_flsh_enable_write>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <dev_ext_flash_erase_sector+0x20>
		return 1;
 8000818:	2301      	movs	r3, #1
 800081a:	e035      	b.n	8000888 <dev_ext_flash_erase_sector+0x8c>
	txData[0] = FLASH_INSTRUCTION_SECTOR_ERASE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800081e:	22d7      	movs	r2, #215	; 0xd7
 8000820:	701a      	strb	r2, [r3, #0]
	txData[1] = SectorAddress >> 16 & 0xff;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	0c1b      	lsrs	r3, r3, #16
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800082a:	705a      	strb	r2, [r3, #1]
	txData[2] = SectorAddress >> 8 & 0xff;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 8000834:	709a      	strb	r2, [r3, #2]
	txData[3] = SectorAddress & 0xff;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800083c:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4814      	ldr	r0, [pc, #80]	; (8000894 <dev_ext_flash_erase_sector+0x98>)
 8000844:	f000 ff36 	bl	80016b4 <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, 4, 100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2204      	movs	r2, #4
 800084c:	4910      	ldr	r1, [pc, #64]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <dev_ext_flash_erase_sector+0x9c>)
 8000850:	f001 fbf7 	bl	8002042 <HAL_SPI_Transmit>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <dev_ext_flash_erase_sector+0x66>
		return 1;
 800085e:	2301      	movs	r3, #1
 8000860:	e012      	b.n	8000888 <dev_ext_flash_erase_sector+0x8c>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <dev_ext_flash_erase_sector+0x98>)
 8000868:	f000 ff24 	bl	80016b4 <HAL_GPIO_WritePin>

	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 800086c:	e006      	b.n	800087c <dev_ext_flash_erase_sector+0x80>
	{
		dev_ext_flsh_read_status(ID, &Memory_Status);
 800086e:	f107 020e 	add.w	r2, r7, #14
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fedc 	bl	8000634 <dev_ext_flsh_read_status>
	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f3      	bne.n	800086e <dev_ext_flash_erase_sector+0x72>
	}
	return 0;
 8000886:	2300      	movs	r3, #0

}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000008c 	.word	0x2000008c
 8000894:	40021400 	.word	0x40021400
 8000898:	20000294 	.word	0x20000294

0800089c <block_device_read>:



int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
	dev_ext_flash_read(0, (block * c->block_size + off), (uint8_t*)buffer, size);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	fb03 f202 	mul.w	r2, r3, r2
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	18d1      	adds	r1, r2, r3
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fef1 	bl	80006a4 <dev_ext_flash_read>
	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
	dev_ext_flash_write(0, (block * c->block_size + off), (uint8_t*)buffer, size);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	18d1      	adds	r1, r2, r3
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ff27 	bl	8000740 <dev_ext_flash_write>
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	dev_ext_flash_erase_sector(0, (block * c->block_size));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	4619      	mov	r1, r3
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff72 	bl	80007fc <dev_ext_flash_erase_sector>
	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <block_device_sync>:
int block_device_sync(const struct lfs_config *c)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fbb4 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f8ea 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 f98a 	bl	8000c60 <MX_GPIO_Init>
  MX_SPI5_Init();
 800094c:	f000 f952 	bl	8000bf4 <MX_SPI5_Init>
  uint8_t lfs_read_buf[256];
  uint8_t lfs_prog_buf[256];
  uint8_t lfs_lookahead_buf[256];  // 256/8=32
  uint8_t lfs_file_buf[256];

  const struct lfs_config cfg =
 8000950:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000954:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000958:	4618      	mov	r0, r3
 800095a:	234c      	movs	r3, #76	; 0x4c
 800095c:	461a      	mov	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f008 fb24 	bl	8008fac <memset>
 8000964:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000968:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800096c:	4a66      	ldr	r2, [pc, #408]	; (8000b08 <main+0x1d0>)
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000974:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000978:	4a64      	ldr	r2, [pc, #400]	; (8000b0c <main+0x1d4>)
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000980:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000984:	4a62      	ldr	r2, [pc, #392]	; (8000b10 <main+0x1d8>)
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800098c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000990:	4a60      	ldr	r2, [pc, #384]	; (8000b14 <main+0x1dc>)
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000998:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800099c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009a6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	619a      	str	r2, [r3, #24]
 80009b0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009b4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	61da      	str	r2, [r3, #28]
 80009be:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009c2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ca:	621a      	str	r2, [r3, #32]
 80009cc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009d0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
 80009da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009de:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
 80009e8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009ec:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80009fa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80009fe:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8000a02:	631a      	str	r2, [r3, #48]	; 0x30
 8000a04:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000a08:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000a0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000a16:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8000a1a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38
        .read_buffer = lfs_read_buf,
		    .prog_buffer = lfs_prog_buf,
		    .lookahead_buffer = lfs_lookahead_buf
  };

  int err = lfs_mount(&Disk, &cfg);
 8000a20:	1d3a      	adds	r2, r7, #4
 8000a22:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f008 f8f9 	bl	8008c20 <lfs_mount>
 8000a2e:	f8c7 051c 	str.w	r0, [r7, #1308]	; 0x51c

  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err) {
 8000a32:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00d      	beq.n	8000a56 <main+0x11e>
      lfs_format(&Disk, &cfg);
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 f8d6 	bl	8008bf4 <lfs_format>
      lfs_mount(&Disk, &cfg);
 8000a48:	1d3a      	adds	r2, r7, #4
 8000a4a:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 f8e5 	bl	8008c20 <lfs_mount>
  }
  // read current count
	uint32_t boot_count = 0;
 8000a56:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000a5a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
	lfs_file_open(&Disk, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000a62:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8000a66:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8000a6a:	f240 1303 	movw	r3, #259	; 0x103
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <main+0x1e0>)
 8000a70:	f008 f900 	bl	8008c74 <lfs_file_open>
	lfs_file_read(&Disk, &file, &boot_count, sizeof(boot_count));
 8000a74:	463a      	mov	r2, r7
 8000a76:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8000a7a:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8000a7e:	2304      	movs	r3, #4
 8000a80:	f008 f958 	bl	8008d34 <lfs_file_read>

	// update boot count
	boot_count += 1;
 8000a84:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000a88:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000a94:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8000a98:	601a      	str	r2, [r3, #0]
	lfs_file_rewind(&Disk, &file);
 8000a9a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8000a9e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f008 f9a5 	bl	8008df4 <lfs_file_rewind>
	lfs_file_write(&Disk, &file, &boot_count, sizeof(boot_count));
 8000aaa:	463a      	mov	r2, r7
 8000aac:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8000ab0:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	f008 f96d 	bl	8008d94 <lfs_file_write>

	// remember the storage is not updated until the file is closed successfully
	lfs_file_close(&Disk, &file);
 8000aba:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8000abe:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 f909 	bl	8008cdc <lfs_file_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    lfs_file_open(&Disk, &file, "boot_count", LFS_O_RDWR);
 8000aca:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8000ace:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <main+0x1e0>)
 8000ad6:	f008 f8cd 	bl	8008c74 <lfs_file_open>
	  lfs_file_read(&Disk, &file, &boot_count, sizeof(boot_count));
 8000ada:	463a      	mov	r2, r7
 8000adc:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8000ae0:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	f008 f925 	bl	8008d34 <lfs_file_read>
    lfs_file_close(&Disk, &file);
 8000aea:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8000aee:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 f8f1 	bl	8008cdc <lfs_file_close>
    lfs_unmount(&Disk);
 8000afa:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f008 f8a4 	bl	8008c4c <lfs_unmount>
    lfs_file_open(&Disk, &file, "boot_count", LFS_O_RDWR);
 8000b04:	e7e1      	b.n	8000aca <main+0x192>
 8000b06:	bf00      	nop
 8000b08:	0800089d 	.word	0x0800089d
 8000b0c:	080008cd 	.word	0x080008cd
 8000b10:	080008fd 	.word	0x080008fd
 8000b14:	08000923 	.word	0x08000923
 8000b18:	08009fe4 	.word	0x08009fe4

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f008 fa3e 	bl	8008fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <SystemClock_Config+0xd0>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a28      	ldr	r2, [pc, #160]	; (8000bec <SystemClock_Config+0xd0>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b90:	2310      	movs	r3, #16
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd9f 	bl	80016e8 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bb0:	f000 f8da 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f800 	bl	8001bd8 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bde:	f000 f8c3 	bl	8000d68 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_SPI5_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c40:	220a      	movs	r2, #10
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_SPI5_Init+0x64>)
 8000c46:	f001 f973 	bl	8001f30 <HAL_SPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c50:	f000 f88a 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000294 	.word	0x20000294
 8000c5c:	40015000 	.word	0x40015000

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <MX_GPIO_Init+0x100>)
 8000d08:	f000 fcd4 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000d14:	f000 fcce 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_MEM_CS_Pin */
  GPIO_InitStruct.Pin = EXT_MEM_CS_Pin;
 8000d18:	2340      	movs	r3, #64	; 0x40
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_GPIO_Init+0x100>)
 8000d30:	f000 fb14 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PC_Pin */
  GPIO_InitStruct.Pin = LED_PC_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PC_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000d4e:	f000 fb05 	bl	800135c <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_SPI_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12c      	bne.n	8000e40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = EXT_MEM_SCK_Pin|EXT_MEM_MISO_Pin|EXT_MEM_MOSI_Pin;
 8000e1e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000e30:	2305      	movs	r3, #5
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e3c:	f000 fa8e 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40015000 	.word	0x40015000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021400 	.word	0x40021400

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f956 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_kill>:

int _kill(int pid, int sig)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ec2:	f008 f809 	bl	8008ed8 <__errno>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2216      	movs	r2, #22
 8000eca:	601a      	str	r2, [r3, #0]
  return -1;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_exit>:

void _exit (int status)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffe7 	bl	8000eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eea:	e7fe      	b.n	8000eea <_exit+0x12>

08000eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>
  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f007 ff6e 	bl	8008ed8 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20030000 	.word	0x20030000
 8001028:	00000400 	.word	0x00000400
 800102c:	200002ec 	.word	0x200002ec
 8001030:	20000308 	.word	0x20000308

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f007 ff3f 	bl	8008f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fc55 	bl	8000938 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001090:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800109c:	0800ab84 	.word	0x0800ab84
  ldr r2, =_sbss
 80010a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010a4:	20000304 	.word	0x20000304

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f90d 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fe48 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f917 	bl	8001342 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f8ed 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	200002f0 	.word	0x200002f0

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200002f0 	.word	0x200002f0

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff47 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5c 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb0 	bl	80012b0 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e177      	b.n	8001668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8166 	bne.w	8001662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80c0 	beq.w	8001662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_GPIO_Init+0x324>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_GPIO_Init+0x324>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_GPIO_Init+0x324>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a61      	ldr	r2, [pc, #388]	; (8001684 <HAL_GPIO_Init+0x328>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_GPIO_Init+0x32c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d037      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_GPIO_Init+0x330>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_GPIO_Init+0x334>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a55      	ldr	r2, [pc, #340]	; (8001694 <HAL_GPIO_Init+0x338>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_GPIO_Init+0x33c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_GPIO_Init+0x340>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x344>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x348>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x350>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x21a>
 8001572:	2309      	movs	r3, #9
 8001574:	e012      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001576:	230a      	movs	r3, #10
 8001578:	e010      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157a:	2308      	movs	r3, #8
 800157c:	e00e      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157e:	2307      	movs	r3, #7
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001582:	2306      	movs	r3, #6
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x240>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <HAL_GPIO_Init+0x328>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x354>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015de:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <HAL_GPIO_Init+0x354>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_GPIO_Init+0x354>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001608:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <HAL_GPIO_Init+0x354>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_GPIO_Init+0x354>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_GPIO_Init+0x354>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_GPIO_Init+0x354>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_GPIO_Init+0x354>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae84 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40021400 	.word	0x40021400
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40021c00 	.word	0x40021c00
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40022400 	.word	0x40022400
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e267      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d075      	beq.n	80017f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d00c      	beq.n	800172c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171a:	2b08      	cmp	r3, #8
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b82      	ldr	r3, [pc, #520]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800172a:	d10b      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d05b      	beq.n	80017f0 <HAL_RCC_OscConfig+0x108>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d157      	bne.n	80017f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e242      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x74>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0xb0>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x98>
 8001766:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6f      	ldr	r2, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0xb0>
 8001780:	4b69      	ldr	r3, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a68      	ldr	r2, [pc, #416]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fcea 	bl	8001178 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fce6 	bl	8001178 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e207      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0xc0>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fcd6 	bl	8001178 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fcd2 	bl	8001178 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1f3      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0xe8>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fe:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d11c      	bne.n	8001850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d116      	bne.n	8001850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x152>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1c7      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e03a      	b.n	80018c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x244>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fc8b 	bl	8001178 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fc87 	bl	8001178 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1a8      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4925      	ldr	r1, [pc, #148]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x244>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc6a 	bl	8001178 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc66 	bl	8001178 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e187      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d036      	beq.n	8001940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d016      	beq.n	8001908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x248>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fc4a 	bl	8001178 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc46 	bl	8001178 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e167      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80018fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x200>
 8001906:	e01b      	b.n	8001940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x248>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fc33 	bl	8001178 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	e00e      	b.n	8001934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fc2f 	bl	8001178 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d907      	bls.n	8001934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e150      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
 8001928:	40023800 	.word	0x40023800
 800192c:	42470000 	.word	0x42470000
 8001930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ea      	bne.n	8001916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8097 	beq.w	8001a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a7c      	ldr	r2, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198a:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff fbef 	bl	8001178 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff fbeb 	bl	8001178 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e10c      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2ea>
 80019c4:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x324>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x30c>
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x324>
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fbb0 	bl	8001178 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fbac 	bl	8001178 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0cb      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0ee      	beq.n	8001a1c <HAL_RCC_OscConfig+0x334>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fb9a 	bl	8001178 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb96 	bl	8001178 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0b5      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ee      	bne.n	8001a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a1 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d05c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d141      	bne.n	8001b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb6a 	bl	8001178 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fb66 	bl	8001178 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e087      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	491b      	ldr	r1, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb3f 	bl	8001178 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fb3b 	bl	8001178 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e05c      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x416>
 8001b1c:	e054      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb28 	bl	8001178 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fb24 	bl	8001178 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e045      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x444>
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e038      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x4ec>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d028      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d121      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d11a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0cc      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d90c      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0b8      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	494d      	ldr	r1, [pc, #308]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d044      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e07f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e067      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4934      	ldr	r1, [pc, #208]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff fa56 	bl	8001178 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff fa52 	bl	8001178 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e04f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d20c      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e032      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4916      	ldr	r1, [pc, #88]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d5e:	f000 f821 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	490a      	ldr	r1, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	5ccb      	ldrb	r3, [r1, r3]
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9b6 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	40023800 	.word	0x40023800
 8001d98:	0800a920 	.word	0x0800a920
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da8:	b090      	sub	sp, #64	; 0x40
 8001daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
 8001db0:	2300      	movs	r3, #0
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d00d      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	f200 80a1 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x3a>
 8001dd6:	e09b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ddc:	e09b      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de2:	e098      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d028      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	2200      	movs	r2, #0
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	627a      	str	r2, [r7, #36]	; 0x24
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e10:	fb03 f201 	mul.w	r2, r3, r1
 8001e14:	2300      	movs	r3, #0
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e24:	460a      	mov	r2, r1
 8001e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2a:	4413      	add	r3, r2
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	2200      	movs	r2, #0
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	61fa      	str	r2, [r7, #28]
 8001e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e3e:	f7fe fa2f 	bl	80002a0 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4613      	mov	r3, r2
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4a:	e053      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	2200      	movs	r2, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	617a      	str	r2, [r7, #20]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e5e:	f04f 0b00 	mov.w	fp, #0
 8001e62:	4652      	mov	r2, sl
 8001e64:	465b      	mov	r3, fp
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e96:	ebb2 0408 	subs.w	r4, r2, r8
 8001e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	00eb      	lsls	r3, r5, #3
 8001ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eac:	00e2      	lsls	r2, r4, #3
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	eb14 030a 	adds.w	r3, r4, sl
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	eb45 030b 	adc.w	r3, r5, fp
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	028b      	lsls	r3, r1, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	028a      	lsls	r2, r1, #10
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee8:	f7fe f9da 	bl	80002a0 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3740      	adds	r7, #64	; 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	017d7840 	.word	0x017d7840

08001f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07b      	b.n	800203a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f52:	d009      	beq.n	8001f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
 8001f5a:	e005      	b.n	8001f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe ff1e 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	ea42 0103 	orr.w	r1, r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0104 	and.w	r1, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0210 	and.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b088      	sub	sp, #32
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_SPI_Transmit+0x22>
 8002060:	2302      	movs	r3, #2
 8002062:	e126      	b.n	80022b2 <HAL_SPI_Transmit+0x270>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800206c:	f7ff f884 	bl	8001178 <HAL_GetTick>
 8002070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002086:	e10b      	b.n	80022a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Transmit+0x52>
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002098:	e102      	b.n	80022a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2203      	movs	r2, #3
 800209e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	d10f      	bne.n	8002102 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d007      	beq.n	8002120 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002128:	d14b      	bne.n	80021c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_Transmit+0xf6>
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d13e      	bne.n	80021b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	1c9a      	adds	r2, r3, #2
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800215c:	e02b      	b.n	80021b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d112      	bne.n	8002192 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	881a      	ldrh	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	1c9a      	adds	r2, r3, #2
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002190:	e011      	b.n	80021b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002192:	f7fe fff1 	bl	8001178 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d803      	bhi.n	80021aa <HAL_SPI_Transmit+0x168>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d102      	bne.n	80021b0 <HAL_SPI_Transmit+0x16e>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021b4:	e074      	b.n	80022a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ce      	bne.n	800215e <HAL_SPI_Transmit+0x11c>
 80021c0:	e04c      	b.n	800225c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Transmit+0x18e>
 80021ca:	8afb      	ldrh	r3, [r7, #22]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d140      	bne.n	8002252 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021f6:	e02c      	b.n	8002252 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d113      	bne.n	800222e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	330c      	adds	r3, #12
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	86da      	strh	r2, [r3, #54]	; 0x36
 800222c:	e011      	b.n	8002252 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222e:	f7fe ffa3 	bl	8001178 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d803      	bhi.n	8002246 <HAL_SPI_Transmit+0x204>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d102      	bne.n	800224c <HAL_SPI_Transmit+0x20a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002250:	e026      	b.n	80022a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1cd      	bne.n	80021f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa55 	bl	8002710 <SPI_EndRxTxTransaction>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	77fb      	strb	r3, [r7, #31]
 800229c:	e000      	b.n	80022a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800229e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b08c      	sub	sp, #48	; 0x30
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x26>
 80022dc:	2302      	movs	r3, #2
 80022de:	e18a      	b.n	80025f6 <HAL_SPI_TransmitReceive+0x33c>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022e8:	f7fe ff46 	bl	8001178 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00f      	beq.n	800232a <HAL_SPI_TransmitReceive+0x70>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002310:	d107      	bne.n	8002322 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_SPI_TransmitReceive+0x68>
 800231a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800231e:	2b04      	cmp	r3, #4
 8002320:	d003      	beq.n	800232a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002322:	2302      	movs	r3, #2
 8002324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002328:	e15b      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_SPI_TransmitReceive+0x82>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_SPI_TransmitReceive+0x82>
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002342:	e14e      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b04      	cmp	r3, #4
 800234e:	d003      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2205      	movs	r2, #5
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	887a      	ldrh	r2, [r7, #2]
 800237a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d007      	beq.n	80023ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b4:	d178      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_SPI_TransmitReceive+0x10a>
 80023be:	8b7b      	ldrh	r3, [r7, #26]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d166      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	1c9a      	adds	r2, r3, #2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023e8:	e053      	b.n	8002492 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11b      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x176>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x176>
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d113      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d119      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x1b8>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d014      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	b292      	uxth	r2, r2
 8002454:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800246e:	2301      	movs	r3, #1
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002472:	f7fe fe81 	bl	8001178 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800247e:	429a      	cmp	r2, r3
 8002480:	d807      	bhi.n	8002492 <HAL_SPI_TransmitReceive+0x1d8>
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d003      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002490:	e0a7      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1a6      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x130>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1a1      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x130>
 80024a6:	e07c      	b.n	80025a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_TransmitReceive+0x1fc>
 80024b0:	8b7b      	ldrh	r3, [r7, #26]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d16b      	bne.n	800258e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024dc:	e057      	b.n	800258e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11c      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x26c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x26c>
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d114      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d119      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x2ae>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d014      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002564:	2301      	movs	r3, #1
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002568:	f7fe fe06 	bl	8001178 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002574:	429a      	cmp	r2, r3
 8002576:	d803      	bhi.n	8002580 <HAL_SPI_TransmitReceive+0x2c6>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d102      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x2cc>
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800258c:	e029      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1a2      	bne.n	80024de <HAL_SPI_TransmitReceive+0x224>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d19d      	bne.n	80024de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8b2 	bl	8002710 <SPI_EndRxTxTransaction>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025be:	e010      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	e000      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002610:	f7fe fdb2 	bl	8001178 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002620:	f7fe fdaa 	bl	8001178 <HAL_GetTick>
 8002624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	0d1b      	lsrs	r3, r3, #20
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002636:	e054      	b.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d050      	beq.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002640:	f7fe fd9a 	bl	8001178 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	429a      	cmp	r2, r3
 800264e:	d902      	bls.n	8002656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d13d      	bne.n	80026d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800266e:	d111      	bne.n	8002694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d004      	beq.n	8002684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d107      	bne.n	8002694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d10f      	bne.n	80026be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e017      	b.n	8002702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3b01      	subs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d19b      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <SPI_EndRxTxTransaction+0x7c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <SPI_EndRxTxTransaction+0x80>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0d5b      	lsrs	r3, r3, #21
 8002728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273a:	d112      	bne.n	8002762 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff ff5a 	bl	8002600 <SPI_WaitFlagStateUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e00f      	b.n	8002782 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3b01      	subs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d0f2      	beq.n	8002762 <SPI_EndRxTxTransaction+0x52>
 800277c:	e000      	b.n	8002780 <SPI_EndRxTxTransaction+0x70>
        break;
 800277e:	bf00      	nop
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000
 8002790:	165e9f81 	.word	0x165e9f81

08002794 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4293      	cmp	r3, r2
 80027a4:	bf38      	it	cc
 80027a6:	4613      	movcc	r3, r2
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bf28      	it	cs
 80027c6:	4613      	movcs	r3, r2
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	fb01 f202 	mul.w	r2, r1, r2
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	1ad3      	subs	r3, r2, r3
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	3b01      	subs	r3, #1
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffde 	bl	80027d4 <lfs_aligndown>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3b01      	subs	r3, #1
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd fd31 	bl	80002d0 <__popcountsi2>
 800286e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	1ad3      	subs	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800289c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffee 	bl	8002894 <lfs_fromle32>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffed 	bl	80028c2 <lfs_frombe32>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f006 fb28 	bl	8008f50 <malloc>
 8002900:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f006 fb24 	bl	8008f60 <free>
#else
    (void)p;
#endif
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68d8      	ldr	r0, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	461a      	mov	r2, r3
 8002954:	21ff      	movs	r1, #255	; 0xff
 8002956:	f006 fb29 	bl	8008fac <memset>
    pcache->block = LFS_BLOCK_NULL;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	429a      	cmp	r2, r3
 8002988:	d208      	bcs.n	800299c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800298a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8002996:	429a      	cmp	r2, r3
 8002998:	f240 811b 	bls.w	8002bd2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800299c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80029a0:	e11c      	b.n	8002bdc <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03f      	beq.n	8002a2c <lfs_bd_read+0xc0>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d13a      	bne.n	8002a2c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80029c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d232      	bcs.n	8002a2c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d324      	bcc.n	8002a1a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	69b8      	ldr	r0, [r7, #24]
 80029e2:	f7ff fee7 	bl	80027b4 <lfs_min>
 80029e6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4619      	mov	r1, r3
 80029fa:	69f8      	ldr	r0, [r7, #28]
 80029fc:	f006 fac8 	bl	8008f90 <memcpy>

                data += diff;
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002a18:	e0db      	b.n	8002bd2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	69b8      	ldr	r0, [r7, #24]
 8002a26:	f7ff fec5 	bl	80027b4 <lfs_min>
 8002a2a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d13a      	bne.n	8002aac <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8002a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d232      	bcs.n	8002aac <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d324      	bcc.n	8002a9a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	69b8      	ldr	r0, [r7, #24]
 8002a62:	f7ff fea7 	bl	80027b4 <lfs_min>
 8002a66:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	69f8      	ldr	r0, [r7, #28]
 8002a7c:	f006 fa88 	bl	8008f90 <memcpy>

                data += diff;
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4413      	add	r3, r2
 8002a86:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002a98:	e09b      	b.n	8002bd2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	69b8      	ldr	r0, [r7, #24]
 8002aa6:	f7ff fe85 	bl	80027b4 <lfs_min>
 8002aaa:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d336      	bcc.n	8002b22 <lfs_bd_read+0x1b6>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ac0:	fb01 f202 	mul.w	r2, r1, r2
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d12b      	bne.n	8002b22 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ace:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d325      	bcc.n	8002b22 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4619      	mov	r1, r3
 8002ade:	69b8      	ldr	r0, [r7, #24]
 8002ae0:	f7ff fe78 	bl	80027d4 <lfs_aligndown>
 8002ae4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aea:	685c      	ldr	r4, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002afa:	47a0      	blx	r4
 8002afc:	6178      	str	r0, [r7, #20]
            if (err) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <lfs_bd_read+0x19c>
                return err;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	e069      	b.n	8002bdc <lfs_bd_read+0x270>
            }

            data += diff;
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8002b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8002b20:	e057      	b.n	8002bd2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d305      	bcc.n	8002b3a <lfs_bd_read+0x1ce>
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <lfs_bd_read+0x278>)
 8002b30:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <lfs_bd_read+0x27c>)
 8002b32:	216b      	movs	r1, #107	; 0x6b
 8002b34:	482d      	ldr	r0, [pc, #180]	; (8002bec <lfs_bd_read+0x280>)
 8002b36:	f006 f9b1 	bl	8008e9c <__assert_func>
        rcache->block = block;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4619      	mov	r1, r3
 8002b48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b4a:	f7ff fe43 	bl	80027d4 <lfs_aligndown>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8002b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7ff fe4b 	bl	80027fe <lfs_alignup>
 8002b68:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7ff fe1e 	bl	80027b4 <lfs_min>
 8002b78:	4602      	mov	r2, r0
                - rcache->off,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8002b7e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f7ff fe13 	bl	80027b4 <lfs_min>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b98:	685c      	ldr	r4, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	47a0      	blx	r4
 8002bb4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	dd05      	ble.n	8002bc8 <lfs_bd_read+0x25c>
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <lfs_bd_read+0x284>)
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <lfs_bd_read+0x27c>)
 8002bc0:	2176      	movs	r1, #118	; 0x76
 8002bc2:	480a      	ldr	r0, [pc, #40]	; (8002bec <lfs_bd_read+0x280>)
 8002bc4:	f006 f96a 	bl	8008e9c <__assert_func>
        if (err) {
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <lfs_bd_read+0x266>
            return err;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	e004      	b.n	8002bdc <lfs_bd_read+0x270>
    while (size > 0) {
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f aee4 	bne.w	80029a2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	08009ff0 	.word	0x08009ff0
 8002be8:	0800a930 	.word	0x0800a930
 8002bec:	0800a010 	.word	0x0800a010
 8002bf0:	0800a02c 	.word	0x0800a02c

08002bf4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	e039      	b.n	8002c84 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2108      	movs	r1, #8
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fdcb 	bl	80027b4 <lfs_min>
 8002c1e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad1      	subs	r1, r2, r3
 8002c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	4413      	add	r3, r2
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	9203      	str	r2, [sp, #12]
 8002c30:	f107 0210 	add.w	r2, r7, #16
 8002c34:	9202      	str	r2, [sp, #8]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff fe92 	bl	800296c <lfs_bd_read>
 8002c48:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <lfs_bd_cmp+0x60>
            return res;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	e01c      	b.n	8002c8e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	18d1      	adds	r1, r2, r3
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f006 f985 	bl	8008f70 <memcmp>
 8002c66:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da01      	bge.n	8002c78 <lfs_bd_cmp+0x84>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e00a      	b.n	8002c8e <lfs_bd_cmp+0x9a>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e008      	b.n	8002c8e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3c1      	bcc.n	8002c10 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d061      	beq.n	8002d74 <lfs_bd_flush+0xdc>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f113 0f02 	cmn.w	r3, #2
 8002cb8:	d05c      	beq.n	8002d74 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d305      	bcc.n	8002cd4 <lfs_bd_flush+0x3c>
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <lfs_bd_flush+0xe8>)
 8002cca:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <lfs_bd_flush+0xec>)
 8002ccc:	219e      	movs	r1, #158	; 0x9e
 8002cce:	482e      	ldr	r0, [pc, #184]	; (8002d88 <lfs_bd_flush+0xf0>)
 8002cd0:	f006 f8e4 	bl	8008e9c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f7ff fd8c 	bl	80027fe <lfs_alignup>
 8002ce6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cec:	689c      	ldr	r4, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	462b      	mov	r3, r5
 8002d04:	47a0      	blx	r4
 8002d06:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	dd05      	ble.n	8002d1a <lfs_bd_flush+0x82>
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <lfs_bd_flush+0xf4>)
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <lfs_bd_flush+0xec>)
 8002d12:	21a2      	movs	r1, #162	; 0xa2
 8002d14:	481c      	ldr	r0, [pc, #112]	; (8002d88 <lfs_bd_flush+0xf0>)
 8002d16:	f006 f8c1 	bl	8008e9c <__assert_func>
        if (err) {
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <lfs_bd_flush+0x8c>
            return err;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	e028      	b.n	8002d76 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d020      	beq.n	8002d6c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fdf7 	bl	8002920 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	9003      	str	r0, [sp, #12]
 8002d42:	9102      	str	r1, [sp, #8]
 8002d44:	9201      	str	r2, [sp, #4]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff50 	bl	8002bf4 <lfs_bd_cmp>
 8002d54:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da01      	bge.n	8002d60 <lfs_bd_flush+0xc8>
                return res;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	e00a      	b.n	8002d76 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002d66:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002d6a:	e004      	b.n	8002d76 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff fde5 	bl	800293e <lfs_cache_zero>
    }

    return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800a038 	.word	0x0800a038
 8002d84:	0800a93c 	.word	0x0800a93c
 8002d88:	0800a010 	.word	0x0800a010
 8002d8c:	0800a02c 	.word	0x0800a02c

08002d90 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fdbd 	bl	8002920 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff ff73 	bl	8002c98 <lfs_bd_flush>
 8002db2:	6178      	str	r0, [r7, #20]
    if (err) {
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <lfs_bd_sync+0x2e>
        return err;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	e011      	b.n	8002de2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
 8002dcc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	dd05      	ble.n	8002de0 <lfs_bd_sync+0x50>
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <lfs_bd_sync+0x5c>)
 8002dd6:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <lfs_bd_sync+0x60>)
 8002dd8:	21c8      	movs	r1, #200	; 0xc8
 8002dda:	4806      	ldr	r0, [pc, #24]	; (8002df4 <lfs_bd_sync+0x64>)
 8002ddc:	f006 f85e 	bl	8008e9c <__assert_func>
    return err;
 8002de0:	697b      	ldr	r3, [r7, #20]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	0800a02c 	.word	0x0800a02c
 8002df0:	0800a94c 	.word	0x0800a94c
 8002df4:	0800a010 	.word	0x0800a010

08002df8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	f113 0f02 	cmn.w	r3, #2
 8002e10:	d00b      	beq.n	8002e2a <lfs_bd_prog+0x32>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d305      	bcc.n	8002e2a <lfs_bd_prog+0x32>
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <lfs_bd_prog+0x144>)
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <lfs_bd_prog+0x148>)
 8002e22:	21d3      	movs	r1, #211	; 0xd3
 8002e24:	4847      	ldr	r0, [pc, #284]	; (8002f44 <lfs_bd_prog+0x14c>)
 8002e26:	f006 f839 	bl	8008e9c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d977      	bls.n	8002f2a <lfs_bd_prog+0x132>
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <lfs_bd_prog+0x150>)
 8002e3c:	4a40      	ldr	r2, [pc, #256]	; (8002f40 <lfs_bd_prog+0x148>)
 8002e3e:	21d4      	movs	r1, #212	; 0xd4
 8002e40:	4840      	ldr	r0, [pc, #256]	; (8002f44 <lfs_bd_prog+0x14c>)
 8002e42:	f006 f82b 	bl	8008e9c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d151      	bne.n	8002ef4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d34c      	bcc.n	8002ef4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	4413      	add	r3, r2
                off >= pcache->off &&
 8002e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d243      	bcs.n	8002ef4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e80:	f7ff fc98 	bl	80027b4 <lfs_min>
 8002e84:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e90:	1acb      	subs	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	69f9      	ldr	r1, [r7, #28]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 f879 	bl	8008f90 <memcpy>

            data += diff;
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8002eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6898      	ldr	r0, [r3, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7ff fc66 	bl	8002794 <lfs_max>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d126      	bne.n	8002f2a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff fed8 	bl	8002c98 <lfs_bd_flush>
 8002ee8:	6178      	str	r0, [r7, #20]
                if (err) {
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <lfs_bd_prog+0x132>
                    return err;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	e01e      	b.n	8002f32 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d005      	beq.n	8002f0a <lfs_bd_prog+0x112>
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <lfs_bd_prog+0x154>)
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <lfs_bd_prog+0x148>)
 8002f02:	21f1      	movs	r1, #241	; 0xf1
 8002f04:	480f      	ldr	r0, [pc, #60]	; (8002f44 <lfs_bd_prog+0x14c>)
 8002f06:	f005 ffc9 	bl	8008e9c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f0e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f1a:	f7ff fc5b 	bl	80027d4 <lfs_aligndown>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d18a      	bne.n	8002e46 <lfs_bd_prog+0x4e>
    }

    return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0800a060 	.word	0x0800a060
 8002f40:	0800a958 	.word	0x0800a958
 8002f44:	0800a010 	.word	0x0800a010
 8002f48:	0800a09c 	.word	0x0800a09c
 8002f4c:	0800a0c0 	.word	0x0800a0c0

08002f50 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d305      	bcc.n	8002f72 <lfs_bd_erase+0x22>
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <lfs_bd_erase+0x54>)
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <lfs_bd_erase+0x58>)
 8002f6a:	21ff      	movs	r1, #255	; 0xff
 8002f6c:	480f      	ldr	r0, [pc, #60]	; (8002fac <lfs_bd_erase+0x5c>)
 8002f6e:	f005 ff95 	bl	8008e9c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4798      	blx	r3
 8002f82:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	dd06      	ble.n	8002f98 <lfs_bd_erase+0x48>
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <lfs_bd_erase+0x60>)
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <lfs_bd_erase+0x58>)
 8002f8e:	f240 1101 	movw	r1, #257	; 0x101
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <lfs_bd_erase+0x5c>)
 8002f94:	f005 ff82 	bl	8008e9c <__assert_func>
    return err;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08009ff0 	.word	0x08009ff0
 8002fa8:	0800a964 	.word	0x0800a964
 8002fac:	0800a010 	.word	0x0800a010
 8002fb0:	0800a02c 	.word	0x0800a02c

08002fb4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d005      	beq.n	8002ffc <lfs_pair_isnull+0x1e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d101      	bne.n	8003000 <lfs_pair_isnull+0x22>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <lfs_pair_isnull+0x24>
 8003000:	2300      	movs	r3, #0
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d017      	beq.n	800305a <lfs_pair_cmp+0x46>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d00f      	beq.n	800305a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	3304      	adds	r3, #4
 8003042:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d008      	beq.n	800305a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <lfs_pair_cmp+0x46>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <lfs_pair_cmp+0x48>
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d107      	bne.n	800308e <lfs_pair_sync+0x26>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	3304      	adds	r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d00d      	beq.n	80030aa <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d108      	bne.n	80030ae <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d101      	bne.n	80030ae <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <lfs_pair_sync+0x48>
 80030ae:	2300      	movs	r3, #0
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fbe0 	bl	8002894 <lfs_fromle32>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1d1c      	adds	r4, r3, #4
 80030e4:	4610      	mov	r0, r2
 80030e6:	f7ff fbd5 	bl	8002894 <lfs_fromle32>
 80030ea:	4603      	mov	r3, r0
 80030ec:	6023      	str	r3, [r4, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80030f6:	b590      	push	{r4, r7, lr}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fbd1 	bl	80028aa <lfs_tole32>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1d1c      	adds	r4, r3, #4
 8003118:	4610      	mov	r0, r2
 800311a:	f7ff fbc6 	bl	80028aa <lfs_tole32>
 800311e:	4603      	mov	r3, r0
 8003120:	6023      	str	r3, [r4, #0]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}

0800312a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	43db      	mvns	r3, r3
 8003136:	0fdb      	lsrs	r3, r3, #31
 8003138:	b2db      	uxtb	r3, r3
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	059b      	lsls	r3, r3, #22
 8003152:	159b      	asrs	r3, r3, #22
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0d1b      	lsrs	r3, r3, #20
 8003178:	b29b      	uxth	r3, r3
 800317a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317e:	b29b      	uxth	r3, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0d1b      	lsrs	r3, r3, #20
 8003198:	b29b      	uxth	r3, r3
 800319a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319e:	b29b      	uxth	r3, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0d1b      	lsrs	r3, r3, #20
 80031b8:	b2db      	uxtb	r3, r3
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffec 	bl	80031ac <lfs_tag_chunk>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b25b      	sxtb	r3, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f2:	b29b      	uxth	r3, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff8f 	bl	8003146 <lfs_tag_isdelete>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ffe5 	bl	8003200 <lfs_tag_size>
 8003236:	4603      	mov	r3, r0
 8003238:	3304      	adds	r3, #4
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8003242:	b480      	push	{r7}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e012      	b.n	8003278 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4403      	add	r3, r0
 800326e:	404a      	eors	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b02      	cmp	r3, #2
 800327c:	dde9      	ble.n	8003252 <lfs_gstate_xor+0x10>
    }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e00b      	b.n	80032b2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <lfs_gstate_iszero+0x20>
            return false;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e006      	b.n	80032ba <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	ddf0      	ble.n	800329a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80032b8:	2301      	movs	r3, #1
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff94 	bl	8003200 <lfs_tag_size>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff81 	bl	8003200 <lfs_tag_size>
 80032fe:	4603      	mov	r3, r0
 8003300:	b2db      	uxtb	r3, r3
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff28 	bl	800316c <lfs_tag_type1>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff14 	bl	800316c <lfs_tag_type1>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <lfs_gstate_hasmovehere+0x30>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe5f 	bl	8003014 <lfs_pair_cmp>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <lfs_gstate_hasmovehere+0x30>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <lfs_gstate_hasmovehere+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fa89 	bl	8002894 <lfs_fromle32>
 8003382:	4602      	mov	r2, r0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fa81 	bl	8002894 <lfs_fromle32>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fa79 	bl	8002894 <lfs_fromle32>
 80033a2:	4602      	mov	r2, r0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fa74 	bl	80028aa <lfs_tole32>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fa6c 	bl	80028aa <lfs_tole32>
 80033d2:	4602      	mov	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fa64 	bl	80028aa <lfs_tole32>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fa49 	bl	8002894 <lfs_fromle32>
 8003402:	4602      	mov	r2, r0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fa41 	bl	8002894 <lfs_fromle32>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	605a      	str	r2, [r3, #4]
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fa3c 	bl	80028aa <lfs_tole32>
 8003432:	4602      	mov	r2, r0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fa34 	bl	80028aa <lfs_tole32>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fa19 	bl	8002894 <lfs_fromle32>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fa11 	bl	8002894 <lfs_fromle32>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fa09 	bl	8002894 <lfs_fromle32>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa01 	bl	8002894 <lfs_fromle32>
 8003492:	4602      	mov	r2, r0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f9f9 	bl	8002894 <lfs_fromle32>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f9f1 	bl	8002894 <lfs_fromle32>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	615a      	str	r2, [r3, #20]
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f9ec 	bl	80028aa <lfs_tole32>
 80034d2:	4602      	mov	r2, r0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f9e4 	bl	80028aa <lfs_tole32>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f9dc 	bl	80028aa <lfs_tole32>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f9d4 	bl	80028aa <lfs_tole32>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f9cc 	bl	80028aa <lfs_tole32>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f9c4 	bl	80028aa <lfs_tole32>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	615a      	str	r2, [r3, #20]
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e009      	b.n	8003554 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d101      	bne.n	800354e <lfs_mlist_isopen+0x1e>
            return true;
 800354a:	2301      	movs	r3, #1
 800354c:	e007      	b.n	800355e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f1      	bne.n	8003540 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3328      	adds	r3, #40	; 0x28
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e00d      	b.n	8003598 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d105      	bne.n	8003592 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]
            break;
 8003590:	e007      	b.n	80035a2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ed      	bne.n	800357c <lfs_mlist_remove+0x12>
        }
    }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4413      	add	r3, r2
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035f4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80035f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80035fa:	fb01 f202 	mul.w	r2, r1, r2
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d212      	bcs.n	8003632 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	009a      	lsls	r2, r3, #2
 8003616:	440a      	add	r2, r1
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2001      	movs	r0, #1
 8003622:	fa00 f202 	lsl.w	r2, r0, r2
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4403      	add	r3, r0
 800362e:	430a      	orrs	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ffe4 	bl	8003640 <lfs_alloc_ack>
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800368a:	e04f      	b.n	800372c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d132      	bne.n	800372c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4413      	add	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036d2:	6a12      	ldr	r2, [r2, #32]
 80036d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d8:	fb01 f202 	mul.w	r2, r1, r2
 80036dc:	1a9a      	subs	r2, r3, r2
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80036e2:	e009      	b.n	80036f8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	429a      	cmp	r2, r3
 8003702:	d011      	beq.n	8003728 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	2101      	movs	r1, #1
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1dd      	bne.n	80036e4 <lfs_alloc+0x64>
                }

                return 0;
 8003728:	2300      	movs	r3, #0
 800372a:	e050      	b.n	80037ce <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	429a      	cmp	r2, r3
 8003736:	d1a9      	bne.n	800368c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10f      	bne.n	8003760 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	4413      	add	r3, r2
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <lfs_alloc+0x158>)
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	f240 2247 	movw	r2, #583	; 0x247
 8003752:	4922      	ldr	r1, [pc, #136]	; (80037dc <lfs_alloc+0x15c>)
 8003754:	4822      	ldr	r0, [pc, #136]	; (80037e0 <lfs_alloc+0x160>)
 8003756:	f005 ffff 	bl	8009758 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800375a:	f06f 031b 	mvn.w	r3, #27
 800375e:	e036      	b.n	80037ce <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800376e:	6a12      	ldr	r2, [r2, #32]
 8003770:	fbb3 f1f2 	udiv	r1, r3, r2
 8003774:	fb01 f202 	mul.w	r2, r1, r2
 8003778:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff f811 	bl	80027b4 <lfs_min>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	461a      	mov	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	f005 fbfe 	bl	8008fac <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80037b0:	2301      	movs	r3, #1
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	490b      	ldr	r1, [pc, #44]	; (80037e4 <lfs_alloc+0x164>)
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f004 fd50 	bl	800825c <lfs_fs_rawtraverse>
 80037bc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f43f af62 	beq.w	800368a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ff49 	bl	800365e <lfs_alloc_drop>
            return err;
 80037cc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	0800a10c 	.word	0x0800a10c
 80037dc:	0800a010 	.word	0x0800a010
 80037e0:	0800a0e4 	.word	0x0800a0e4
 80037e4:	080035d3 	.word	0x080035d3

080037e8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b08f      	sub	sp, #60	; 0x3c
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	333c      	adds	r3, #60	; 0x3c
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fd8e 	bl	8003330 <lfs_gstate_hasmovehere>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80b9 	beq.w	800398e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fcdf 	bl	80031e0 <lfs_tag_id>
 8003822:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80b2 	beq.w	800398e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fcd6 	bl	80031e0 <lfs_tag_id>
 8003834:	4603      	mov	r3, r0
 8003836:	461c      	mov	r4, r3
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f7ff fcd1 	bl	80031e0 <lfs_tag_id>
 800383e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8003840:	429c      	cmp	r4, r3
 8003842:	f200 80a4 	bhi.w	800398e <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800384c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800384e:	e09e      	b.n	800398e <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fce1 	bl	800321a <lfs_tag_dsize>
 8003858:	4602      	mov	r2, r0
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	9203      	str	r2, [sp, #12]
 800386e:	f107 0210 	add.w	r2, r7, #16
 8003872:	9202      	str	r2, [sp, #8]
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	9201      	str	r2, [sp, #4]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2304      	movs	r3, #4
 800387c:	460a      	mov	r2, r1
 800387e:	2100      	movs	r1, #0
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff f873 	bl	800296c <lfs_bd_read>
 8003886:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <lfs_dir_getslice+0xaa>
            return err;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	e089      	b.n	80039a6 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f814 	bl	80028c2 <lfs_frombe32>
 800389a:	4602      	mov	r2, r0
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4053      	eors	r3, r2
 80038a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038a4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fc9a 	bl	80031e0 <lfs_tag_id>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02b      	beq.n	800390a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80038b2:	69f8      	ldr	r0, [r7, #28]
 80038b4:	f7ff fc5a 	bl	800316c <lfs_tag_type1>
 80038b8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d124      	bne.n	800390a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80038c0:	69f8      	ldr	r0, [r7, #28]
 80038c2:	f7ff fc8d 	bl	80031e0 <lfs_tag_id>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461c      	mov	r4, r3
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fc85 	bl	80031e0 <lfs_tag_id>
 80038d6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80038d8:	429c      	cmp	r4, r3
 80038da:	d816      	bhi.n	800390a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <lfs_dir_getslice+0x1c8>)
 80038e4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80038e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d102      	bne.n	80038fa <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80038f4:	f06f 0301 	mvn.w	r3, #1
 80038f8:	e055      	b.n	80039a6 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80038fa:	69f8      	ldr	r0, [r7, #28]
 80038fc:	f7ff fc63 	bl	80031c6 <lfs_tag_splice>
 8003900:	4603      	mov	r3, r0
 8003902:	029a      	lsls	r2, r3, #10
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	4413      	add	r3, r2
 8003908:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	1ad2      	subs	r2, r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	405a      	eors	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d138      	bne.n	800398e <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 800391c:	69f8      	ldr	r0, [r7, #28]
 800391e:	f7ff fc12 	bl	8003146 <lfs_tag_isdelete>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8003928:	f06f 0301 	mvn.w	r3, #1
 800392c:	e03b      	b.n	80039a6 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f7ff fc66 	bl	8003200 <lfs_tag_size>
 8003934:	4603      	mov	r3, r0
 8003936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe ff3b 	bl	80027b4 <lfs_min>
 800393e:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8003946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800394a:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800394c:	3204      	adds	r2, #4
 800394e:	6979      	ldr	r1, [r7, #20]
 8003950:	9103      	str	r1, [sp, #12]
 8003952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003954:	9102      	str	r1, [sp, #8]
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4602      	mov	r2, r0
 800395e:	2100      	movs	r1, #0
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff f803 	bl	800296c <lfs_bd_read>
 8003966:	61b8      	str	r0, [r7, #24]
            if (err) {
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <lfs_dir_getslice+0x18a>
                return err;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	e019      	b.n	80039a6 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8003972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	18d0      	adds	r0, r2, r3
 8003978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	461a      	mov	r2, r3
 8003980:	2100      	movs	r1, #0
 8003982:	f005 fb13 	bl	8008fac <memset>

            return tag + gdiff;
 8003986:	6a3a      	ldr	r2, [r7, #32]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	e00b      	b.n	80039a6 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc42 	bl	800321a <lfs_tag_dsize>
 8003996:	4603      	mov	r3, r0
 8003998:	3304      	adds	r3, #4
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	429a      	cmp	r2, r3
 800399e:	f4bf af57 	bcs.w	8003850 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80039a2:	f06f 0301 	mvn.w	r3, #1
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	372c      	adds	r7, #44	; 0x2c
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	000ffc00 	.word	0x000ffc00

080039b4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	f7ff fc1c 	bl	8003200 <lfs_tag_size>
 80039c8:	4603      	mov	r3, r0
 80039ca:	9302      	str	r3, [sp, #8]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff04 	bl	80037e8 <lfs_dir_getslice>
 80039e0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08c      	sub	sp, #48	; 0x30
 80039ee:	af04      	add	r7, sp, #16
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80039fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	441a      	add	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f240 80c0 	bls.w	8003b8e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8003a0e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003a12:	e0c1      	b.n	8003b98 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03f      	beq.n	8003a9e <lfs_dir_getread+0xb4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f113 0f02 	cmn.w	r3, #2
 8003a26:	d13a      	bne.n	8003a9e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d232      	bcs.n	8003a9e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d324      	bcc.n	8003a8c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	1acb      	subs	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	f7fe feae 	bl	80027b4 <lfs_min>
 8003a58:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a64:	1acb      	subs	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	69f8      	ldr	r0, [r7, #28]
 8003a6e:	f005 fa8f 	bl	8008f90 <memcpy>

                data += diff;
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4413      	add	r3, r2
 8003a78:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003a8a:	e080      	b.n	8003b8e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	69b8      	ldr	r0, [r7, #24]
 8003a98:	f7fe fe8c 	bl	80027b4 <lfs_min>
 8003a9c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f113 0f02 	cmn.w	r3, #2
 8003aa6:	d13a      	bne.n	8003b1e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d232      	bcs.n	8003b1e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d324      	bcc.n	8003b0c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	1acb      	subs	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	69b8      	ldr	r0, [r7, #24]
 8003ad4:	f7fe fe6e 	bl	80027b4 <lfs_min>
 8003ad8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ae4:	1acb      	subs	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4619      	mov	r1, r3
 8003aec:	69f8      	ldr	r0, [r7, #28]
 8003aee:	f005 fa4f 	bl	8008f90 <memcpy>

                data += diff;
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4413      	add	r3, r2
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003b0a:	e040      	b.n	8003b8e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	69b8      	ldr	r0, [r7, #24]
 8003b18:	f7fe fe4c 	bl	80027b4 <lfs_min>
 8003b1c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f06f 0201 	mvn.w	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b30:	f7fe fe50 	bl	80027d4 <lfs_aligndown>
 8003b34:	4602      	mov	r2, r0
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fe fe58 	bl	80027fe <lfs_alignup>
 8003b4e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe fe2b 	bl	80027b4 <lfs_min>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	6889      	ldr	r1, [r1, #8]
 8003b70:	9102      	str	r1, [sp, #8]
 8003b72:	9201      	str	r2, [sp, #4]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fe33 	bl	80037e8 <lfs_dir_getslice>
 8003b82:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da01      	bge.n	8003b8e <lfs_dir_getread+0x1a4>
            return err;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	e004      	b.n	8003b98 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f47f af3f 	bne.w	8003a14 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <lfs_dir_traverse_filter+0x1e>
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <lfs_dir_traverse_filter+0xac>)
 8003bbc:	e000      	b.n	8003bc0 <lfs_dir_traverse_filter+0x20>
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003bc0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	405a      	eors	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d014      	beq.n	8003bfc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fab5 	bl	8003146 <lfs_tag_isdelete>
 8003bdc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <lfs_dir_traverse_filter+0xac>)
 8003be6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <lfs_dir_traverse_filter+0xb4>)
 8003bee:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003bf0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003bf4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d104      	bne.n	8003c06 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
        return true;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01e      	b.n	8003c44 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003c06:	68b8      	ldr	r0, [r7, #8]
 8003c08:	f7ff fab0 	bl	800316c <lfs_tag_type1>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d116      	bne.n	8003c42 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f7ff fae3 	bl	80031e0 <lfs_tag_id>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fadc 	bl	80031e0 <lfs_tag_id>
 8003c28:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003c2a:	429c      	cmp	r4, r3
 8003c2c:	d809      	bhi.n	8003c42 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	f7ff fac9 	bl	80031c6 <lfs_tag_splice>
 8003c34:	4603      	mov	r3, r0
 8003c36:	029a      	lsls	r2, r3, #10
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd90      	pop	{r4, r7, pc}
 8003c4c:	7ffffc00 	.word	0x7ffffc00
 8003c50:	700ffc00 	.word	0x700ffc00
 8003c54:	000ffc00 	.word	0x000ffc00

08003c58 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b0c1      	sub	sp, #260	; 0x104
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003c6c:	6838      	ldr	r0, [r7, #0]
 8003c6e:	f7ff fad4 	bl	800321a <lfs_tag_dsize>
 8003c72:	4602      	mov	r2, r0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	441a      	add	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d237      	bcs.n	8003cf0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003c80:	6838      	ldr	r0, [r7, #0]
 8003c82:	f7ff faca 	bl	800321a <lfs_tag_dsize>
 8003c86:	4602      	mov	r2, r0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	9203      	str	r2, [sp, #12]
 8003c98:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c9c:	9202      	str	r2, [sp, #8]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	9201      	str	r2, [sp, #4]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	2100      	movs	r1, #0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7fe fe5e 	bl	800296c <lfs_bd_read>
 8003cb0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <lfs_dir_traverse+0x6a>
                    return err;
 8003cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc0:	e3a6      	b.n	8004410 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fdfc 	bl	80028c2 <lfs_frombe32>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4053      	eors	r3, r2
 8003cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	e01b      	b.n	8003d28 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	dd13      	ble.n	8003d20 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003cf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003d00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003d0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d0e:	3308      	adds	r3, #8
 8003d10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d1e:	e003      	b.n	8003d28 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003d26:	e2a2      	b.n	800426e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003d28:	4b7e      	ldr	r3, [pc, #504]	; (8003f24 <lfs_dir_traverse+0x2cc>)
 8003d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d34:	405a      	eors	r2, r3
 8003d36:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003d3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d3e:	400b      	ands	r3, r1
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 8285 	bne.w	8004252 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003d48:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003d4c:	f7ff fa48 	bl	80031e0 <lfs_tag_id>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80f0 	beq.w	8003f38 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003d58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d906      	bls.n	8003d6e <lfs_dir_traverse+0x116>
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <lfs_dir_traverse+0x2d0>)
 8003d62:	4a72      	ldr	r2, [pc, #456]	; (8003f2c <lfs_dir_traverse+0x2d4>)
 8003d64:	f240 314e 	movw	r1, #846	; 0x34e
 8003d68:	4871      	ldr	r0, [pc, #452]	; (8003f30 <lfs_dir_traverse+0x2d8>)
 8003d6a:	f005 f897 	bl	8008e9c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d70:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	33f0      	adds	r3, #240	; 0xf0
 8003d7e:	443b      	add	r3, r7
 8003d80:	3b98      	subs	r3, #152	; 0x98
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	33f0      	adds	r3, #240	; 0xf0
 8003d94:	443b      	add	r3, r7
 8003d96:	3b94      	subs	r3, #148	; 0x94
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	33f0      	adds	r3, #240	; 0xf0
 8003daa:	443b      	add	r3, r7
 8003dac:	3b90      	subs	r3, #144	; 0x90
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	33f0      	adds	r3, #240	; 0xf0
 8003dc0:	443b      	add	r3, r7
 8003dc2:	3b8c      	subs	r3, #140	; 0x8c
 8003dc4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	33f0      	adds	r3, #240	; 0xf0
 8003dd8:	443b      	add	r3, r7
 8003dda:	3b88      	subs	r3, #136	; 0x88
 8003ddc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	33f0      	adds	r3, #240	; 0xf0
 8003df0:	443b      	add	r3, r7
 8003df2:	3b84      	subs	r3, #132	; 0x84
 8003df4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	33f0      	adds	r3, #240	; 0xf0
 8003e08:	443b      	add	r3, r7
 8003e0a:	3b80      	subs	r3, #128	; 0x80
 8003e0c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	33f0      	adds	r3, #240	; 0xf0
 8003e20:	443b      	add	r3, r7
 8003e22:	3b7c      	subs	r3, #124	; 0x7c
 8003e24:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	33f0      	adds	r3, #240	; 0xf0
 8003e38:	443b      	add	r3, r7
 8003e3a:	3b7a      	subs	r3, #122	; 0x7a
 8003e3c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	33f0      	adds	r3, #240	; 0xf0
 8003e50:	443b      	add	r3, r7
 8003e52:	3b78      	subs	r3, #120	; 0x78
 8003e54:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	33f0      	adds	r3, #240	; 0xf0
 8003e68:	443b      	add	r3, r7
 8003e6a:	3b74      	subs	r3, #116	; 0x74
 8003e6c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	33f0      	adds	r3, #240	; 0xf0
 8003e80:	443b      	add	r3, r7
 8003e82:	3b70      	subs	r3, #112	; 0x70
 8003e84:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	33f0      	adds	r3, #240	; 0xf0
 8003e98:	443b      	add	r3, r7
 8003e9a:	3b6c      	subs	r3, #108	; 0x6c
 8003e9c:	6019      	str	r1, [r3, #0]
 8003e9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	33f0      	adds	r3, #240	; 0xf0
 8003eac:	443b      	add	r3, r7
 8003eae:	3b68      	subs	r3, #104	; 0x68
 8003eb0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	33f0      	adds	r3, #240	; 0xf0
 8003ec4:	443b      	add	r3, r7
 8003ec6:	3b68      	subs	r3, #104	; 0x68
 8003ec8:	3304      	adds	r3, #4
 8003eca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003eda:	3301      	adds	r3, #1
 8003edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <lfs_dir_traverse+0x2dc>)
 8003f00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8003f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3328      	adds	r3, #40	; 0x28
 8003f18:	440b      	add	r3, r1
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f20:	e6a4      	b.n	8003c6c <lfs_dir_traverse+0x14>
 8003f22:	bf00      	nop
 8003f24:	7ff00000 	.word	0x7ff00000
 8003f28:	0800a110 	.word	0x0800a110
 8003f2c:	0800a974 	.word	0x0800a974
 8003f30:	0800a010 	.word	0x0800a010
 8003f34:	08003ba1 	.word	0x08003ba1
                continue;
            }
        }

popped:
 8003f38:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8003f3a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003f3e:	f7ff f94f 	bl	80031e0 <lfs_tag_id>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f948 	bl	80031e0 <lfs_tag_id>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003f54:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	f200 817c 	bhi.w	8004256 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff f93d 	bl	80031e0 <lfs_tag_id>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	f240 8171 	bls.w	8004256 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f908 	bl	800318c <lfs_tag_type3>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f43f ae74 	beq.w	8003c6c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f900 	bl	800318c <lfs_tag_type3>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f240 1301 	movw	r3, #257	; 0x101
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 80e0 	bne.w	800415a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8003f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f9e:	4ab1      	ldr	r2, [pc, #708]	; (8004264 <lfs_dir_traverse+0x60c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	f000 815a 	beq.w	800425a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8003fa6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	33f0      	adds	r3, #240	; 0xf0
 8003fb4:	443b      	add	r3, r7
 8003fb6:	3b98      	subs	r3, #152	; 0x98
 8003fb8:	4618      	mov	r0, r3
 8003fba:	233c      	movs	r3, #60	; 0x3c
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f004 fff4 	bl	8008fac <memset>
 8003fc4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	33f0      	adds	r3, #240	; 0xf0
 8003fd2:	443b      	add	r3, r7
 8003fd4:	3b98      	subs	r3, #152	; 0x98
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	33f0      	adds	r3, #240	; 0xf0
 8003fe8:	443b      	add	r3, r7
 8003fea:	3b94      	subs	r3, #148	; 0x94
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	33f0      	adds	r3, #240	; 0xf0
 8003ffe:	443b      	add	r3, r7
 8004000:	3b90      	subs	r3, #144	; 0x90
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	33f0      	adds	r3, #240	; 0xf0
 8004014:	443b      	add	r3, r7
 8004016:	3b8c      	subs	r3, #140	; 0x8c
 8004018:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	33f0      	adds	r3, #240	; 0xf0
 800402c:	443b      	add	r3, r7
 800402e:	3b88      	subs	r3, #136	; 0x88
 8004030:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	33f0      	adds	r3, #240	; 0xf0
 8004044:	443b      	add	r3, r7
 8004046:	3b84      	subs	r3, #132	; 0x84
 8004048:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	33f0      	adds	r3, #240	; 0xf0
 800405c:	443b      	add	r3, r7
 800405e:	3b80      	subs	r3, #128	; 0x80
 8004060:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	33f0      	adds	r3, #240	; 0xf0
 8004074:	443b      	add	r3, r7
 8004076:	3b7c      	subs	r3, #124	; 0x7c
 8004078:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	33f0      	adds	r3, #240	; 0xf0
 800408c:	443b      	add	r3, r7
 800408e:	3b7a      	subs	r3, #122	; 0x7a
 8004090:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	33f0      	adds	r3, #240	; 0xf0
 80040a4:	443b      	add	r3, r7
 80040a6:	3b78      	subs	r3, #120	; 0x78
 80040a8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	33f0      	adds	r3, #240	; 0xf0
 80040bc:	443b      	add	r3, r7
 80040be:	3b74      	subs	r3, #116	; 0x74
 80040c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	33f0      	adds	r3, #240	; 0xf0
 80040d4:	443b      	add	r3, r7
 80040d6:	3b70      	subs	r3, #112	; 0x70
 80040d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80040dc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80040de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040e2:	3301      	adds	r3, #1
 80040e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f888 	bl	8003200 <lfs_tag_size>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80040f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f871 	bl	80031e0 <lfs_tag_id>
 80040fe:	4603      	mov	r3, r0
 8004100:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004108:	60bb      	str	r3, [r7, #8]
            off = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <lfs_dir_traverse+0x610>)
 8004122:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8004126:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800412a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800412e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004132:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8004136:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800413a:	3301      	adds	r3, #1
 800413c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8004140:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8004144:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	b29a      	uxth	r2, r3
 800414c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004150:	4413      	add	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8004158:	e588      	b.n	8003c6c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800415a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff f815 	bl	800318c <lfs_tag_type3>
 8004162:	4603      	mov	r3, r0
 8004164:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004168:	d159      	bne.n	800421e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004170:	e04b      	b.n	800420a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800417a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418c:	4413      	add	r3, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004194:	051c      	lsls	r4, r3, #20
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f821 	bl	80031e0 <lfs_tag_id>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80041a6:	4413      	add	r3, r2
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	ea44 0103 	orr.w	r1, r4, r3
 80041ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c0:	4413      	add	r3, r2
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80041c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d8:	4413      	add	r3, r2
 80041da:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80041dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041e0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80041e4:	4798      	blx	r3
 80041e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80041ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da02      	bge.n	80041f8 <lfs_dir_traverse+0x5a0>
                    return res;
 80041f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041f6:	e10b      	b.n	8004410 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80041f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d12e      	bne.n	800425e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004204:	3301      	adds	r3, #1
 8004206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800420a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fff7 	bl	8003200 <lfs_tag_size>
 8004212:	4602      	mov	r2, r0
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004218:	4293      	cmp	r3, r2
 800421a:	d3aa      	bcc.n	8004172 <lfs_dir_traverse+0x51a>
 800421c:	e526      	b.n	8003c6c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800421e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004222:	029a      	lsls	r2, r3, #10
 8004224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004226:	18d1      	adds	r1, r2, r3
 8004228:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800422c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004230:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004234:	4798      	blx	r3
 8004236:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800423a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800423e:	2b00      	cmp	r3, #0
 8004240:	da02      	bge.n	8004248 <lfs_dir_traverse+0x5f0>
                return res;
 8004242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004246:	e0e3      	b.n	8004410 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8004248:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <lfs_dir_traverse+0x614>
 8004250:	e50c      	b.n	8003c6c <lfs_dir_traverse+0x14>
                continue;
 8004252:	bf00      	nop
 8004254:	e50a      	b.n	8003c6c <lfs_dir_traverse+0x14>
            continue;
 8004256:	bf00      	nop
 8004258:	e508      	b.n	8003c6c <lfs_dir_traverse+0x14>
                continue;
 800425a:	bf00      	nop
 800425c:	e506      	b.n	8003c6c <lfs_dir_traverse+0x14>
                    break;
 800425e:	bf00      	nop
        {
 8004260:	e504      	b.n	8003c6c <lfs_dir_traverse+0x14>
 8004262:	bf00      	nop
 8004264:	08003ba1 	.word	0x08003ba1
 8004268:	600ffc00 	.word	0x600ffc00
                break;
 800426c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800426e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80ca 	beq.w	800440c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8004278:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	33f0      	adds	r3, #240	; 0xf0
 8004288:	443b      	add	r3, r7
 800428a:	3b98      	subs	r3, #152	; 0x98
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004290:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	33f0      	adds	r3, #240	; 0xf0
 80042a0:	443b      	add	r3, r7
 80042a2:	3b94      	subs	r3, #148	; 0x94
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80042a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	33f0      	adds	r3, #240	; 0xf0
 80042b8:	443b      	add	r3, r7
 80042ba:	3b90      	subs	r3, #144	; 0x90
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80042c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	33f0      	adds	r3, #240	; 0xf0
 80042d0:	443b      	add	r3, r7
 80042d2:	3b8c      	subs	r3, #140	; 0x8c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80042da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	33f0      	adds	r3, #240	; 0xf0
 80042ea:	443b      	add	r3, r7
 80042ec:	3b88      	subs	r3, #136	; 0x88
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80042f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	33f0      	adds	r3, #240	; 0xf0
 8004304:	443b      	add	r3, r7
 8004306:	3b84      	subs	r3, #132	; 0x84
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800430e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	33f0      	adds	r3, #240	; 0xf0
 800431e:	443b      	add	r3, r7
 8004320:	3b80      	subs	r3, #128	; 0x80
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8004328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800432c:	1e5a      	subs	r2, r3, #1
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	33f0      	adds	r3, #240	; 0xf0
 8004338:	443b      	add	r3, r7
 800433a:	3b7c      	subs	r3, #124	; 0x7c
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8004342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	33f0      	adds	r3, #240	; 0xf0
 8004352:	443b      	add	r3, r7
 8004354:	3b7a      	subs	r3, #122	; 0x7a
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800435c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	33f0      	adds	r3, #240	; 0xf0
 800436c:	443b      	add	r3, r7
 800436e:	3b78      	subs	r3, #120	; 0x78
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8004376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	33f0      	adds	r3, #240	; 0xf0
 8004386:	443b      	add	r3, r7
 8004388:	3b74      	subs	r3, #116	; 0x74
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8004390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004394:	1e5a      	subs	r2, r3, #1
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	33f0      	adds	r3, #240	; 0xf0
 80043a0:	443b      	add	r3, r7
 80043a2:	3b70      	subs	r3, #112	; 0x70
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80043aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	33f0      	adds	r3, #240	; 0xf0
 80043ba:	443b      	add	r3, r7
 80043bc:	3b6c      	subs	r3, #108	; 0x6c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80043c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	33f0      	adds	r3, #240	; 0xf0
 80043d2:	443b      	add	r3, r7
 80043d4:	3b68      	subs	r3, #104	; 0x68
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80043dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043e0:	1e5a      	subs	r2, r3, #1
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	33f0      	adds	r3, #240	; 0xf0
 80043ec:	443b      	add	r3, r7
 80043ee:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80043f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043f6:	3204      	adds	r2, #4
 80043f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043fc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8004400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004404:	3b01      	subs	r3, #1
 8004406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800440a:	e596      	b.n	8003f3a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 800440c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8004410:	4618      	mov	r0, r3
 8004412:	37f4      	adds	r7, #244	; 0xf4
 8004414:	46bd      	mov	sp, r7
 8004416:	bd90      	pop	{r4, r7, pc}

08004418 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b09f      	sub	sp, #124	; 0x7c
 800441c:	af04      	add	r7, sp, #16
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	429a      	cmp	r2, r3
 8004438:	d207      	bcs.n	800444a <lfs_dir_fetchmatch+0x32>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800444a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800444e:	e342      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8004450:	2300      	movs	r3, #0
 8004452:	633b      	str	r3, [r7, #48]	; 0x30
 8004454:	2300      	movs	r3, #0
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800445c:	2300      	movs	r3, #0
 800445e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004460:	e052      	b.n	8004508 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8004462:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800446c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800446e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004472:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004474:	0092      	lsls	r2, r2, #2
 8004476:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8004478:	2104      	movs	r1, #4
 800447a:	9103      	str	r1, [sp, #12]
 800447c:	9202      	str	r2, [sp, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	9201      	str	r2, [sp, #4]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2304      	movs	r3, #4
 8004486:	4602      	mov	r2, r0
 8004488:	2100      	movs	r1, #0
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7fe fa6e 	bl	800296c <lfs_bd_read>
 8004490:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	3368      	adds	r3, #104	; 0x68
 8004498:	443b      	add	r3, r7
 800449a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe f9f8 	bl	8002894 <lfs_fromle32>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	3368      	adds	r3, #104	; 0x68
 80044ac:	443b      	add	r3, r7
 80044ae:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <lfs_dir_fetchmatch+0xac>
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80044be:	d001      	beq.n	80044c4 <lfs_dir_fetchmatch+0xac>
            return err;
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	e308      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80044ca:	d01a      	beq.n	8004502 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80044cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	3368      	adds	r3, #104	; 0x68
 80044d2:	443b      	add	r3, r7
 80044d4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80044d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044da:	3301      	adds	r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	bfb8      	it	lt
 80044e4:	425b      	neglt	r3, r3
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	3368      	adds	r3, #104	; 0x68
 80044ea:	443b      	add	r3, r7
 80044ec:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fe f9c0 	bl	8002878 <lfs_scmp>
 80044f8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dd01      	ble.n	8004502 <lfs_dir_fetchmatch+0xea>
            r = i;
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	3301      	adds	r3, #1
 8004506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450a:	2b01      	cmp	r3, #1
 800450c:	dda9      	ble.n	8004462 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800450e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004510:	2b00      	cmp	r3, #0
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	bfb8      	it	lt
 8004518:	425b      	neglt	r3, r3
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4413      	add	r3, r2
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8004526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004528:	3301      	adds	r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	bfb8      	it	lt
 8004532:	425b      	neglt	r3, r3
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8004540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004542:	2b00      	cmp	r3, #0
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	bfb8      	it	lt
 800454a:	425b      	neglt	r3, r3
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	3368      	adds	r3, #104	; 0x68
 8004550:	443b      	add	r3, r7
 8004552:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2200      	movs	r2, #0
 800455e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8004560:	2300      	movs	r3, #0
 8004562:	65bb      	str	r3, [r7, #88]	; 0x58
 8004564:	e2a3      	b.n	8004aae <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8004576:	4a96      	ldr	r2, [pc, #600]	; (80047d0 <lfs_dir_fetchmatch+0x3b8>)
 8004578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800457c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004580:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800458a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f989 	bl	80028aa <lfs_tole32>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3308      	adds	r3, #8
 80045a2:	2204      	movs	r2, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	f004 fc39 	bl	8008e20 <lfs_crc>
 80045ae:	4603      	mov	r3, r0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f96c 	bl	8002894 <lfs_fromle32>
 80045bc:	4602      	mov	r2, r0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80045c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80045c4:	f7fe fe29 	bl	800321a <lfs_tag_dsize>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	4413      	add	r3, r2
 80045ce:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80045d0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80045d6:	69d8      	ldr	r0, [r3, #28]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2204      	movs	r2, #4
 80045de:	9203      	str	r2, [sp, #12]
 80045e0:	f107 0220 	add.w	r2, r7, #32
 80045e4:	9202      	str	r2, [sp, #8]
 80045e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045e8:	9201      	str	r2, [sp, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4603      	mov	r3, r0
 80045ee:	460a      	mov	r2, r1
 80045f0:	2100      	movs	r1, #0
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7fe f9ba 	bl	800296c <lfs_bd_read>
 80045f8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80045fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8004600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004602:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004606:	d103      	bne.n	8004610 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	759a      	strb	r2, [r3, #22]
                    break;
 800460e:	e1d6      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	e260      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f107 0120 	add.w	r1, r7, #32
 800461a:	2204      	movs	r2, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f004 fbff 	bl	8008e20 <lfs_crc>
 8004622:	4603      	mov	r3, r0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe f94a 	bl	80028c2 <lfs_frombe32>
 800462e:	4602      	mov	r2, r0
 8004630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004632:	4053      	eors	r3, r2
 8004634:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fd76 	bl	800312a <lfs_tag_isvalid>
 800463e:	4603      	mov	r3, r0
 8004640:	f083 0301 	eor.w	r3, r3, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800464a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800464c:	f7fe fd8e 	bl	800316c <lfs_tag_type1>
 8004650:	4603      	mov	r3, r0
 8004652:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004656:	d10d      	bne.n	8004674 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004660:	6992      	ldr	r2, [r2, #24]
 8004662:	fbb3 f1f2 	udiv	r1, r3, r2
 8004666:	fb01 f202 	mul.w	r2, r1, r2
 800466a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <lfs_dir_fetchmatch+0x25c>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <lfs_dir_fetchmatch+0x25e>
 8004674:	2300      	movs	r3, #0
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	759a      	strb	r2, [r3, #22]
                break;
 8004680:	e19d      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fdc8 	bl	800321a <lfs_tag_dsize>
 800468a:	4602      	mov	r2, r0
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	441a      	add	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	429a      	cmp	r2, r3
 8004698:	d903      	bls.n	80046a2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	759a      	strb	r2, [r3, #22]
                break;
 80046a0:	e18d      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fd5f 	bl	800316c <lfs_tag_type1>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80046b4:	d164      	bne.n	8004780 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80046b6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80046bc:	69dc      	ldr	r4, [r3, #28]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046c4:	3204      	adds	r2, #4
 80046c6:	2104      	movs	r1, #4
 80046c8:	9103      	str	r1, [sp, #12]
 80046ca:	f107 011c 	add.w	r1, r7, #28
 80046ce:	9102      	str	r1, [sp, #8]
 80046d0:	9201      	str	r2, [sp, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4623      	mov	r3, r4
 80046d6:	4602      	mov	r2, r0
 80046d8:	2100      	movs	r1, #0
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7fe f946 	bl	800296c <lfs_bd_read>
 80046e0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80046e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80046ee:	d103      	bne.n	80046f8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	759a      	strb	r2, [r3, #22]
                        break;
 80046f6:	e162      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80046fa:	e1ec      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f8c8 	bl	8002894 <lfs_fromle32>
 8004704:	4603      	mov	r3, r0
 8004706:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d003      	beq.n	8004718 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	759a      	strb	r2, [r3, #22]
                    break;
 8004716:	e152      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fd46 	bl	80031ac <lfs_tag_chunk>
 8004720:	4603      	mov	r3, r0
 8004722:	07db      	lsls	r3, r3, #31
 8004724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004726:	4053      	eors	r3, r2
 8004728:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004732:	2204      	movs	r2, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f004 fb73 	bl	8008e20 <lfs_crc>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8004740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004742:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe fd67 	bl	800321a <lfs_tag_dsize>
 800474c:	4602      	mov	r2, r0
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	441a      	add	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800475a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004762:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8004764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004776:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	e720      	b.n	80045c2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004780:	2304      	movs	r3, #4
 8004782:	647b      	str	r3, [r7, #68]	; 0x44
 8004784:	e032      	b.n	80047ec <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8004786:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800478c:	69dc      	ldr	r4, [r3, #28]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004796:	440a      	add	r2, r1
 8004798:	2101      	movs	r1, #1
 800479a:	9103      	str	r1, [sp, #12]
 800479c:	f107 011b 	add.w	r1, r7, #27
 80047a0:	9102      	str	r1, [sp, #8]
 80047a2:	9201      	str	r2, [sp, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	4623      	mov	r3, r4
 80047a8:	4602      	mov	r2, r0
 80047aa:	2100      	movs	r1, #0
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7fe f8dd 	bl	800296c <lfs_bd_read>
 80047b2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 80047b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80047c0:	d103      	bne.n	80047ca <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	759a      	strb	r2, [r3, #22]
 80047c8:	e018      	b.n	80047fc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80047ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80047cc:	e183      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
 80047ce:	bf00      	nop
 80047d0:	0800a150 	.word	0x0800a150
                }

                crc = lfs_crc(crc, &dat, 1);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f107 011b 	add.w	r1, r7, #27
 80047da:	2201      	movs	r2, #1
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fb1f 	bl	8008e20 <lfs_crc>
 80047e2:	4603      	mov	r3, r0
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80047e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e8:	3301      	adds	r3, #1
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fd13 	bl	800321a <lfs_tag_dsize>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d3c4      	bcc.n	8004786 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fcb4 	bl	800316c <lfs_tag_type1>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fce7 	bl	80031e0 <lfs_tag_id>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800481a:	4293      	cmp	r3, r2
 800481c:	f200 8083 	bhi.w	8004926 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fcdc 	bl	80031e0 <lfs_tag_id>
 8004828:	4603      	mov	r3, r0
 800482a:	3301      	adds	r3, #1
 800482c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004830:	e079      	b.n	8004926 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe fc99 	bl	800316c <lfs_tag_type1>
 800483a:	4603      	mov	r3, r0
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d134      	bne.n	80048ac <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fcbe 	bl	80031c6 <lfs_tag_splice>
 800484a:	4603      	mov	r3, r0
 800484c:	b29a      	uxth	r2, r3
 800484e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004852:	4413      	add	r3, r2
 8004854:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8004858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485a:	4ba1      	ldr	r3, [pc, #644]	; (8004ae0 <lfs_dir_fetchmatch+0x6c8>)
 800485c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800485e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004862:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	4293      	cmp	r3, r2
 800486a:	d104      	bne.n	8004876 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800486c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
 8004874:	e057      	b.n	8004926 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8004876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d053      	beq.n	8004926 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fcad 	bl	80031e0 <lfs_tag_id>
 8004886:	4603      	mov	r3, r0
 8004888:	461c      	mov	r4, r3
 800488a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fca7 	bl	80031e0 <lfs_tag_id>
 8004892:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8004894:	429c      	cmp	r4, r3
 8004896:	d846      	bhi.n	8004926 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fc93 	bl	80031c6 <lfs_tag_splice>
 80048a0:	4603      	mov	r3, r0
 80048a2:	029a      	lsls	r2, r3, #10
 80048a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a6:	4413      	add	r3, r2
 80048a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80048aa:	e03c      	b.n	8004926 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fc5c 	bl	800316c <lfs_tag_type1>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048ba:	d134      	bne.n	8004926 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fc74 	bl	80031ac <lfs_tag_chunk>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80048d6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80048dc:	69dc      	ldr	r4, [r3, #28]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048e4:	3204      	adds	r2, #4
 80048e6:	2108      	movs	r1, #8
 80048e8:	9103      	str	r1, [sp, #12]
 80048ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80048ee:	9102      	str	r1, [sp, #8]
 80048f0:	9201      	str	r2, [sp, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4623      	mov	r3, r4
 80048f6:	4602      	mov	r2, r0
 80048f8:	2100      	movs	r1, #0
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7fe f836 	bl	800296c <lfs_bd_read>
 8004900:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8004902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8004908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800490e:	d103      	bne.n	8004918 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	759a      	strb	r2, [r3, #22]
                        break;
 8004916:	e052      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491a:	e0dc      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 800491c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fbce 	bl	80030c2 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8004926:	6a3a      	ldr	r2, [r7, #32]
 8004928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492a:	405a      	eors	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f ae46 	bne.w	80045c2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004936:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800493c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800493e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004940:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	f107 0210 	add.w	r2, r7, #16
 8004948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800494c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004950:	4798      	blx	r3
 8004952:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	da09      	bge.n	800496e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004960:	d103      	bne.n	800496a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	759a      	strb	r2, [r3, #22]
 8004968:	e029      	b.n	80049be <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800496c:	e0b3      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
 8004978:	e623      	b.n	80045c2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	405a      	eors	r2, r3
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <lfs_dir_fetchmatch+0x6cc>)
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
 800498e:	e618      	b.n	80045c2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2b02      	cmp	r3, #2
 8004994:	f47f ae15 	bne.w	80045c2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fc20 	bl	80031e0 <lfs_tag_id>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461c      	mov	r4, r3
 80049a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fc1a 	bl	80031e0 <lfs_tag_id>
 80049ac:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80049ae:	429c      	cmp	r4, r3
 80049b0:	f63f ae07 	bhi.w	80045c2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80049bc:	e601      	b.n	80045c2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d100      	bne.n	80049c8 <lfs_dir_fetchmatch+0x5b0>
 80049c6:	e05d      	b.n	8004a84 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	333c      	adds	r3, #60	; 0x3c
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fcad 	bl	8003330 <lfs_gstate_hasmovehere>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d028      	beq.n	8004a2e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe fbfd 	bl	80031e0 <lfs_tag_id>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461c      	mov	r4, r3
 80049ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fbf7 	bl	80031e0 <lfs_tag_id>
 80049f2:	4603      	mov	r3, r0
 80049f4:	429c      	cmp	r4, r3
 80049f6:	d104      	bne.n	8004a02 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 80049f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004a00:	e015      	b.n	8004a2e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8004a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d011      	beq.n	8004a2e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fbe6 	bl	80031e0 <lfs_tag_id>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461c      	mov	r4, r3
 8004a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fbe0 	bl	80031e0 <lfs_tag_id>
 8004a20:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d203      	bcs.n	8004a2e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8004a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a28:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004a2c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8004a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8004a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fbd2 	bl	80031e0 <lfs_tag_id>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	8a9b      	ldrh	r3, [r3, #20]
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fd feb4 	bl	80027b4 <lfs_min>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a52:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8004a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fb67 	bl	800312a <lfs_tag_isvalid>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8004a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a64:	e037      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8004a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fbb9 	bl	80031e0 <lfs_tag_id>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	8a9b      	ldrh	r3, [r3, #20]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d202      	bcs.n	8004a80 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8004a7a:	f06f 0301 	mvn.w	r3, #1
 8004a7e:	e02a      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e028      	b.n	8004ad6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fa94 	bl	8002fb4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8e:	3301      	adds	r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	bfb8      	it	lt
 8004a98:	425b      	neglt	r3, r3
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	3368      	adds	r3, #104	; 0x68
 8004a9e:	443b      	add	r3, r7
 8004aa0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8004aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aaa:	3301      	adds	r3, #1
 8004aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f77f ad58 	ble.w	8004566 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	490a      	ldr	r1, [pc, #40]	; (8004ae8 <lfs_dir_fetchmatch+0x6d0>)
 8004ac0:	9101      	str	r1, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004aca:	4908      	ldr	r1, [pc, #32]	; (8004aec <lfs_dir_fetchmatch+0x6d4>)
 8004acc:	4808      	ldr	r0, [pc, #32]	; (8004af0 <lfs_dir_fetchmatch+0x6d8>)
 8004ace:	f004 fe43 	bl	8009758 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8004ad2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	376c      	adds	r7, #108	; 0x6c
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	000ffc00 	.word	0x000ffc00
 8004ae4:	7ffffc00 	.word	0x7ffffc00
 8004ae8:	0800a10c 	.word	0x0800a10c
 8004aec:	0800a010 	.word	0x0800a010
 8004af0:	0800a118 	.word	0x0800a118

08004af4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004b00:	2300      	movs	r3, #0
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fc7c 	bl	8004418 <lfs_dir_fetchmatch>
 8004b20:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004b38:	f107 0310 	add.w	r3, r7, #16
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <lfs_dir_getgstate+0x5c>)
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <lfs_dir_getgstate+0x60>)
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7fe ff35 	bl	80039b4 <lfs_dir_get>
 8004b4a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da05      	bge.n	8004b5e <lfs_dir_getgstate+0x32>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f113 0f02 	cmn.w	r3, #2
 8004b58:	d001      	beq.n	8004b5e <lfs_dir_getgstate+0x32>
        return res;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	e00f      	b.n	8004b7e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f113 0f02 	cmn.w	r3, #2
 8004b64:	d00a      	beq.n	8004b7c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8004b66:	f107 0310 	add.w	r3, r7, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fc00 	bl	8003370 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe fb63 	bl	8003242 <lfs_gstate_xor>
    }

    return 0;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	7ff0000c 	.word	0x7ff0000c
 8004b8c:	7ff00000 	.word	0x7ff00000

08004b90 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b08f      	sub	sp, #60	; 0x3c
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	689c      	ldr	r4, [r3, #8]
 8004bae:	68b8      	ldr	r0, [r7, #8]
 8004bb0:	f7fe fb26 	bl	8003200 <lfs_tag_size>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7fd fdfb 	bl	80027b4 <lfs_min>
 8004bbe:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004bc0:	6a3c      	ldr	r4, [r7, #32]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	6852      	ldr	r2, [r2, #4]
 8004bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bcc:	6849      	ldr	r1, [r1, #4]
 8004bce:	69b8      	ldr	r0, [r7, #24]
 8004bd0:	9003      	str	r0, [sp, #12]
 8004bd2:	9102      	str	r1, [sp, #8]
 8004bd4:	9201      	str	r2, [sp, #4]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	4622      	mov	r2, r4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	6a38      	ldr	r0, [r7, #32]
 8004be0:	f7fe f808 	bl	8002bf4 <lfs_bd_cmp>
 8004be4:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <lfs_dir_find_match+0x60>
        return res;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	e014      	b.n	8004c1a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	689c      	ldr	r4, [r3, #8]
 8004bf4:	68b8      	ldr	r0, [r7, #8]
 8004bf6:	f7fe fb03 	bl	8003200 <lfs_tag_size>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d00b      	beq.n	8004c18 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	689c      	ldr	r4, [r3, #8]
 8004c04:	68b8      	ldr	r0, [r7, #8]
 8004c06:	f7fe fafb 	bl	8003200 <lfs_tag_size>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d201      	bcs.n	8004c14 <lfs_dir_find_match+0x84>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e002      	b.n	8004c1a <lfs_dir_find_match+0x8a>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e000      	b.n	8004c1a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	372c      	adds	r7, #44	; 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}
	...

08004c24 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b093      	sub	sp, #76	; 0x4c
 8004c28:	af04      	add	r7, sp, #16
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004c44:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <lfs_dir_find+0x1dc>)
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a1a      	ldr	r2, [r3, #32]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004c5a:	496a      	ldr	r1, [pc, #424]	; (8004e04 <lfs_dir_find+0x1e0>)
 8004c5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c5e:	f004 fdc1 	bl	80097e4 <strspn>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	4413      	add	r3, r2
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004c6a:	4966      	ldr	r1, [pc, #408]	; (8004e04 <lfs_dir_find+0x1e0>)
 8004c6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c6e:	f004 fda8 	bl	80097c2 <strcspn>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <lfs_dir_find+0x62>
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	4b62      	ldr	r3, [pc, #392]	; (8004e08 <lfs_dir_find+0x1e4>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d00a      	beq.n	8004c9c <lfs_dir_find+0x78>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d10c      	bne.n	8004ca6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	495f      	ldr	r1, [pc, #380]	; (8004e0c <lfs_dir_find+0x1e8>)
 8004c90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c92:	f004 f96d 	bl	8008f70 <memcmp>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <lfs_dir_find+0x82>
            name += namelen;
 8004c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	4413      	add	r3, r2
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004ca4:	e7d9      	b.n	8004c5a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	4413      	add	r3, r2
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004cb2:	4954      	ldr	r1, [pc, #336]	; (8004e04 <lfs_dir_find+0x1e0>)
 8004cb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cb6:	f004 fd95 	bl	80097e4 <strspn>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	4413      	add	r3, r2
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004cc2:	4950      	ldr	r1, [pc, #320]	; (8004e04 <lfs_dir_find+0x1e0>)
 8004cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc6:	f004 fd7c 	bl	80097c2 <strcspn>
 8004cca:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01d      	beq.n	8004d0e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d112      	bne.n	8004cfe <lfs_dir_find+0xda>
 8004cd8:	2202      	movs	r2, #2
 8004cda:	494c      	ldr	r1, [pc, #304]	; (8004e0c <lfs_dir_find+0x1e8>)
 8004cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cde:	f004 f947 	bl	8008f70 <memcmp>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <lfs_dir_find+0xda>
                depth -= 1;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d107      	bne.n	8004d04 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004cfc:	e7ad      	b.n	8004c5a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	3301      	adds	r3, #1
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	4413      	add	r3, r2
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004d0c:	e7d1      	b.n	8004cb2 <lfs_dir_find+0x8e>
                break;
 8004d0e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <lfs_dir_find+0xf8>
            return tag;
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	e06c      	b.n	8004df6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d20:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fa31 	bl	800318c <lfs_tag_type3>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d002      	beq.n	8004d36 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004d30:	f06f 0313 	mvn.w	r3, #19
 8004d34:	e05f      	b.n	8004df6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fa51 	bl	80031e0 <lfs_tag_id>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d01c      	beq.n	8004d84 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fa47 	bl	80031e0 <lfs_tag_id>
 8004d52:	4603      	mov	r3, r0
 8004d54:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d62:	9200      	str	r2, [sp, #0]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <lfs_dir_find+0x1ec>)
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7fe fe23 	bl	80039b4 <lfs_dir_get>
 8004d6e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da01      	bge.n	8004d7a <lfs_dir_find+0x156>
                return res;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	e03d      	b.n	8004df6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3318      	adds	r3, #24
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe f99f 	bl	80030c2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004d8a:	212f      	movs	r1, #47	; 0x2f
 8004d8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d8e:	f004 fd0b 	bl	80097a8 <strchr>
 8004d92:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <lfs_dir_find+0x178>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	e000      	b.n	8004d9e <lfs_dir_find+0x17a>
 8004d9c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	613a      	str	r2, [r7, #16]
 8004da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da4:	617a      	str	r2, [r7, #20]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004daa:	f107 0210 	add.w	r2, r7, #16
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <lfs_dir_find+0x1f0>)
 8004db2:	9202      	str	r2, [sp, #8]
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff fb28 	bl	8004418 <lfs_dir_fetchmatch>
 8004dc8:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da01      	bge.n	8004dd4 <lfs_dir_find+0x1b0>
                return tag;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	e010      	b.n	8004df6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	4413      	add	r3, r2
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004de2:	e73a      	b.n	8004c5a <lfs_dir_find+0x36>
            if (!dir->split) {
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	7ddb      	ldrb	r3, [r3, #23]
 8004de8:	f083 0301 	eor.w	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0c8      	beq.n	8004d84 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004df2:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	373c      	adds	r7, #60	; 0x3c
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	002ffc00 	.word	0x002ffc00
 8004e04:	0800a158 	.word	0x0800a158
 8004e08:	0800a15c 	.word	0x0800a15c
 8004e0c:	0800a160 	.word	0x0800a160
 8004e10:	700ffc00 	.word	0x700ffc00
 8004e14:	08004b91 	.word	0x08004b91

08004e18 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b08b      	sub	sp, #44	; 0x2c
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f103 0010 	add.w	r0, r3, #16
 8004e2c:	68fc      	ldr	r4, [r7, #12]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	6852      	ldr	r2, [r2, #4]
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	9103      	str	r1, [sp, #12]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	9102      	str	r1, [sp, #8]
 8004e3e:	9201      	str	r2, [sp, #4]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	4622      	mov	r2, r4
 8004e46:	4601      	mov	r1, r0
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7fd ffd5 	bl	8002df8 <lfs_bd_prog>
 8004e4e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <lfs_dir_commitprog+0x42>
        return err;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e010      	b.n	8004e7c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f003 ffdc 	bl	8008e20 <lfs_crc>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	441a      	add	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	605a      	str	r2, [r3, #4]
    return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd90      	pop	{r4, r7, pc}

08004e84 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b08f      	sub	sp, #60	; 0x3c
 8004e88:	af04      	add	r7, sp, #16
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe f9c1 	bl	800321a <lfs_tag_dsize>
 8004e98:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d902      	bls.n	8004eb0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8004eaa:	f06f 031b 	mvn.w	r3, #27
 8004eae:	e065      	b.n	8004f7c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	4053      	eors	r3, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fd fd0c 	bl	80028da <lfs_tobe32>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004ec6:	f107 0214 	add.w	r2, r7, #20
 8004eca:	2304      	movs	r3, #4
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ffa2 	bl	8004e18 <lfs_dir_commitprog>
 8004ed4:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <lfs_dir_commitattr+0x5c>
        return err;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	e04d      	b.n	8004f7c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0c      	blt.n	8004f00 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7ff ff92 	bl	8004e18 <lfs_dir_commitprog>
 8004ef4:	61f8      	str	r0, [r7, #28]
        if (err) {
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d039      	beq.n	8004f70 <lfs_dir_commitattr+0xec>
            return err;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	e03d      	b.n	8004f7c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	e02d      	b.n	8004f66 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004f0a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004f12:	1f1c      	subs	r4, r3, #4
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	440a      	add	r2, r1
 8004f20:	2101      	movs	r1, #1
 8004f22:	9103      	str	r1, [sp, #12]
 8004f24:	f107 0113 	add.w	r1, r7, #19
 8004f28:	9102      	str	r1, [sp, #8]
 8004f2a:	9201      	str	r2, [sp, #4]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4623      	mov	r3, r4
 8004f30:	4602      	mov	r2, r0
 8004f32:	2100      	movs	r1, #0
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fd fd19 	bl	800296c <lfs_bd_read>
 8004f3a:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <lfs_dir_commitattr+0xc2>
                return err;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	e01a      	b.n	8004f7c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004f46:	f107 0213 	add.w	r2, r7, #19
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff ff62 	bl	8004e18 <lfs_dir_commitprog>
 8004f54:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <lfs_dir_commitattr+0xdc>
                return err;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	e00d      	b.n	8004f7c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	3301      	adds	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d3cc      	bcc.n	8004f0a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
    return 0;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	372c      	adds	r7, #44	; 0x2c
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}

08004f84 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b097      	sub	sp, #92	; 0x5c
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fd fc2d 	bl	80027fe <lfs_alignup>
 8004fa4:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8004fae:	e0a6      	b.n	80050fe <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8004fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd fbf6 	bl	80027b4 <lfs_min>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	4413      	add	r3, r2
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8004fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d206      	bcs.n	8004fe6 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	3b08      	subs	r3, #8
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004fe0:	f7fd fbe8 	bl	80027b4 <lfs_min>
 8004fe4:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	9203      	str	r2, [sp, #12]
 8004ff6:	f107 0214 	add.w	r2, r7, #20
 8004ffa:	9202      	str	r2, [sp, #8]
 8004ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffe:	9201      	str	r2, [sp, #4]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2304      	movs	r3, #4
 8005004:	460a      	mov	r2, r1
 8005006:	2100      	movs	r1, #0
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fd fcaf 	bl	800296c <lfs_bd_read>
 800500e:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <lfs_dir_commitcrc+0x9e>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800501c:	d001      	beq.n	8005022 <lfs_dir_commitcrc+0x9e>
            return err;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	e0e8      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd fc4c 	bl	80028c2 <lfs_frombe32>
 800502a:	4603      	mov	r3, r0
 800502c:	43db      	mvns	r3, r3
 800502e:	0fdb      	lsrs	r3, r3, #31
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800503a:	7efb      	ldrb	r3, [r7, #27]
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	051a      	lsls	r2, r3, #20
 8005042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	1acb      	subs	r3, r1, r3
 8005048:	4313      	orrs	r3, r2
 800504a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800504e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005052:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4053      	eors	r3, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fc3c 	bl	80028da <lfs_tobe32>
 8005062:	4603      	mov	r3, r0
 8005064:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f107 010c 	add.w	r1, r7, #12
 800506e:	2204      	movs	r2, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f003 fed5 	bl	8008e20 <lfs_crc>
 8005076:	4602      	mov	r2, r0
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4618      	mov	r0, r3
 8005082:	f7fd fc12 	bl	80028aa <lfs_tole32>
 8005086:	4603      	mov	r3, r0
 8005088:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f103 0010 	add.w	r0, r3, #16
 8005090:	687c      	ldr	r4, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	6852      	ldr	r2, [r2, #4]
 800509a:	2108      	movs	r1, #8
 800509c:	9103      	str	r1, [sp, #12]
 800509e:	f107 010c 	add.w	r1, r7, #12
 80050a2:	9102      	str	r1, [sp, #8]
 80050a4:	9201      	str	r2, [sp, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	4622      	mov	r2, r4
 80050ac:	4601      	mov	r1, r0
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fd fea2 	bl	8002df8 <lfs_bd_prog>
 80050b4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <lfs_dir_commitcrc+0x13c>
            return err;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	e099      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe f892 	bl	8003200 <lfs_tag_size>
 80050dc:	4603      	mov	r3, r0
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	441a      	add	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80050ea:	7efb      	ldrb	r3, [r7, #27]
 80050ec:	07da      	lsls	r2, r3, #31
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	405a      	eors	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005104:	429a      	cmp	r2, r3
 8005106:	f63f af53 	bhi.w	8004fb0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f103 0110 	add.w	r1, r3, #16
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	2300      	movs	r3, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fd fe3b 	bl	8002d90 <lfs_bd_sync>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <lfs_dir_commitcrc+0x1a2>
        return err;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	e066      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8005130:	e05b      	b.n	80051ea <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513c:	e030      	b.n	80051a0 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005142:	429a      	cmp	r2, r3
 8005144:	d106      	bne.n	8005154 <lfs_dir_commitcrc+0x1d0>
 8005146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	429a      	cmp	r2, r3
 800514c:	d002      	beq.n	8005154 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800514e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005152:	e04f      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8005154:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8005156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800515c:	1d18      	adds	r0, r3, #4
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2201      	movs	r2, #1
 8005164:	9203      	str	r2, [sp, #12]
 8005166:	f107 020b 	add.w	r2, r7, #11
 800516a:	9202      	str	r2, [sp, #8]
 800516c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4603      	mov	r3, r0
 8005174:	460a      	mov	r2, r1
 8005176:	2100      	movs	r1, #0
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7fd fbf7 	bl	800296c <lfs_bd_read>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <lfs_dir_commitcrc+0x206>
                return err;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	e034      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800518a:	f107 030b 	add.w	r3, r7, #11
 800518e:	2201      	movs	r2, #1
 8005190:	4619      	mov	r1, r3
 8005192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005194:	f003 fe44 	bl	8008e20 <lfs_crc>
 8005198:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	3301      	adds	r3, #1
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	3304      	adds	r3, #4
 80051a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3c9      	bcc.n	800513e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80051b0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80051b4:	e01e      	b.n	80051f4 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd faf7 	bl	80027b4 <lfs_min>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	4413      	add	r3, r2
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80051ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d206      	bcs.n	80051e4 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	3b08      	subs	r3, #8
 80051da:	4619      	mov	r1, r3
 80051dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051de:	f7fd fae9 	bl	80027b4 <lfs_min>
 80051e2:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	3304      	adds	r3, #4
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80051ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d39f      	bcc.n	8005132 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	374c      	adds	r7, #76	; 0x4c
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd90      	pop	{r4, r7, pc}

080051fc <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af04      	add	r7, sp, #16
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e016      	b.n	800523a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	bfb8      	it	lt
 8005218:	425b      	neglt	r3, r3
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	4413      	add	r3, r2
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fe fa2c 	bl	8003680 <lfs_alloc>
 8005228:	60f8      	str	r0, [r7, #12]
        if (err) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <lfs_dir_alloc+0x38>
            return err;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	e058      	b.n	80052e6 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3301      	adds	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b01      	cmp	r3, #1
 800523e:	dde5      	ble.n	800520c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8005250:	2004      	movs	r0, #4
 8005252:	9003      	str	r0, [sp, #12]
 8005254:	9202      	str	r2, [sp, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	9201      	str	r2, [sp, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2304      	movs	r3, #4
 800525e:	460a      	mov	r2, r1
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fd fb82 	bl	800296c <lfs_bd_read>
 8005268:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fb10 	bl	8002894 <lfs_fromle32>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <lfs_dir_alloc+0x90>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005286:	d001      	beq.n	800528c <lfs_dir_alloc+0x90>
        return err;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	e02c      	b.n	80052e6 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	dd0e      	ble.n	80052b4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	3301      	adds	r3, #1
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fd faa8 	bl	80027fe <lfs_alignup>
 80052ae:	4602      	mov	r2, r0
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2204      	movs	r2, #4
 80052b8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2200      	movs	r2, #0
 80052e2:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b092      	sub	sp, #72	; 0x48
 80052f2:	af04      	add	r7, sp, #16
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	4619      	mov	r1, r3
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff7a 	bl	80051fc <lfs_dir_alloc>
 8005308:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <lfs_dir_split+0x26>
        return err;
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	e03c      	b.n	800538e <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	7ddb      	ldrb	r3, [r3, #23]
 8005318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8005328:	f107 0110 	add.w	r1, r7, #16
 800532c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005330:	9302      	str	r3, [sp, #8]
 8005332:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f879 	bl	8005438 <lfs_dir_compact>
 8005346:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	da01      	bge.n	8005352 <lfs_dir_split+0x64>
        return res;
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	e01d      	b.n	800538e <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2201      	movs	r2, #1
 8005362:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3320      	adds	r3, #32
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f7fd fe51 	bl	8003014 <lfs_pair_cmp>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <lfs_dir_split+0x9e>
 8005378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3738      	adds	r7, #56	; 0x38
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80053a6:	68b8      	ldr	r0, [r7, #8]
 80053a8:	f7fd ff37 	bl	800321a <lfs_tag_dsize>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	441a      	add	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	601a      	str	r2, [r3, #0]
    return 0;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	f7ff fd51 	bl	8004e84 <lfs_dir_commitattr>
 80053e2:	4603      	mov	r3, r0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dd11      	ble.n	8005424 <lfs_dir_needsrelocation+0x38>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	3301      	adds	r3, #1
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800540a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540c:	3201      	adds	r2, #1
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	fbb3 f1f2 	udiv	r1, r3, r2
 8005416:	fb01 f202 	mul.w	r2, r1, r2
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <lfs_dir_needsrelocation+0x38>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <lfs_dir_needsrelocation+0x3a>
 8005424:	2300      	movs	r3, #0
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b0a4      	sub	sp, #144	; 0x90
 800543c:	af0a      	add	r7, sp, #40	; 0x28
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff ffcc 	bl	80053ec <lfs_dir_needsrelocation>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8005464:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <lfs_dir_compact+0x52>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	657a      	str	r2, [r7, #84]	; 0x54
 8005472:	2201      	movs	r2, #1
 8005474:	65ba      	str	r2, [r7, #88]	; 0x58
 8005476:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fdc9 	bl	8003014 <lfs_pair_cmp>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	f040 8155 	bne.w	8005734 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005490:	2300      	movs	r3, #0
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a0:	2300      	movs	r3, #0
 80054a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <lfs_dir_compact+0x80>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b4:	3b08      	subs	r3, #8
 80054b6:	e003      	b.n	80054c0 <lfs_dir_compact+0x88>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4619      	mov	r1, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7fd fd41 	bl	8002f50 <lfs_bd_erase>
 80054ce:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80054d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80054d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80054dc:	f000 812c 	beq.w	8005738 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80054e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e2:	e187      	b.n	80057f4 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd f9de 	bl	80028aa <lfs_tole32>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80054fa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80054fe:	2304      	movs	r3, #4
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff fc89 	bl	8004e18 <lfs_dir_commitprog>
 8005506:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fd f9c1 	bl	8002894 <lfs_fromle32>
 8005512:	4602      	mov	r2, r0
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]
            if (err) {
 8005518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800551e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005520:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005524:	f000 810a 	beq.w	800573c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8005528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552a:	e163      	b.n	80057f4 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800552c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005530:	425b      	negs	r3, r3
 8005532:	b29b      	uxth	r3, r3
 8005534:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	637a      	str	r2, [r7, #52]	; 0x34
 800553a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800553e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8005540:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005544:	9208      	str	r2, [sp, #32]
 8005546:	4aad      	ldr	r2, [pc, #692]	; (80057fc <lfs_dir_compact+0x3c4>)
 8005548:	9207      	str	r2, [sp, #28]
 800554a:	9306      	str	r3, [sp, #24]
 800554c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005550:	9305      	str	r3, [sp, #20]
 8005552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	4ba8      	ldr	r3, [pc, #672]	; (8005800 <lfs_dir_compact+0x3c8>)
 800555e:	9302      	str	r3, [sp, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
 800556c:	2200      	movs	r2, #0
 800556e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7fe fb71 	bl	8003c58 <lfs_dir_traverse>
 8005576:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8005578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800557e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005580:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005584:	f000 80dc 	beq.w	8005740 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	e133      	b.n	80057f4 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	3318      	adds	r3, #24
 8005590:	4618      	mov	r0, r3
 8005592:	f7fd fd24 	bl	8002fde <lfs_pair_isnull>
 8005596:	4603      	mov	r3, r0
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d022      	beq.n	80055e8 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd fda5 	bl	80030f6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	7ddb      	ldrb	r3, [r3, #23]
 80055b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80055b4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80055b6:	4a93      	ldr	r2, [pc, #588]	; (8005804 <lfs_dir_compact+0x3cc>)
 80055b8:	431a      	orrs	r2, r3
                        dir->tail);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80055be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fc5e 	bl	8004e84 <lfs_dir_commitattr>
 80055c8:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3318      	adds	r3, #24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fd77 	bl	80030c2 <lfs_pair_fromle32>
                if (err) {
 80055d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055e0:	f000 80b0 	beq.w	8005744 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80055e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e6:	e105      	b.n	80057f4 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80055e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80055f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800560c:	4611      	mov	r1, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd fe17 	bl	8003242 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800561a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fe0e 	bl	8003242 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800562c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd fe05 	bl	8003242 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005648:	461a      	mov	r2, r3
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fa6d 	bl	8004b2c <lfs_dir_getgstate>
 8005652:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <lfs_dir_compact+0x226>
                return err;
 800565a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565c:	e0ca      	b.n	80057f4 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800565e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005662:	4618      	mov	r0, r3
 8005664:	f7fd fe12 	bl	800328c <lfs_gstate_iszero>
 8005668:	4603      	mov	r3, r0
 800566a:	f083 0301 	eor.w	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d016      	beq.n	80056a2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8005674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd fe99 	bl	80033b0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800567e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005682:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005686:	4a60      	ldr	r2, [pc, #384]	; (8005808 <lfs_dir_compact+0x3d0>)
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fbfb 	bl	8004e84 <lfs_dir_commitattr>
 800568e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8005690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8005696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005698:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800569c:	d054      	beq.n	8005748 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800569e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a0:	e0a8      	b.n	80057f4 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80056a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fc6b 	bl	8004f84 <lfs_dir_commitcrc>
 80056ae:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80056b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80056b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80056bc:	d046      	beq.n	800574c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80056be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c0:	e098      	b.n	80057f4 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80056c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056c8:	6992      	ldr	r2, [r2, #24]
 80056ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80056ce:	fb01 f202 	mul.w	r2, r1, r2
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <lfs_dir_compact+0x2ae>
 80056d8:	4b4c      	ldr	r3, [pc, #304]	; (800580c <lfs_dir_compact+0x3d4>)
 80056da:	4a4d      	ldr	r2, [pc, #308]	; (8005810 <lfs_dir_compact+0x3d8>)
 80056dc:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 80056e0:	484c      	ldr	r0, [pc, #304]	; (8005814 <lfs_dir_compact+0x3dc>)
 80056e2:	f003 fbdb 	bl	8008e9c <__assert_func>
            lfs_pair_swap(dir->pair);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd fc63 	bl	8002fb4 <lfs_pair_swap>
            dir->count = end - begin;
 80056ee:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80056f2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80056fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8005704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3348      	adds	r3, #72	; 0x48
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8005716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800571a:	f083 0301 	eor.w	r3, r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d064      	beq.n	80057ee <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	333c      	adds	r3, #60	; 0x3c
 800572a:	3230      	adds	r2, #48	; 0x30
 800572c:	ca07      	ldmia	r2, {r0, r1, r2}
 800572e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8005732:	e05c      	b.n	80057ee <lfs_dir_compact+0x3b6>
        goto relocate;
 8005734:	bf00      	nop
 8005736:	e00a      	b.n	800574e <lfs_dir_compact+0x316>
                    goto relocate;
 8005738:	bf00      	nop
 800573a:	e008      	b.n	800574e <lfs_dir_compact+0x316>
                    goto relocate;
 800573c:	bf00      	nop
 800573e:	e006      	b.n	800574e <lfs_dir_compact+0x316>
                    goto relocate;
 8005740:	bf00      	nop
 8005742:	e004      	b.n	800574e <lfs_dir_compact+0x316>
                        goto relocate;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <lfs_dir_compact+0x316>
                        goto relocate;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <lfs_dir_compact+0x316>
                    goto relocate;
 800574c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3310      	adds	r3, #16
 8005758:	4619      	mov	r1, r3
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7fd f8e0 	bl	8002920 <lfs_cache_drop>
        if (!tired) {
 8005760:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <lfs_dir_compact+0x3e0>)
 8005774:	9200      	str	r2, [sp, #0]
 8005776:	f240 725a 	movw	r2, #1882	; 0x75a
 800577a:	4926      	ldr	r1, [pc, #152]	; (8005814 <lfs_dir_compact+0x3dc>)
 800577c:	4827      	ldr	r0, [pc, #156]	; (800581c <lfs_dir_compact+0x3e4>)
 800577e:	f003 ffeb 	bl	8009758 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	617a      	str	r2, [r7, #20]
 8005788:	2201      	movs	r2, #1
 800578a:	61ba      	str	r2, [r7, #24]
 800578c:	f107 0214 	add.w	r2, r7, #20
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7fd fc3e 	bl	8003014 <lfs_pair_cmp>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <lfs_dir_compact+0x3e0>)
 80057a4:	9200      	str	r2, [sp, #0]
 80057a6:	f240 725f 	movw	r2, #1887	; 0x75f
 80057aa:	491a      	ldr	r1, [pc, #104]	; (8005814 <lfs_dir_compact+0x3dc>)
 80057ac:	481c      	ldr	r0, [pc, #112]	; (8005820 <lfs_dir_compact+0x3e8>)
 80057ae:	f003 ffd3 	bl	8009758 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80057b2:	f06f 031b 	mvn.w	r3, #27
 80057b6:	e01d      	b.n	80057f4 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7fd ff5e 	bl	8003680 <lfs_alloc>
 80057c4:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80057c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <lfs_dir_compact+0x3ae>
 80057cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ce:	f113 0f1c 	cmn.w	r3, #28
 80057d2:	d106      	bne.n	80057e2 <lfs_dir_compact+0x3aa>
 80057d4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <lfs_dir_compact+0x3ae>
            return err;
 80057e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e4:	e006      	b.n	80057f4 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80057ec:	e64d      	b.n	800548a <lfs_dir_compact+0x52>
        break;
 80057ee:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80057f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3768      	adds	r7, #104	; 0x68
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	080053c3 	.word	0x080053c3
 8005800:	400ffc00 	.word	0x400ffc00
 8005804:	000ffc08 	.word	0x000ffc08
 8005808:	7ffffc0c 	.word	0x7ffffc0c
 800580c:	0800a164 	.word	0x0800a164
 8005810:	0800a988 	.word	0x0800a988
 8005814:	0800a010 	.word	0x0800a010
 8005818:	0800a10c 	.word	0x0800a10c
 800581c:	0800a18c 	.word	0x0800a18c
 8005820:	0800a1b0 	.word	0x0800a1b0

08005824 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b097      	sub	sp, #92	; 0x5c
 8005828:	af0a      	add	r7, sp, #40	; 0x28
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8005832:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005838:	e058      	b.n	80058ec <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	b29b      	uxth	r3, r3
 8005842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005844:	b292      	uxth	r2, r2
 8005846:	4252      	negs	r2, r2
 8005848:	b292      	uxth	r2, r2
 800584a:	b212      	sxth	r2, r2
 800584c:	f107 0118 	add.w	r1, r7, #24
 8005850:	9108      	str	r1, [sp, #32]
 8005852:	4979      	ldr	r1, [pc, #484]	; (8005a38 <lfs_dir_splittingcompact+0x214>)
 8005854:	9107      	str	r1, [sp, #28]
 8005856:	9206      	str	r2, [sp, #24]
 8005858:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800585c:	9205      	str	r2, [sp, #20]
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	2300      	movs	r3, #0
 8005862:	9303      	str	r3, [sp, #12]
 8005864:	4b75      	ldr	r3, [pc, #468]	; (8005a3c <lfs_dir_splittingcompact+0x218>)
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	2200      	movs	r2, #0
 8005876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7fe f9ed 	bl	8003c58 <lfs_dir_traverse>
 800587e:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <lfs_dir_splittingcompact+0x66>
                return err;
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	e0d1      	b.n	8005a2e <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 800588a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2bfe      	cmp	r3, #254	; 0xfe
 8005894:	d822      	bhi.n	80058dc <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	e003      	b.n	80058bc <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b8:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80058ba:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80058c0:	6992      	ldr	r2, [r2, #24]
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fc ff9a 	bl	80027fe <lfs_alignup>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4619      	mov	r1, r3
 80058ce:	4620      	mov	r0, r4
 80058d0:	f7fc ff70 	bl	80027b4 <lfs_min>
 80058d4:	4602      	mov	r2, r0
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d20e      	bcs.n	80058fa <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80058dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e8:	4413      	add	r3, r2
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80058ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d8a0      	bhi.n	800583a <lfs_dir_splittingcompact+0x16>
 80058f8:	e000      	b.n	80058fc <lfs_dir_splittingcompact+0xd8>
                break;
 80058fa:	bf00      	nop
        }

        if (split == begin) {
 80058fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005902:	429a      	cmp	r2, r3
 8005904:	d02d      	beq.n	8005962 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	b29b      	uxth	r3, r3
 800590a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800590e:	9202      	str	r2, [sp, #8]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fce6 	bl	80052ee <lfs_dir_split>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <lfs_dir_splittingcompact+0x112>
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	f113 0f1c 	cmn.w	r3, #28
 8005930:	d001      	beq.n	8005936 <lfs_dir_splittingcompact+0x112>
            return err;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	e07b      	b.n	8005a2e <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00e      	beq.n	800595a <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	493e      	ldr	r1, [pc, #248]	; (8005a40 <lfs_dir_splittingcompact+0x21c>)
 8005946:	9101      	str	r1, [sp, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8005950:	493c      	ldr	r1, [pc, #240]	; (8005a44 <lfs_dir_splittingcompact+0x220>)
 8005952:	483d      	ldr	r0, [pc, #244]	; (8005a48 <lfs_dir_splittingcompact+0x224>)
 8005954:	f003 ff00 	bl	8009758 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8005958:	e004      	b.n	8005964 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8005960:	e767      	b.n	8005832 <lfs_dir_splittingcompact+0xe>
            break;
 8005962:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fd40 	bl	80053ec <lfs_dir_needsrelocation>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04e      	beq.n	8005a10 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	613a      	str	r2, [r7, #16]
 8005978:	2201      	movs	r2, #1
 800597a:	617a      	str	r2, [r7, #20]
 800597c:	f107 0210 	add.w	r2, r7, #16
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd fb46 	bl	8003014 <lfs_pair_cmp>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d140      	bne.n	8005a10 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f003 f916 	bl	8008bc0 <lfs_fs_rawsize>
 8005994:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da01      	bge.n	80059a0 <lfs_dir_splittingcompact+0x17c>
            return size;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e046      	b.n	8005a2e <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	085a      	lsrs	r2, r3, #1
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d930      	bls.n	8005a10 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <lfs_dir_splittingcompact+0x21c>)
 80059b4:	9200      	str	r2, [sp, #0]
 80059b6:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80059ba:	4922      	ldr	r1, [pc, #136]	; (8005a44 <lfs_dir_splittingcompact+0x220>)
 80059bc:	4823      	ldr	r0, [pc, #140]	; (8005a4c <lfs_dir_splittingcompact+0x228>)
 80059be:	f003 fecb 	bl	8009758 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80059c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059c6:	9302      	str	r3, [sp, #8]
 80059c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fc88 	bl	80052ee <lfs_dir_split>
 80059de:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <lfs_dir_splittingcompact+0x1ce>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f113 0f1c 	cmn.w	r3, #28
 80059ec:	d001      	beq.n	80059f2 <lfs_dir_splittingcompact+0x1ce>
                return err;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	e01d      	b.n	8005a2e <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <lfs_dir_splittingcompact+0x21c>)
 80059fa:	f240 72c7 	movw	r2, #1991	; 0x7c7
 80059fe:	4911      	ldr	r1, [pc, #68]	; (8005a44 <lfs_dir_splittingcompact+0x220>)
 8005a00:	4813      	ldr	r0, [pc, #76]	; (8005a50 <lfs_dir_splittingcompact+0x22c>)
 8005a02:	f003 fea9 	bl	8009758 <iprintf>
 8005a06:	e003      	b.n	8005a10 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8005a08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8005a10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fd06 	bl	8005438 <lfs_dir_compact>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3734      	adds	r7, #52	; 0x34
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	08005397 	.word	0x08005397
 8005a3c:	400ffc00 	.word	0x400ffc00
 8005a40:	0800a10c 	.word	0x0800a10c
 8005a44:	0800a010 	.word	0x0800a010
 8005a48:	0800a1e8 	.word	0x0800a1e8
 8005a4c:	0800a218 	.word	0x0800a218
 8005a50:	0800a248 	.word	0x0800a248

08005a54 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b0a6      	sub	sp, #152	; 0x98
 8005a58:	af0a      	add	r7, sp, #40	; 0x28
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
    int state = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a70:	e06d      	b.n	8005b4e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fd fb85 	bl	800318c <lfs_tag_type3>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	f240 4301 	movw	r3, #1025	; 0x401
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d106      	bne.n	8005a9c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	8a9b      	ldrh	r3, [r3, #20]
 8005a92:	3301      	adds	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	829a      	strh	r2, [r3, #20]
 8005a9a:	e055      	b.n	8005b48 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fb70 	bl	800318c <lfs_tag_type3>
 8005aac:	4603      	mov	r3, r0
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d114      	bne.n	8005ae2 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	8a9b      	ldrh	r3, [r3, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <lfs_dir_relocatingcommit+0x7a>
 8005ac0:	4ba4      	ldr	r3, [pc, #656]	; (8005d54 <lfs_dir_relocatingcommit+0x300>)
 8005ac2:	4aa5      	ldr	r2, [pc, #660]	; (8005d58 <lfs_dir_relocatingcommit+0x304>)
 8005ac4:	f240 71df 	movw	r1, #2015	; 0x7df
 8005ac8:	48a4      	ldr	r0, [pc, #656]	; (8005d5c <lfs_dir_relocatingcommit+0x308>)
 8005aca:	f003 f9e7 	bl	8008e9c <__assert_func>
            dir->count -= 1;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	8a9b      	ldrh	r3, [r3, #20]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005ae0:	e032      	b.n	8005b48 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fd fb3d 	bl	800316c <lfs_tag_type1>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005af8:	d126      	bne.n	8005b48 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	4413      	add	r3, r2
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	4413      	add	r3, r2
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fd fb41 	bl	80031ac <lfs_tag_chunk>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf14      	ite	ne
 8005b34:	2301      	movne	r3, #1
 8005b36:	2300      	moveq	r3, #0
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3318      	adds	r3, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fd fabd 	bl	80030c2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8005b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b54:	429a      	cmp	r2, r3
 8005b56:	db8c      	blt.n	8005a72 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8005b58:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02b      	beq.n	8005bb8 <lfs_dir_relocatingcommit+0x164>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	8a9b      	ldrh	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d127      	bne.n	8005bb8 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8005b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <lfs_dir_relocatingcommit+0x12a>
 8005b70:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <lfs_dir_relocatingcommit+0x30c>)
 8005b72:	4a79      	ldr	r2, [pc, #484]	; (8005d58 <lfs_dir_relocatingcommit+0x304>)
 8005b74:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8005b78:	4878      	ldr	r0, [pc, #480]	; (8005d5c <lfs_dir_relocatingcommit+0x308>)
 8005b7a:	f003 f98f 	bl	8008e9c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005b84:	4619      	mov	r1, r3
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f002 fc8e 	bl	80084a8 <lfs_fs_pred>
 8005b8c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <lfs_dir_relocatingcommit+0x14c>
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	f113 0f02 	cmn.w	r3, #2
 8005b9a:	d001      	beq.n	8005ba0 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9e:	e203      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba2:	f113 0f02 	cmn.w	r3, #2
 8005ba6:	d007      	beq.n	8005bb8 <lfs_dir_relocatingcommit+0x164>
 8005ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bac:	7ddb      	ldrb	r3, [r3, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005bb6:	e121      	b.n	8005dfc <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	7d9b      	ldrb	r3, [r3, #22]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80fb 	beq.w	8005db8 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <lfs_dir_relocatingcommit+0x1a0>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf0:	3b08      	subs	r3, #8
 8005bf2:	e003      	b.n	8005bfc <lfs_dir_relocatingcommit+0x1a8>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3318      	adds	r3, #24
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fa77 	bl	80030f6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1e:	9308      	str	r3, [sp, #32]
 8005c20:	4b50      	ldr	r3, [pc, #320]	; (8005d64 <lfs_dir_relocatingcommit+0x310>)
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9306      	str	r3, [sp, #24]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	460b      	mov	r3, r1
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7fe f806 	bl	8003c58 <lfs_dir_traverse>
 8005c4c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3318      	adds	r3, #24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd fa35 	bl	80030c2 <lfs_pair_fromle32>
        if (err) {
 8005c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c60:	f113 0f1c 	cmn.w	r3, #28
 8005c64:	f000 80aa 	beq.w	8005dbc <lfs_dir_relocatingcommit+0x368>
 8005c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c6e:	f000 80a5 	beq.w	8005dbc <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c74:	e198      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005c76:	f107 031c 	add.w	r3, r7, #28
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c88:	f107 031c 	add.w	r3, r7, #28
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fd fad7 	bl	8003242 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005c9a:	f107 031c 	add.w	r3, r7, #28
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd face 	bl	8003242 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005cac:	f107 031c 	add.w	r3, r7, #28
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fd fac5 	bl	8003242 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005cc4:	f107 031c 	add.w	r3, r7, #28
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fd fadf 	bl	800328c <lfs_gstate_iszero>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d027      	beq.n	8005d2a <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005cda:	f107 031c 	add.w	r3, r7, #28
 8005cde:	461a      	mov	r2, r3
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7fe ff22 	bl	8004b2c <lfs_dir_getgstate>
 8005ce8:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf2:	e159      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005cf4:	f107 031c 	add.w	r3, r7, #28
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd fb59 	bl	80033b0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005cfe:	f107 031c 	add.w	r3, r7, #28
 8005d02:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <lfs_dir_relocatingcommit+0x314>)
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff f8bb 	bl	8004e84 <lfs_dir_commitattr>
 8005d0e:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d18:	f113 0f1c 	cmn.w	r3, #28
 8005d1c:	d050      	beq.n	8005dc0 <lfs_dir_relocatingcommit+0x36c>
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d24:	d04c      	beq.n	8005dc0 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d28:	e13e      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff f927 	bl	8004f84 <lfs_dir_commitcrc>
 8005d36:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d40:	f113 0f1c 	cmn.w	r3, #28
 8005d44:	d03e      	beq.n	8005dc4 <lfs_dir_relocatingcommit+0x370>
 8005d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d4c:	d03a      	beq.n	8005dc4 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	e12a      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
 8005d52:	bf00      	nop
 8005d54:	0800a274 	.word	0x0800a274
 8005d58:	0800a998 	.word	0x0800a998
 8005d5c:	0800a010 	.word	0x0800a010
 8005d60:	0800a284 	.word	0x0800a284
 8005d64:	080053c3 	.word	0x080053c3
 8005d68:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d72:	6992      	ldr	r2, [r2, #24]
 8005d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d78:	fb01 f202 	mul.w	r2, r1, r2
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d006      	beq.n	8005d90 <lfs_dir_relocatingcommit+0x33c>
 8005d82:	4b8b      	ldr	r3, [pc, #556]	; (8005fb0 <lfs_dir_relocatingcommit+0x55c>)
 8005d84:	4a8b      	ldr	r2, [pc, #556]	; (8005fb4 <lfs_dir_relocatingcommit+0x560>)
 8005d86:	f640 0136 	movw	r1, #2102	; 0x836
 8005d8a:	488b      	ldr	r0, [pc, #556]	; (8005fb8 <lfs_dir_relocatingcommit+0x564>)
 8005d8c:	f003 f886 	bl	8008e9c <__assert_func>
        dir->off = commit.off;
 8005d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	333c      	adds	r3, #60	; 0x3c
 8005da2:	3230      	adds	r2, #48	; 0x30
 8005da4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005da6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3348      	adds	r3, #72	; 0x48
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	609a      	str	r2, [r3, #8]
 8005db6:	e021      	b.n	8005dfc <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005db8:	bf00      	nop
 8005dba:	e004      	b.n	8005dc6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005dbc:	bf00      	nop
 8005dbe:	e002      	b.n	8005dc6 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005dc4:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3310      	adds	r3, #16
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7fc fda7 	bl	8002920 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	8a9b      	ldrh	r3, [r3, #20]
 8005dd6:	9302      	str	r3, [sp, #8]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff fd1b 	bl	8005824 <lfs_dir_splittingcompact>
 8005dee:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da01      	bge.n	8005dfa <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	e0d6      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005dfa:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e0e:	e0c6      	b.n	8005f9e <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e12:	3308      	adds	r3, #8
 8005e14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd f8fa 	bl	8003014 <lfs_pair_cmp>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 80b8 	bne.w	8005f98 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	f103 0408 	add.w	r4, r3, #8
 8005e30:	4615      	mov	r5, r2
 8005e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e40:	3308      	adds	r3, #8
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f000 809d 	beq.w	8005f84 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e4e:	e07b      	b.n	8005f48 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd f996 	bl	800318c <lfs_tag_type3>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d115      	bne.n	8005e98 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6e:	889c      	ldrh	r4, [r3, #4]
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	4413      	add	r3, r2
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fd f9b0 	bl	80031e0 <lfs_tag_id>
 8005e80:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e82:	429c      	cmp	r4, r3
 8005e84:	d108      	bne.n	8005e98 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	e054      	b.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd f972 	bl	800318c <lfs_tag_type3>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d11c      	bne.n	8005eee <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eb6:	889c      	ldrh	r4, [r3, #4]
 8005eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd f98c 	bl	80031e0 <lfs_tag_id>
 8005ec8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d90f      	bls.n	8005eee <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8005ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed0:	889b      	ldrh	r3, [r3, #4]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	799b      	ldrb	r3, [r3, #6]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d12f      	bne.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8005eec:	e029      	b.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd f947 	bl	800318c <lfs_tag_type3>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	f240 4301 	movw	r3, #1025	; 0x401
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d11b      	bne.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f0c:	889c      	ldrh	r4, [r3, #4]
 8005f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fd f961 	bl	80031e0 <lfs_tag_id>
 8005f1e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005f20:	429c      	cmp	r4, r3
 8005f22:	d30e      	bcc.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8005f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f26:	889b      	ldrh	r3, [r3, #4]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f32:	799b      	ldrb	r3, [r3, #6]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d104      	bne.n	8005f42 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8005f38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f40:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8005f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f44:	3301      	adds	r3, #1
 8005f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	f6ff af7e 	blt.w	8005e50 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8005f54:	e016      	b.n	8005f84 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8005f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f58:	889a      	ldrh	r2, [r3, #4]
 8005f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f5c:	8b9b      	ldrh	r3, [r3, #28]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f64:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	f103 0108 	add.w	r1, r3, #8
 8005f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6e:	3320      	adds	r3, #32
 8005f70:	461a      	mov	r2, r3
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7fe fdbe 	bl	8004af4 <lfs_dir_fetch>
 8005f78:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8005f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8005f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f82:	e011      	b.n	8005fa8 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8005f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f86:	889a      	ldrh	r2, [r3, #4]
 8005f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f8a:	8b9b      	ldrh	r3, [r3, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d303      	bcc.n	8005f98 <lfs_dir_relocatingcommit+0x544>
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	7fdb      	ldrb	r3, [r3, #31]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1de      	bne.n	8005f56 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f af35 	bne.w	8005e10 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8005fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3770      	adds	r7, #112	; 0x70
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb0:	0800a164 	.word	0x0800a164
 8005fb4:	0800a998 	.word	0x0800a998
 8005fb8:	0800a010 	.word	0x0800a010

08005fbc <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005fbc:	b5b0      	push	{r4, r5, r7, lr}
 8005fbe:	b0bc      	sub	sp, #240	; 0xf0
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fd2:	e045      	b.n	8006060 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd8:	3308      	adds	r3, #8
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d03a      	beq.n	8006056 <lfs_dir_orphaningcommit+0x9a>
 8005fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd f812 	bl	8003014 <lfs_pair_cmp>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12f      	bne.n	8006056 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d12a      	bne.n	8006056 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8006000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d023      	beq.n	8006056 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800600e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800601a:	429a      	cmp	r2, r3
 800601c:	d91b      	bls.n	8006056 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800601e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 fff0 	bl	8007008 <lfs_file_outline>
 8006028:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800602c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8006034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006038:	e2ad      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800603a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f001 f804 	bl	800704c <lfs_file_flush>
 8006044:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8006048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8006050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006054:	e29f      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1b5      	bne.n	8005fd4 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800607e:	461d      	mov	r5, r3
 8006080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006084:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8006092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fcd8 	bl	8005a54 <lfs_dir_relocatingcommit>
 80060a4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80060a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da02      	bge.n	80060b6 <lfs_dir_orphaningcommit+0xfa>
        return state;
 80060b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b4:	e26f      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc ffa8 	bl	8003014 <lfs_pair_cmp>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	461d      	mov	r5, r3
 80060ce:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80060d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80060da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80060de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d14a      	bne.n	800617c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3348      	adds	r3, #72	; 0x48
 80060ea:	461a      	mov	r2, r3
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7fe fd1c 	bl	8004b2c <lfs_dir_getgstate>
 80060f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80060f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8006100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006104:	e247      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 800610c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3318      	adds	r3, #24
 8006116:	4618      	mov	r0, r3
 8006118:	f7fc ffed 	bl	80030f6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	7ddb      	ldrb	r3, [r3, #23]
 8006120:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006124:	051a      	lsls	r2, r3, #20
 8006126:	4bc2      	ldr	r3, [pc, #776]	; (8006430 <lfs_dir_orphaningcommit+0x474>)
 8006128:	4313      	orrs	r3, r2
 800612a:	667b      	str	r3, [r7, #100]	; 0x64
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3318      	adds	r3, #24
 8006130:	66bb      	str	r3, [r7, #104]	; 0x68
 8006132:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006136:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800613a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800613e:	2000      	movs	r0, #0
 8006140:	9001      	str	r0, [sp, #4]
 8006142:	2001      	movs	r0, #1
 8006144:	9000      	str	r0, [sp, #0]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fc84 	bl	8005a54 <lfs_dir_relocatingcommit>
 800614c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7fc ffb4 	bl	80030c2 <lfs_pair_fromle32>
        if (state < 0) {
 800615a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615e:	2b00      	cmp	r3, #0
 8006160:	da02      	bge.n	8006168 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8006162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006166:	e216      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8006168:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800616c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006174:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800617c:	2300      	movs	r3, #0
 800617e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8006182:	e1fc      	b.n	800657e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8006184:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800618c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006190:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006194:	4ca7      	ldr	r4, [pc, #668]	; (8006434 <lfs_dir_orphaningcommit+0x478>)
 8006196:	9403      	str	r4, [sp, #12]
 8006198:	9102      	str	r1, [sp, #8]
 800619a:	9201      	str	r2, [sp, #4]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4603      	mov	r3, r0
 80061a0:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 80061a4:	49a4      	ldr	r1, [pc, #656]	; (8006438 <lfs_dir_orphaningcommit+0x47c>)
 80061a6:	48a5      	ldr	r0, [pc, #660]	; (800643c <lfs_dir_orphaningcommit+0x480>)
 80061a8:	f003 fad6 	bl	8009758 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f103 0220 	add.w	r2, r3, #32
 80061b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fc ff28 	bl	8003014 <lfs_pair_cmp>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80061ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80061d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061e2:	e037      	b.n	8006254 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80061e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061e8:	f103 0208 	add.w	r2, r3, #8
 80061ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fc ff0e 	bl	8003014 <lfs_pair_cmp>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80061fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006202:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006206:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8006208:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800620c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006210:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8006212:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006216:	799b      	ldrb	r3, [r3, #6]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d116      	bne.n	800624a <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800621c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006220:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006224:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f7fc fef2 	bl	8003014 <lfs_pair_cmp>
 8006230:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8006236:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800623a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800623e:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8006240:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006244:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800624a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1c3      	bne.n	80061e4 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800625c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006260:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006264:	4619      	mov	r1, r3
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f002 f9a6 	bl	80085b8 <lfs_fs_parent>
 800626c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006274:	2b00      	cmp	r3, #0
 8006276:	da07      	bge.n	8006288 <lfs_dir_orphaningcommit+0x2cc>
 8006278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800627c:	f113 0f02 	cmn.w	r3, #2
 8006280:	d002      	beq.n	8006288 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8006282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006286:	e186      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8006288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800628c:	f113 0f02 	cmn.w	r3, #2
 8006290:	bf14      	ite	ne
 8006292:	2301      	movne	r3, #1
 8006294:	2300      	moveq	r3, #0
 8006296:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800629a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800629e:	f113 0f02 	cmn.w	r3, #2
 80062a2:	f000 809e 	beq.w	80063e2 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80062a6:	2101      	movs	r1, #1
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f002 f9db 	bl	8008664 <lfs_fs_preporphans>
 80062ae:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80062b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <lfs_dir_orphaningcommit+0x304>
                return err;
 80062ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062be:	e16a      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80062c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80062c4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fd f82c 	bl	8003330 <lfs_gstate_hasmovehere>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d02d      	beq.n	800633a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fc ff7c 	bl	80031e0 <lfs_tag_id>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80062ee:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80062f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062f2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80062f6:	484f      	ldr	r0, [pc, #316]	; (8006434 <lfs_dir_orphaningcommit+0x478>)
 80062f8:	9002      	str	r0, [sp, #8]
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	460b      	mov	r3, r1
 8006300:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8006304:	494c      	ldr	r1, [pc, #304]	; (8006438 <lfs_dir_orphaningcommit+0x47c>)
 8006306:	484e      	ldr	r0, [pc, #312]	; (8006440 <lfs_dir_orphaningcommit+0x484>)
 8006308:	f003 fa26 	bl	8009758 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800630c:	2200      	movs	r2, #0
 800630e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f002 f9e0 	bl	80086d8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8006318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800631c:	4618      	mov	r0, r3
 800631e:	f7fc ff5f 	bl	80031e0 <lfs_tag_id>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800632a:	4293      	cmp	r3, r2
 800632c:	d205      	bcs.n	800633a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800632e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006332:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006336:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	657b      	str	r3, [r7, #84]	; 0x54
 800633e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006340:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8006342:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006346:	4618      	mov	r0, r3
 8006348:	f7fc fed5 	bl	80030f6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800634c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006350:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <lfs_dir_orphaningcommit+0x3ac>
 8006358:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006362:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006366:	e000      	b.n	800636a <lfs_dir_orphaningcommit+0x3ae>
 8006368:	2300      	movs	r3, #0
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	2300      	movs	r3, #0
 800636e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006376:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800637a:	653b      	str	r3, [r7, #80]	; 0x50
 800637c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006380:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006384:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006388:	2000      	movs	r0, #0
 800638a:	9001      	str	r0, [sp, #4]
 800638c:	2002      	movs	r0, #2
 800638e:	9000      	str	r0, [sp, #0]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fb5f 	bl	8005a54 <lfs_dir_relocatingcommit>
 8006396:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800639a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fe8f 	bl	80030c2 <lfs_pair_fromle32>
            if (state < 0) {
 80063a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da02      	bge.n	80063b2 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80063ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b0:	e0f1      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80063b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d113      	bne.n	80063e2 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80063ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80063c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80063c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80063ca:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80063ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80063e0:	e0cd      	b.n	800657e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80063e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80063e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80063ea:	4619      	mov	r1, r3
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f002 f85b 	bl	80084a8 <lfs_fs_pred>
 80063f2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80063f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <lfs_dir_orphaningcommit+0x452>
 80063fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006402:	f113 0f02 	cmn.w	r3, #2
 8006406:	d002      	beq.n	800640e <lfs_dir_orphaningcommit+0x452>
            return err;
 8006408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800640c:	e0c3      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800640e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01a      	beq.n	800644c <lfs_dir_orphaningcommit+0x490>
 8006416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800641a:	f113 0f02 	cmn.w	r3, #2
 800641e:	d115      	bne.n	800644c <lfs_dir_orphaningcommit+0x490>
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <lfs_dir_orphaningcommit+0x488>)
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <lfs_dir_orphaningcommit+0x48c>)
 8006424:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8006428:	4803      	ldr	r0, [pc, #12]	; (8006438 <lfs_dir_orphaningcommit+0x47c>)
 800642a:	f002 fd37 	bl	8008e9c <__assert_func>
 800642e:	bf00      	nop
 8006430:	000ffc08 	.word	0x000ffc08
 8006434:	0800a10c 	.word	0x0800a10c
 8006438:	0800a010 	.word	0x0800a010
 800643c:	0800a28c 	.word	0x0800a28c
 8006440:	0800a2c8 	.word	0x0800a2c8
 8006444:	0800a30c 	.word	0x0800a30c
 8006448:	0800a9b4 	.word	0x0800a9b4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800644c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006450:	f113 0f02 	cmn.w	r3, #2
 8006454:	f000 8093 	beq.w	800657e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3330      	adds	r3, #48	; 0x30
 800645c:	4618      	mov	r0, r3
 800645e:	f7fc ff32 	bl	80032c6 <lfs_gstate_hasorphans>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d011      	beq.n	800648c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8006468:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800646c:	425b      	negs	r3, r3
 800646e:	b2db      	uxtb	r3, r3
 8006470:	b25b      	sxtb	r3, r3
 8006472:	4619      	mov	r1, r3
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f002 f8f5 	bl	8008664 <lfs_fs_preporphans>
 800647a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8006486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648a:	e084      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800648c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006490:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3330      	adds	r3, #48	; 0x30
 8006498:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fc ff46 	bl	8003330 <lfs_gstate_hasmovehere>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01c      	beq.n	80064e4 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc fe96 	bl	80031e0 <lfs_tag_id>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80064ba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80064bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064be:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80064c2:	4837      	ldr	r0, [pc, #220]	; (80065a0 <lfs_dir_orphaningcommit+0x5e4>)
 80064c4:	9002      	str	r0, [sp, #8]
 80064c6:	9201      	str	r2, [sp, #4]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	460b      	mov	r3, r1
 80064cc:	f640 1221 	movw	r2, #2337	; 0x921
 80064d0:	4934      	ldr	r1, [pc, #208]	; (80065a4 <lfs_dir_orphaningcommit+0x5e8>)
 80064d2:	4835      	ldr	r0, [pc, #212]	; (80065a8 <lfs_dir_orphaningcommit+0x5ec>)
 80064d4:	f003 f940 	bl	8009758 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80064d8:	2200      	movs	r2, #0
 80064da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f002 f8fa 	bl	80086d8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80064e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80064f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fc fdfe 	bl	80030f6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80064fa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80064fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <lfs_dir_orphaningcommit+0x55a>
 8006506:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006510:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006514:	e000      	b.n	8006518 <lfs_dir_orphaningcommit+0x55c>
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
 800651a:	2300      	movs	r3, #0
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
 800651e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006522:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006526:	051a      	lsls	r2, r3, #20
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <lfs_dir_orphaningcommit+0x5f0>)
 800652a:	4313      	orrs	r3, r2
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006532:	633b      	str	r3, [r7, #48]	; 0x30
 8006534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006538:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800653c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006540:	2000      	movs	r0, #0
 8006542:	9001      	str	r0, [sp, #4]
 8006544:	2002      	movs	r0, #2
 8006546:	9000      	str	r0, [sp, #0]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fa83 	bl	8005a54 <lfs_dir_relocatingcommit>
 800654e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8006552:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006556:	4618      	mov	r0, r3
 8006558:	f7fc fdb3 	bl	80030c2 <lfs_pair_fromle32>
            if (state < 0) {
 800655c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006560:	2b00      	cmp	r3, #0
 8006562:	da02      	bge.n	800656a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8006564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006568:	e015      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800656a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800656e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006576:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800657a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800657e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006582:	2b01      	cmp	r3, #1
 8006584:	f43f adfe 	beq.w	8006184 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8006588:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <lfs_dir_orphaningcommit+0x5d8>
 8006590:	2303      	movs	r3, #3
 8006592:	e000      	b.n	8006596 <lfs_dir_orphaningcommit+0x5da>
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	37e0      	adds	r7, #224	; 0xe0
 800659a:	46bd      	mov	sp, r7
 800659c:	bdb0      	pop	{r4, r5, r7, pc}
 800659e:	bf00      	nop
 80065a0:	0800a10c 	.word	0x0800a10c
 80065a4:	0800a010 	.word	0x0800a010
 80065a8:	0800a2c8 	.word	0x0800a2c8
 80065ac:	000ffc08 	.word	0x000ffc08

080065b0 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff fcf9 	bl	8005fbc <lfs_dir_orphaningcommit>
 80065ca:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da01      	bge.n	80065d6 <lfs_dir_commit+0x26>
        return orphans;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	e00d      	b.n	80065f2 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80065dc:	2100      	movs	r1, #0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f002 f91a 	bl	8008818 <lfs_fs_deorphan>
 80065e4:	6138      	str	r0, [r7, #16]
        if (err) {
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <lfs_dir_commit+0x40>
            return err;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e000      	b.n	80065f2 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80065fa:	b590      	push	{r4, r7, lr}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	3b08      	subs	r3, #8
 8006612:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <lfs_ctz_index+0x2e>
        return 0;
 8006624:	2300      	movs	r3, #0
 8006626:	e01c      	b.n	8006662 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3b01      	subs	r3, #1
 800662c:	4618      	mov	r0, r3
 800662e:	f7fc f917 	bl	8002860 <lfs_popc>
 8006632:	4603      	mov	r3, r0
 8006634:	3302      	adds	r3, #2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006642:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	1ad4      	subs	r4, r2, r3
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7fc f905 	bl	8002860 <lfs_popc>
 8006656:	4603      	mov	r3, r0
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	1ae2      	subs	r2, r4, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	601a      	str	r2, [r3, #0]
    return i;
 8006660:	68fb      	ldr	r3, [r7, #12]
}
 8006662:	4618      	mov	r0, r3
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}

0800666a <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800666a:	b590      	push	{r4, r7, lr}
 800666c:	b08f      	sub	sp, #60	; 0x3c
 800666e:	af04      	add	r7, sp, #16
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d108      	bne.n	8006690 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800667e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	601a      	str	r2, [r3, #0]
        *off = 0;
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
        return 0;
 800668c:	2300      	movs	r3, #0
 800668e:	e053      	b.n	8006738 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	3b01      	subs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4619      	mov	r1, r3
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff ffac 	bl	80065fa <lfs_ctz_index>
 80066a2:	4603      	mov	r3, r0
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80066a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff ffa4 	bl	80065fa <lfs_ctz_index>
 80066b2:	4603      	mov	r3, r0
 80066b4:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80066b6:	e034      	b.n	8006722 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	3301      	adds	r3, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fc f8ae 	bl	8002822 <lfs_npw2>
 80066c6:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80066c8:	1e5c      	subs	r4, r3, #1
 80066ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066cc:	f7fc f8b9 	bl	8002842 <lfs_ctz>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4619      	mov	r1, r3
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7fc f86d 	bl	80027b4 <lfs_min>
 80066da:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	0092      	lsls	r2, r2, #2
 80066e2:	2104      	movs	r1, #4
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	4639      	mov	r1, r7
 80066e8:	9102      	str	r1, [sp, #8]
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2304      	movs	r3, #4
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7fc f939 	bl	800296c <lfs_bd_read>
 80066fa:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fc f8c8 	bl	8002894 <lfs_fromle32>
 8006704:	4603      	mov	r3, r0
 8006706:	603b      	str	r3, [r7, #0]
        if (err) {
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <lfs_ctz_find+0xa8>
            return err;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	e012      	b.n	8006738 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8006712:	2201      	movs	r2, #1
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	461a      	mov	r2, r3
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	429a      	cmp	r2, r3
 8006728:	d8c6      	bhi.n	80066b8 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
    *off = pos;
 8006730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	601a      	str	r2, [r3, #0]
    return 0;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	372c      	adds	r7, #44	; 0x2c
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}

08006740 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b092      	sub	sp, #72	; 0x48
 8006744:	af04      	add	r7, sp, #16
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800674e:	f107 0320 	add.w	r3, r7, #32
 8006752:	4619      	mov	r1, r3
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7fc ff93 	bl	8003680 <lfs_alloc>
 800675a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <lfs_ctz_extend+0x26>
            return err;
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	e0e9      	b.n	800693a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	4619      	mov	r1, r3
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7fc fbf0 	bl	8002f50 <lfs_bd_erase>
 8006770:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800677e:	f000 80cb 	beq.w	8006918 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	e0d9      	b.n	800693a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8006786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006790:	601a      	str	r2, [r3, #0]
                *off = 0;
 8006792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
                return 0;
 8006798:	2300      	movs	r3, #0
 800679a:	e0ce      	b.n	800693a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	3b01      	subs	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80067a2:	f107 031c 	add.w	r3, r7, #28
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ff26 	bl	80065fa <lfs_ctz_index>
 80067ae:	4603      	mov	r3, r0
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d044      	beq.n	800684e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80067c4:	2300      	movs	r3, #0
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	e035      	b.n	8006836 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	2301      	movs	r3, #1
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	f107 0317 	add.w	r3, r7, #23
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	2100      	movs	r1, #0
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7fc f8bf 	bl	800296c <lfs_bd_read>
 80067ee:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <lfs_ctz_extend+0xba>
                        return err;
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	e09f      	b.n	800693a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	2201      	movs	r2, #1
 80067fe:	9203      	str	r2, [sp, #12]
 8006800:	f107 0217 	add.w	r2, r7, #23
 8006804:	9202      	str	r2, [sp, #8]
 8006806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006808:	9201      	str	r2, [sp, #4]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2301      	movs	r3, #1
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7fc faf0 	bl	8002df8 <lfs_bd_prog>
 8006818:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006826:	d101      	bne.n	800682c <lfs_ctz_extend+0xec>
                            goto relocate;
 8006828:	bf00      	nop
                    goto relocate;
 800682a:	e075      	b.n	8006918 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800682e:	e084      	b.n	800693a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	3301      	adds	r3, #1
 8006834:	637b      	str	r3, [r7, #52]	; 0x34
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683a:	429a      	cmp	r2, r3
 800683c:	d3c5      	bcc.n	80067ca <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006842:	601a      	str	r2, [r3, #0]
                *off = noff;
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006848:	601a      	str	r2, [r3, #0]
                return 0;
 800684a:	2300      	movs	r3, #0
 800684c:	e075      	b.n	800693a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	3301      	adds	r3, #1
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8006854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006856:	f7fb fff4 	bl	8002842 <lfs_ctz>
 800685a:	4603      	mov	r3, r0
 800685c:	3301      	adds	r3, #1
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8006864:	2300      	movs	r3, #0
 8006866:	633b      	str	r3, [r7, #48]	; 0x30
 8006868:	e049      	b.n	80068fe <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4618      	mov	r0, r3
 800686e:	f7fc f81c 	bl	80028aa <lfs_tole32>
 8006872:	4603      	mov	r3, r0
 8006874:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	0092      	lsls	r2, r2, #2
 800687c:	2104      	movs	r1, #4
 800687e:	9103      	str	r1, [sp, #12]
 8006880:	f107 0118 	add.w	r1, r7, #24
 8006884:	9102      	str	r1, [sp, #8]
 8006886:	9201      	str	r2, [sp, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	2301      	movs	r3, #1
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fc fab1 	bl	8002df8 <lfs_bd_prog>
 8006896:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb fffa 	bl	8002894 <lfs_fromle32>
 80068a0:	4603      	mov	r3, r0
 80068a2:	61bb      	str	r3, [r7, #24]
                if (err) {
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80068b0:	d034      	beq.n	800691c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	e041      	b.n	800693a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	3b01      	subs	r3, #1
 80068ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068bc:	429a      	cmp	r2, r3
 80068be:	d01b      	beq.n	80068f8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	2104      	movs	r1, #4
 80068c8:	9103      	str	r1, [sp, #12]
 80068ca:	f107 0118 	add.w	r1, r7, #24
 80068ce:	9102      	str	r1, [sp, #8]
 80068d0:	9201      	str	r2, [sp, #4]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	2304      	movs	r3, #4
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	2100      	movs	r1, #0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7fc f846 	bl	800296c <lfs_bd_read>
 80068e0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fb ffd5 	bl	8002894 <lfs_fromle32>
 80068ea:	4603      	mov	r3, r0
 80068ec:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <lfs_ctz_extend+0x1b8>
                        return err;
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	e020      	b.n	800693a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	3301      	adds	r3, #1
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
 80068fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	429a      	cmp	r2, r3
 8006904:	d3b1      	bcc.n	800686a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	009a      	lsls	r2, r3, #2
 8006910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006912:	601a      	str	r2, [r3, #0]
            return 0;
 8006914:	2300      	movs	r3, #0
 8006916:	e010      	b.n	800693a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <lfs_ctz_extend+0x1de>
                        goto relocate;
 800691c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	4a08      	ldr	r2, [pc, #32]	; (8006944 <lfs_ctz_extend+0x204>)
 8006922:	9200      	str	r2, [sp, #0]
 8006924:	f640 22da 	movw	r2, #2778	; 0xada
 8006928:	4907      	ldr	r1, [pc, #28]	; (8006948 <lfs_ctz_extend+0x208>)
 800692a:	4808      	ldr	r0, [pc, #32]	; (800694c <lfs_ctz_extend+0x20c>)
 800692c:	f002 ff14 	bl	8009758 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7fb fff4 	bl	8002920 <lfs_cache_drop>
    while (true) {
 8006938:	e709      	b.n	800674e <lfs_ctz_extend+0xe>
    }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3738      	adds	r7, #56	; 0x38
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	0800a10c 	.word	0x0800a10c
 8006948:	0800a010 	.word	0x0800a010
 800694c:	0800a18c 	.word	0x0800a18c

08006950 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b090      	sub	sp, #64	; 0x40
 8006954:	af04      	add	r7, sp, #16
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <lfs_ctz_traverse+0x18>
        return 0;
 8006964:	2300      	movs	r3, #0
 8006966:	e06b      	b.n	8006a40 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	3b01      	subs	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	f107 031c 	add.w	r3, r7, #28
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff fe40 	bl	80065fa <lfs_ctz_index>
 800697a:	4603      	mov	r3, r0
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006984:	4798      	blx	r3
 8006986:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <lfs_ctz_traverse+0x42>
            return err;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	e056      	b.n	8006a40 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <lfs_ctz_traverse+0x4c>
            return 0;
 8006998:	2300      	movs	r3, #0
 800699a:	e051      	b.n	8006a40 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	f1c3 0302 	rsb	r3, r3, #2
 80069a6:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80069a8:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80069aa:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80069ac:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80069ae:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	2300      	movs	r3, #0
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7fb ffd0 	bl	800296c <lfs_bd_read>
 80069cc:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fb ff5f 	bl	8002894 <lfs_fromle32>
 80069d6:	4603      	mov	r3, r0
 80069d8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fb ff59 	bl	8002894 <lfs_fromle32>
 80069e2:	4603      	mov	r3, r0
 80069e4:	61bb      	str	r3, [r7, #24]
        if (err) {
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <lfs_ctz_traverse+0xa0>
            return err;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	e027      	b.n	8006a40 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80069f0:	2300      	movs	r3, #0
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	e012      	b.n	8006a1c <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	3330      	adds	r3, #48	; 0x30
 80069fc:	443b      	add	r3, r7
 80069fe:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	4611      	mov	r1, r2
 8006a06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a08:	4798      	blx	r3
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <lfs_ctz_traverse+0xc6>
                return err;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	e014      	b.n	8006a40 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	3301      	adds	r3, #1
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a22:	429a      	cmp	r2, r3
 8006a24:	dbe7      	blt.n	80069f6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	3330      	adds	r3, #48	; 0x30
 8006a2e:	443b      	add	r3, r7
 8006a30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006a34:	603b      	str	r3, [r7, #0]
        index -= count;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8006a3e:	e79e      	b.n	800697e <lfs_ctz_traverse+0x2e>
    }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3730      	adds	r7, #48	; 0x30
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8006a48:	b5b0      	push	{r4, r5, r7, lr}
 8006a4a:	b09a      	sub	sp, #104	; 0x68
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f002 f87d 	bl	8008b60 <lfs_fs_forceconsistency>
 8006a66:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8006a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <lfs_file_rawopencfg+0x2a>
            return err;
 8006a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a70:	e1b0      	b.n	8006dd4 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f103 0108 	add.w	r1, r3, #8
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	1d3a      	adds	r2, r7, #4
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7fe f8c1 	bl	8004c24 <lfs_dir_find>
 8006aa2:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da0c      	bge.n	8006ac4 <lfs_file_rawopencfg+0x7c>
 8006aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aac:	f113 0f02 	cmn.w	r3, #2
 8006ab0:	d105      	bne.n	8006abe <lfs_file_rawopencfg+0x76>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	889b      	ldrh	r3, [r3, #4]
 8006ab6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d102      	bne.n	8006ac4 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8006abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006ac2:	e17c      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7fc fd6e 	bl	80035ae <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad4:	f113 0f02 	cmn.w	r3, #2
 8006ad8:	d14e      	bne.n	8006b78 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006ae4:	f06f 0301 	mvn.w	r3, #1
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006aea:	e168      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7f9 fb7e 	bl	80001f0 <strlen>
 8006af4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d903      	bls.n	8006b08 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8006b00:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006b04:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006b06:	e15a      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f103 0108 	add.w	r1, r3, #8
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	889b      	ldrh	r3, [r3, #4]
 8006b12:	029b      	lsls	r3, r3, #10
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1e:	2300      	movs	r3, #0
 8006b20:	633b      	str	r3, [r7, #48]	; 0x30
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	889b      	ldrh	r3, [r3, #4]
 8006b26:	029a      	lsls	r2, r3, #10
 8006b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	889b      	ldrh	r3, [r3, #4]
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b46:	2300      	movs	r3, #0
 8006b48:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006b4e:	2303      	movs	r3, #3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fd2d 	bl	80065b0 <lfs_dir_commit>
 8006b56:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5a:	f113 0f1c 	cmn.w	r3, #28
 8006b5e:	d001      	beq.n	8006b64 <lfs_file_rawopencfg+0x11c>
 8006b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b62:	e001      	b.n	8006b68 <lfs_file_rawopencfg+0x120>
 8006b64:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006b68:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8125 	bne.w	8006dbc <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8006b72:	4b9a      	ldr	r3, [pc, #616]	; (8006ddc <lfs_file_rawopencfg+0x394>)
 8006b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b76:	e044      	b.n	8006c02 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8006b82:	f06f 0310 	mvn.w	r3, #16
 8006b86:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006b88:	e119      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fc fafd 	bl	800318c <lfs_tag_type3>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d003      	beq.n	8006ba0 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8006b98:	f06f 0314 	mvn.w	r3, #20
 8006b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006b9e:	e10e      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	029b      	lsls	r3, r3, #10
 8006bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb8:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc6:	e01c      	b.n	8006c02 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	889b      	ldrh	r3, [r3, #4]
 8006bd2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006be0:	9200      	str	r2, [sp, #0]
 8006be2:	4a7f      	ldr	r2, [pc, #508]	; (8006de0 <lfs_file_rawopencfg+0x398>)
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7fc fee5 	bl	80039b4 <lfs_dir_get>
 8006bea:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da02      	bge.n	8006bf8 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006bf6:	e0e2      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	3328      	adds	r3, #40	; 0x28
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fc fbf7 	bl	80033f0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006c02:	2300      	movs	r3, #0
 8006c04:	657b      	str	r3, [r7, #84]	; 0x54
 8006c06:	e063      	b.n	8006cd0 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d03c      	beq.n	8006c8e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1e:	6859      	ldr	r1, [r3, #4]
 8006c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006c32:	051a      	lsls	r2, r3, #20
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	889b      	ldrh	r3, [r3, #4]
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	ea42 0103 	orr.w	r1, r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	6858      	ldr	r0, [r3, #4]
 8006c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4403      	add	r3, r0
 8006c50:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c52:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5a:	6859      	ldr	r1, [r3, #4]
 8006c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	4a5d      	ldr	r2, [pc, #372]	; (8006de4 <lfs_file_rawopencfg+0x39c>)
 8006c70:	4621      	mov	r1, r4
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7fc fe9e 	bl	80039b4 <lfs_dir_get>
 8006c78:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da06      	bge.n	8006c8e <lfs_file_rawopencfg+0x246>
 8006c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c82:	f113 0f02 	cmn.w	r3, #2
 8006c86:	d002      	beq.n	8006c8e <lfs_file_rawopencfg+0x246>
                err = res;
 8006c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006c8c:	e097      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006cb6:	f06f 031b 	mvn.w	r3, #27
 8006cba:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006cbc:	e07f      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ccc:	3301      	adds	r3, #1
 8006cce:	657b      	str	r3, [r7, #84]	; 0x54
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d395      	bcc.n	8006c08 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	64da      	str	r2, [r3, #76]	; 0x4c
 8006cf0:	e010      	b.n	8006d14 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fb fdfa 	bl	80028f2 <lfs_malloc>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d103      	bne.n	8006d14 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006d0c:	f06f 030b 	mvn.w	r3, #11
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006d12:	e054      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3340      	adds	r3, #64	; 0x40
 8006d18:	4619      	mov	r1, r3
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7fb fe0f 	bl	800293e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fc fa32 	bl	800318c <lfs_tag_type3>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f240 2301 	movw	r3, #513	; 0x201
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d141      	bne.n	8006db8 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f06f 0201 	mvn.w	r2, #1
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fc fa5e 	bl	8003200 <lfs_tag_size>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d020      	beq.n	8006db8 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	889b      	ldrh	r3, [r3, #4]
 8006d80:	029c      	lsls	r4, r3, #10
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d86:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fb fd12 	bl	80027b4 <lfs_min>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	4a0f      	ldr	r2, [pc, #60]	; (8006de0 <lfs_file_rawopencfg+0x398>)
 8006da2:	4629      	mov	r1, r5
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7fc fe05 	bl	80039b4 <lfs_dir_get>
 8006daa:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da02      	bge.n	8006db8 <lfs_file_rawopencfg+0x370>
                err = res;
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db4:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006db6:	e002      	b.n	8006dbe <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e00b      	b.n	8006dd4 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006dbc:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f823 	bl	8006e18 <lfs_file_rawclose>
    return err;
 8006dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3760      	adds	r7, #96	; 0x60
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bdb0      	pop	{r4, r5, r7, pc}
 8006ddc:	20100000 	.word	0x20100000
 8006de0:	700ffc00 	.word	0x700ffc00
 8006de4:	7ffffc00 	.word	0x7ffffc00

08006de8 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006df6:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <lfs_file_rawopen+0x2c>)
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fe21 	bl	8006a48 <lfs_file_rawopencfg>
 8006e06:	6178      	str	r0, [r7, #20]
    return err;
 8006e08:	697b      	ldr	r3, [r7, #20]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	0800a9cc 	.word	0x0800a9cc

08006e18 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9e5 	bl	80071f4 <lfs_file_rawsync>
 8006e2a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fc fb9b 	bl	800356a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fb fd61 	bl	800290a <lfs_free>
    }

    return err;
 8006e48:	68fb      	ldr	r3, [r7, #12]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b08d      	sub	sp, #52	; 0x34
 8006e58:	af06      	add	r7, sp, #24
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fc fc0b 	bl	8003680 <lfs_alloc>
 8006e6a:	6138      	str	r0, [r7, #16]
        if (err) {
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <lfs_file_relocate+0x22>
            return err;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	e0bb      	b.n	8006fee <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fc f868 	bl	8002f50 <lfs_bd_erase>
 8006e80:	6138      	str	r0, [r7, #16]
        if (err) {
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006e8e:	f000 809b 	beq.w	8006fc8 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	e0ab      	b.n	8006fee <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	e069      	b.n	8006f70 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d027      	beq.n	8006ef8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f103 0008 	add.w	r0, r3, #8
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	889b      	ldrh	r3, [r3, #4]
 8006ec0:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eca:	2101      	movs	r1, #1
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	f107 010b 	add.w	r1, r7, #11
 8006ed2:	9104      	str	r1, [sp, #16]
 8006ed4:	6979      	ldr	r1, [r7, #20]
 8006ed6:	9103      	str	r1, [sp, #12]
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	4b47      	ldr	r3, [pc, #284]	; (8006ff8 <lfs_file_relocate+0x1a4>)
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	9200      	str	r2, [sp, #0]
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fc fd7f 	bl	80039ea <lfs_dir_getread>
 8006eec:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01e      	beq.n	8006f32 <lfs_file_relocate+0xde>
                    return err;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	e07a      	b.n	8006fee <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8006efe:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	1ad4      	subs	r4, r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	f107 020b 	add.w	r2, r7, #11
 8006f14:	9202      	str	r2, [sp, #8]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	9201      	str	r2, [sp, #4]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fb fd23 	bl	800296c <lfs_bd_read>
 8006f26:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <lfs_file_relocate+0xde>
                    return err;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	e05d      	b.n	8006fee <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0110 	add.w	r1, r3, #16
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	f107 020b 	add.w	r2, r7, #11
 8006f44:	9202      	str	r2, [sp, #8]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	9201      	str	r2, [sp, #4]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fb ff51 	bl	8002df8 <lfs_bd_prog>
 8006f56:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006f64:	d032      	beq.n	8006fcc <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	e041      	b.n	8006fee <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d390      	bcc.n	8006e9c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69d9      	ldr	r1, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f002 f801 	bl	8008f90 <memcpy>
        file->cache.block = lfs->pcache.block;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699a      	ldr	r2, [r3, #24]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3310      	adds	r3, #16
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fb fcc6 	bl	800293e <lfs_cache_zero>

        file->block = nblock;
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e012      	b.n	8006fee <lfs_file_relocate+0x19a>
                goto relocate;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <lfs_file_relocate+0x17a>
                    goto relocate;
 8006fcc:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <lfs_file_relocate+0x1a8>)
 8006fd2:	9200      	str	r2, [sp, #0]
 8006fd4:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8006fd8:	4909      	ldr	r1, [pc, #36]	; (8007000 <lfs_file_relocate+0x1ac>)
 8006fda:	480a      	ldr	r0, [pc, #40]	; (8007004 <lfs_file_relocate+0x1b0>)
 8006fdc:	f002 fbbc 	bl	8009758 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fb fc9a 	bl	8002920 <lfs_cache_drop>
    while (true) {
 8006fec:	e737      	b.n	8006e5e <lfs_file_relocate+0xa>
    }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	fff7fc00 	.word	0xfff7fc00
 8006ffc:	0800a10c 	.word	0x0800a10c
 8007000:	0800a010 	.word	0x0800a010
 8007004:	0800a18c 	.word	0x0800a18c

08007008 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fc fb10 	bl	8003640 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ff16 	bl	8006e54 <lfs_file_relocate>
 8007028:	60f8      	str	r0, [r7, #12]
    if (err) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <lfs_file_outline+0x2c>
        return err;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	e006      	b.n	8007042 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b09f      	sub	sp, #124	; 0x7c
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	3340      	adds	r3, #64	; 0x40
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fb fc53 	bl	8002920 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80a4 	beq.w	80071dc <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007098:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d176      	bne.n	8007194 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80070a6:	f107 030c 	add.w	r3, r7, #12
 80070aa:	2254      	movs	r2, #84	; 0x54
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 ff7c 	bl	8008fac <memset>
                .ctz.head = file->ctz.head,
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80070be:	63bb      	str	r3, [r7, #56]	; 0x38
 80070c0:	2301      	movs	r3, #1
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80070c8:	643b      	str	r3, [r7, #64]	; 0x40
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80070d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fb fc20 	bl	8002920 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80070e0:	e02b      	b.n	800713a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80070e2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80070e6:	f107 010c 	add.w	r1, r7, #12
 80070ea:	2301      	movs	r3, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f90d 	bl	800730c <lfs_file_flushedread>
 80070f2:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80070f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da01      	bge.n	80070fe <lfs_file_flush+0xb2>
                    return res;
 80070fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070fc:	e06f      	b.n	80071de <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80070fe:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8007102:	2301      	movs	r3, #1
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa08 	bl	800751c <lfs_file_flushedwrite>
 800710c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800710e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007110:	2b00      	cmp	r3, #0
 8007112:	da01      	bge.n	8007118 <lfs_file_flush+0xcc>
                    return res;
 8007114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007116:	e062      	b.n	80071de <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d00b      	beq.n	800713a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8007122:	f107 030c 	add.w	r3, r7, #12
 8007126:	3340      	adds	r3, #64	; 0x40
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fb fbf8 	bl	8002920 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fb fbf3 	bl	8002920 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	429a      	cmp	r2, r3
 8007144:	d3cd      	bcc.n	80070e2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	2301      	movs	r3, #1
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fb fda1 	bl	8002c98 <lfs_bd_flush>
 8007156:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8007158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800715a:	2b00      	cmp	r3, #0
 800715c:	d026      	beq.n	80071ac <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800715e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007160:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007164:	d001      	beq.n	800716a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8007166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007168:	e039      	b.n	80071de <lfs_file_flush+0x192>
                        goto relocate;
 800716a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <lfs_file_flush+0x19c>)
 8007172:	9200      	str	r2, [sp, #0]
 8007174:	f640 425f 	movw	r2, #3167	; 0xc5f
 8007178:	491c      	ldr	r1, [pc, #112]	; (80071ec <lfs_file_flush+0x1a0>)
 800717a:	481d      	ldr	r0, [pc, #116]	; (80071f0 <lfs_file_flush+0x1a4>)
 800717c:	f002 faec 	bl	8009758 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fe66 	bl	8006e54 <lfs_file_relocate>
 8007188:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800718a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0da      	beq.n	8007146 <lfs_file_flush+0xfa>
                    return err;
 8007190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007192:	e024      	b.n	80071de <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fb faf8 	bl	8002794 <lfs_max>
 80071a4:	4602      	mov	r2, r0
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34
 80071aa:	e000      	b.n	80071ae <lfs_file_flush+0x162>
                break;
 80071ac:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071da:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3774      	adds	r7, #116	; 0x74
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}
 80071e6:	bf00      	nop
 80071e8:	0800a10c 	.word	0x0800a10c
 80071ec:	0800a010 	.word	0x0800a010
 80071f0:	0800a18c 	.word	0x0800a18c

080071f4 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b090      	sub	sp, #64	; 0x40
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800720a:	2300      	movs	r3, #0
 800720c:	e07a      	b.n	8007304 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff1b 	bl	800704c <lfs_file_flush>
 8007216:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	e06a      	b.n	8007304 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d063      	beq.n	8007302 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	4618      	mov	r0, r3
 8007240:	f7fb fecd 	bl	8002fde <lfs_pair_isnull>
 8007244:	4603      	mov	r3, r0
 8007246:	f083 0301 	eor.w	r3, r3, #1
 800724a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800724c:	2b00      	cmp	r3, #0
 800724e:	d058      	beq.n	8007302 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800725c:	f240 2301 	movw	r3, #513	; 0x201
 8007260:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	e014      	b.n	800729a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8007270:	f240 2302 	movw	r3, #514	; 0x202
 8007274:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800727c:	3228      	adds	r2, #40	; 0x28
 800727e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007282:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8007286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800728a:	4618      	mov	r0, r3
 800728c:	f7fc f8c8 	bl	8003420 <lfs_ctz_tole32>
            buffer = &ctz;
 8007290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8007296:	2308      	movs	r3, #8
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	f103 0108 	add.w	r1, r3, #8
 80072a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072a2:	051a      	lsls	r2, r3, #20
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	029b      	lsls	r3, r3, #10
 80072aa:	431a      	orrs	r2, r3
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	029a      	lsls	r2, r3, #10
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
 80072d2:	f107 0218 	add.w	r2, r7, #24
 80072d6:	2302      	movs	r3, #2
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff f969 	bl	80065b0 <lfs_dir_commit>
 80072de:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	e006      	b.n	8007304 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3740      	adds	r7, #64	; 0x40
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800730c:	b5b0      	push	{r4, r5, r7, lr}
 800730e:	b090      	sub	sp, #64	; 0x40
 8007310:	af06      	add	r7, sp, #24
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	429a      	cmp	r2, r3
 800732c:	d301      	bcc.n	8007332 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800732e:	2300      	movs	r3, #0
 8007330:	e0b7      	b.n	80074a2 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	4619      	mov	r1, r3
 800733e:	6838      	ldr	r0, [r7, #0]
 8007340:	f7fb fa38 	bl	80027b4 <lfs_min>
 8007344:	6038      	str	r0, [r7, #0]
    nsize = size;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800734a:	e0a5      	b.n	8007498 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007360:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8007362:	429a      	cmp	r2, r3
 8007364:	d130      	bne.n	80073c8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11c      	bne.n	80073ac <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	3138      	adds	r1, #56	; 0x38
 8007388:	68b8      	ldr	r0, [r7, #8]
 800738a:	303c      	adds	r0, #60	; 0x3c
 800738c:	9003      	str	r0, [sp, #12]
 800738e:	9102      	str	r1, [sp, #8]
 8007390:	9201      	str	r2, [sp, #4]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	462b      	mov	r3, r5
 8007396:	4622      	mov	r2, r4
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff f965 	bl	800666a <lfs_ctz_find>
 80073a0:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <lfs_file_flushedread+0xb0>
                    return err;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	e07a      	b.n	80074a2 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f06f 0201 	mvn.w	r2, #1
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	4619      	mov	r1, r3
 80073d6:	6a38      	ldr	r0, [r7, #32]
 80073d8:	f7fb f9ec 	bl	80027b4 <lfs_min>
 80073dc:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d026      	beq.n	8007438 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f103 0408 	add.w	r4, r3, #8
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80073fa:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	889b      	ldrh	r3, [r3, #4]
 8007400:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8007402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800740e:	69b8      	ldr	r0, [r7, #24]
 8007410:	9005      	str	r0, [sp, #20]
 8007412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007414:	9004      	str	r0, [sp, #16]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <lfs_file_flushedread+0x1a0>)
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	9200      	str	r2, [sp, #0]
 8007420:	462b      	mov	r3, r5
 8007422:	2200      	movs	r2, #0
 8007424:	4621      	mov	r1, r4
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7fc fadf 	bl	80039ea <lfs_dir_getread>
 800742c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01d      	beq.n	8007470 <lfs_file_flushedread+0x164>
                return err;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	e034      	b.n	80074a2 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8007442:	69dc      	ldr	r4, [r3, #28]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800744c:	69b9      	ldr	r1, [r7, #24]
 800744e:	9103      	str	r1, [sp, #12]
 8007450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007452:	9102      	str	r1, [sp, #8]
 8007454:	9201      	str	r2, [sp, #4]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4623      	mov	r3, r4
 800745a:	4602      	mov	r2, r0
 800745c:	2100      	movs	r1, #0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7fb fa84 	bl	800296c <lfs_bd_read>
 8007464:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <lfs_file_flushedread+0x164>
                return err;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	e018      	b.n	80074a2 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	441a      	add	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	441a      	add	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	4413      	add	r3, r2
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8007490:	6a3a      	ldr	r2, [r7, #32]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f47f af56 	bne.w	800734c <lfs_file_flushedread+0x40>
    }

    return size;
 80074a0:	683b      	ldr	r3, [r7, #0]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3728      	adds	r7, #40	; 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bdb0      	pop	{r4, r5, r7, pc}
 80074aa:	bf00      	nop
 80074ac:	fff7fc00 	.word	0xfff7fc00

080074b0 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <lfs_file_rawread+0x28>
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <lfs_file_rawread+0x60>)
 80074cc:	4a11      	ldr	r2, [pc, #68]	; (8007514 <lfs_file_rawread+0x64>)
 80074ce:	f640 41ea 	movw	r1, #3306	; 0xcea
 80074d2:	4811      	ldr	r0, [pc, #68]	; (8007518 <lfs_file_rawread+0x68>)
 80074d4:	f001 fce2 	bl	8008e9c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d009      	beq.n	80074f8 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fdb0 	bl	800704c <lfs_file_flush>
 80074ec:	6178      	str	r0, [r7, #20]
        if (err) {
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <lfs_file_rawread+0x48>
            return err;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	e006      	b.n	8007506 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff ff04 	bl	800730c <lfs_file_flushedread>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	0800a334 	.word	0x0800a334
 8007514:	0800a9d8 	.word	0x0800a9d8
 8007518:	0800a010 	.word	0x0800a010

0800751c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800751c:	b5b0      	push	{r4, r5, r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af04      	add	r7, sp, #16
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 810c 	beq.w	8007758 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	441a      	add	r2, r3
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fb f920 	bl	8002794 <lfs_max>
 8007554:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 800755a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	e003      	b.n	8007578 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007574:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fb f91a 	bl	80027b4 <lfs_min>
 8007580:	4603      	mov	r3, r0
 8007582:	4619      	mov	r1, r3
 8007584:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007588:	f7fb f914 	bl	80027b4 <lfs_min>
 800758c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800758e:	429c      	cmp	r4, r3
 8007590:	f240 80e2 	bls.w	8007758 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fd36 	bl	8007008 <lfs_file_outline>
 800759c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80d9 	beq.w	8007758 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	e0d5      	b.n	8007762 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ca:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d16b      	bne.n	80076a8 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d157      	bne.n	800768c <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d12d      	bne.n	8007644 <lfs_file_flushedwrite+0x128>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d029      	beq.n	8007644 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007602:	3a01      	subs	r2, #1
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	3138      	adds	r1, #56	; 0x38
 8007608:	68b8      	ldr	r0, [r7, #8]
 800760a:	303c      	adds	r0, #60	; 0x3c
 800760c:	9003      	str	r0, [sp, #12]
 800760e:	9102      	str	r1, [sp, #8]
 8007610:	9201      	str	r2, [sp, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	462b      	mov	r3, r5
 8007616:	4622      	mov	r2, r4
 8007618:	2100      	movs	r1, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff f825 	bl	800666a <lfs_ctz_find>
 8007620:	6238      	str	r0, [r7, #32]
                    if (err) {
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	e094      	b.n	8007762 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3340      	adds	r3, #64	; 0x40
 800763c:	4619      	mov	r1, r3
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7fb f97d 	bl	800293e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7fb fffb 	bl	8003640 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007650:	68fc      	ldr	r4, [r7, #12]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	3238      	adds	r2, #56	; 0x38
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	313c      	adds	r1, #60	; 0x3c
 8007662:	9102      	str	r1, [sp, #8]
 8007664:	9201      	str	r2, [sp, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	462b      	mov	r3, r5
 800766a:	4622      	mov	r2, r4
 800766c:	4601      	mov	r1, r0
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff f866 	bl	8006740 <lfs_ctz_extend>
 8007674:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00f      	beq.n	800769c <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	e06a      	b.n	8007762 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f06f 0201 	mvn.w	r2, #1
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	4619      	mov	r1, r3
 80076b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b8:	f7fb f87c 	bl	80027b4 <lfs_min>
 80076bc:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80076c4:	68fc      	ldr	r4, [r7, #12]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076ce:	69b9      	ldr	r1, [r7, #24]
 80076d0:	9103      	str	r1, [sp, #12]
 80076d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d4:	9102      	str	r1, [sp, #8]
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	2301      	movs	r3, #1
 80076dc:	4622      	mov	r2, r4
 80076de:	4601      	mov	r1, r0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7fb fb89 	bl	8002df8 <lfs_bd_prog>
 80076e6:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01c      	beq.n	8007728 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80076f4:	d007      	beq.n	8007706 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	e02d      	b.n	8007762 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8007706:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fba2 	bl	8006e54 <lfs_file_relocate>
 8007710:	6178      	str	r0, [r7, #20]
            if (err) {
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0d2      	beq.n	80076be <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	e01c      	b.n	8007762 <lfs_file_flushedwrite+0x246>
            break;
 8007728:	bf00      	nop
            }
        }

        file->pos += diff;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	441a      	add	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	441a      	add	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8007742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	4413      	add	r3, r2
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800774a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7fb ff74 	bl	8003640 <lfs_alloc_ack>
    while (nsize > 0) {
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	f47f af2b 	bne.w	80075b6 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8007760:	683b      	ldr	r3, [r7, #0]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800776c <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <lfs_file_rawwrite+0x28>
 8007786:	4b38      	ldr	r3, [pc, #224]	; (8007868 <lfs_file_rawwrite+0xfc>)
 8007788:	4a38      	ldr	r2, [pc, #224]	; (800786c <lfs_file_rawwrite+0x100>)
 800778a:	f640 5155 	movw	r1, #3413	; 0xd55
 800778e:	4838      	ldr	r0, [pc, #224]	; (8007870 <lfs_file_rawwrite+0x104>)
 8007790:	f001 fb84 	bl	8008e9c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fc52 	bl	800704c <lfs_file_flush>
 80077a8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <lfs_file_rawwrite+0x48>
            return err;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	e055      	b.n	8007860 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <lfs_file_rawwrite+0x68>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d203      	bcs.n	80077d4 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d902      	bls.n	80077ea <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80077e4:	f06f 031a 	mvn.w	r3, #26
 80077e8:	e03a      	b.n	8007860 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d121      	bne.n	800783a <lfs_file_rawwrite+0xce>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d91b      	bls.n	800783a <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8007810:	e00e      	b.n	8007830 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]
 8007816:	f107 0217 	add.w	r2, r7, #23
 800781a:	2301      	movs	r3, #1
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fe7c 	bl	800751c <lfs_file_flushedwrite>
 8007824:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	da01      	bge.n	8007830 <lfs_file_rawwrite+0xc4>
                return res;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	e017      	b.n	8007860 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	429a      	cmp	r2, r3
 8007838:	d8eb      	bhi.n	8007812 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff fe6b 	bl	800751c <lfs_file_flushedwrite>
 8007846:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	da01      	bge.n	8007852 <lfs_file_rawwrite+0xe6>
        return nsize;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	e006      	b.n	8007860 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800785e:	69bb      	ldr	r3, [r7, #24]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3728      	adds	r7, #40	; 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	0800a364 	.word	0x0800a364
 800786c:	0800a9ec 	.word	0x0800a9ec
 8007870:	0800a010 	.word	0x0800a010

08007874 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	; 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <lfs_file_rawseek+0x20>
        npos = off;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007892:	e025      	b.n	80078e0 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d10f      	bne.n	80078ba <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da02      	bge.n	80078ae <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 80078a8:	f06f 0315 	mvn.w	r3, #21
 80078ac:	e067      	b.n	800797e <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b8:	e012      	b.n	80078e0 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d10f      	bne.n	80078e0 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f875 	bl	80079b2 <lfs_file_rawsize>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da02      	bge.n	80078dc <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 80078d6:	f06f 0315 	mvn.w	r3, #21
 80078da:	e050      	b.n	800797e <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d902      	bls.n	80078f0 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80078ea:	f06f 0315 	mvn.w	r3, #21
 80078ee:	e046      	b.n	800797e <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d101      	bne.n	80078fe <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	e03f      	b.n	800797e <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8007906:	2b00      	cmp	r3, #0
 8007908:	d12b      	bne.n	8007962 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	f107 0318 	add.w	r3, r7, #24
 8007914:	4619      	mov	r1, r3
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7fe fe6f 	bl	80065fa <lfs_ctz_index>
 800791c:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8007922:	f107 0314 	add.w	r3, r7, #20
 8007926:	4619      	mov	r1, r3
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7fe fe66 	bl	80065fa <lfs_ctz_index>
 800792e:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	429a      	cmp	r2, r3
 8007936:	d114      	bne.n	8007962 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	429a      	cmp	r2, r3
 8007940:	d80f      	bhi.n	8007962 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	441a      	add	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d907      	bls.n	8007962 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007956:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	e00d      	b.n	800797e <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff fb71 	bl	800704c <lfs_file_flush>
 800796a:	61f8      	str	r0, [r7, #28]
    if (err) {
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <lfs_file_rawseek+0x102>
        return err;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	e003      	b.n	800797e <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797a:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800797e:	4618      	mov	r0, r3
 8007980:	3730      	adds	r7, #48	; 0x30
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8007990:	2300      	movs	r3, #0
 8007992:	2200      	movs	r2, #0
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff ff6c 	bl	8007874 <lfs_file_rawseek>
 800799c:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da01      	bge.n	80079a8 <lfs_file_rawrewind+0x22>
        return (int)res;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	e000      	b.n	80079aa <lfs_file_rawrewind+0x24>
    }

    return 0;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d009      	beq.n	80079dc <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f7fa fede 	bl	8002794 <lfs_max>
 80079d8:	4603      	mov	r3, r0
 80079da:	e001      	b.n	80079e0 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08c      	sub	sp, #48	; 0x30
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <lfs_init+0x2c>
 8007a06:	4b92      	ldr	r3, [pc, #584]	; (8007c50 <lfs_init+0x268>)
 8007a08:	4a92      	ldr	r2, [pc, #584]	; (8007c54 <lfs_init+0x26c>)
 8007a0a:	f640 7146 	movw	r1, #3910	; 0xf46
 8007a0e:	4892      	ldr	r0, [pc, #584]	; (8007c58 <lfs_init+0x270>)
 8007a10:	f001 fa44 	bl	8008e9c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <lfs_init+0x44>
 8007a1e:	4b8f      	ldr	r3, [pc, #572]	; (8007c5c <lfs_init+0x274>)
 8007a20:	4a8c      	ldr	r2, [pc, #560]	; (8007c54 <lfs_init+0x26c>)
 8007a22:	f640 7147 	movw	r1, #3911	; 0xf47
 8007a26:	488c      	ldr	r0, [pc, #560]	; (8007c58 <lfs_init+0x270>)
 8007a28:	f001 fa38 	bl	8008e9c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <lfs_init+0x5c>
 8007a36:	4b8a      	ldr	r3, [pc, #552]	; (8007c60 <lfs_init+0x278>)
 8007a38:	4a86      	ldr	r2, [pc, #536]	; (8007c54 <lfs_init+0x26c>)
 8007a3a:	f640 7148 	movw	r1, #3912	; 0xf48
 8007a3e:	4886      	ldr	r0, [pc, #536]	; (8007c58 <lfs_init+0x270>)
 8007a40:	f001 fa2c 	bl	8008e9c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a4e:	6952      	ldr	r2, [r2, #20]
 8007a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a54:	fb01 f202 	mul.w	r2, r1, r2
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <lfs_init+0x84>
 8007a5e:	4b81      	ldr	r3, [pc, #516]	; (8007c64 <lfs_init+0x27c>)
 8007a60:	4a7c      	ldr	r2, [pc, #496]	; (8007c54 <lfs_init+0x26c>)
 8007a62:	f640 714c 	movw	r1, #3916	; 0xf4c
 8007a66:	487c      	ldr	r0, [pc, #496]	; (8007c58 <lfs_init+0x270>)
 8007a68:	f001 fa18 	bl	8008e9c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a76:	6992      	ldr	r2, [r2, #24]
 8007a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a7c:	fb01 f202 	mul.w	r2, r1, r2
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d006      	beq.n	8007a94 <lfs_init+0xac>
 8007a86:	4b78      	ldr	r3, [pc, #480]	; (8007c68 <lfs_init+0x280>)
 8007a88:	4a72      	ldr	r2, [pc, #456]	; (8007c54 <lfs_init+0x26c>)
 8007a8a:	f640 714d 	movw	r1, #3917	; 0xf4d
 8007a8e:	4872      	ldr	r0, [pc, #456]	; (8007c58 <lfs_init+0x270>)
 8007a90:	f001 fa04 	bl	8008e9c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007aa4:	fb01 f202 	mul.w	r2, r1, r2
 8007aa8:	1a9b      	subs	r3, r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <lfs_init+0xd4>
 8007aae:	4b6f      	ldr	r3, [pc, #444]	; (8007c6c <lfs_init+0x284>)
 8007ab0:	4a68      	ldr	r2, [pc, #416]	; (8007c54 <lfs_init+0x26c>)
 8007ab2:	f640 714e 	movw	r1, #3918	; 0xf4e
 8007ab6:	4868      	ldr	r0, [pc, #416]	; (8007c58 <lfs_init+0x270>)
 8007ab8:	f001 f9f0 	bl	8008e9c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	3b08      	subs	r3, #8
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fa fea8 	bl	8002822 <lfs_npw2>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	009a      	lsls	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d906      	bls.n	8007aee <lfs_init+0x106>
 8007ae0:	4b63      	ldr	r3, [pc, #396]	; (8007c70 <lfs_init+0x288>)
 8007ae2:	4a5c      	ldr	r2, [pc, #368]	; (8007c54 <lfs_init+0x26c>)
 8007ae4:	f640 7151 	movw	r1, #3921	; 0xf51
 8007ae8:	485b      	ldr	r0, [pc, #364]	; (8007c58 <lfs_init+0x270>)
 8007aea:	f001 f9d7 	bl	8008e9c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <lfs_init+0x11e>
 8007af8:	4b5e      	ldr	r3, [pc, #376]	; (8007c74 <lfs_init+0x28c>)
 8007afa:	4a56      	ldr	r2, [pc, #344]	; (8007c54 <lfs_init+0x26c>)
 8007afc:	f640 715a 	movw	r1, #3930	; 0xf5a
 8007b00:	4855      	ldr	r0, [pc, #340]	; (8007c58 <lfs_init+0x270>)
 8007b02:	f001 f9cb 	bl	8008e9c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e010      	b.n	8007b3e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fa fee5 	bl	80028f2 <lfs_malloc>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8007b36:	f06f 030b 	mvn.w	r3, #11
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007b3c:	e0fd      	b.n	8007d3a <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	61da      	str	r2, [r3, #28]
 8007b52:	e010      	b.n	8007b76 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fa fec9 	bl	80028f2 <lfs_malloc>
 8007b60:	4602      	mov	r2, r0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8007b6e:	f06f 030b 	mvn.w	r3, #11
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007b74:	e0e1      	b.n	8007d3a <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fa fedf 	bl	800293e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3310      	adds	r3, #16
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fa fed9 	bl	800293e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <lfs_init+0x1bc>
 8007b96:	4b38      	ldr	r3, [pc, #224]	; (8007c78 <lfs_init+0x290>)
 8007b98:	4a2e      	ldr	r2, [pc, #184]	; (8007c54 <lfs_init+0x26c>)
 8007b9a:	f640 7178 	movw	r1, #3960	; 0xf78
 8007b9e:	482e      	ldr	r0, [pc, #184]	; (8007c58 <lfs_init+0x270>)
 8007ba0:	f001 f97c 	bl	8008e9c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <lfs_init+0x1d8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <lfs_init+0x1e6>
 8007bc0:	4b2e      	ldr	r3, [pc, #184]	; (8007c7c <lfs_init+0x294>)
 8007bc2:	4a24      	ldr	r2, [pc, #144]	; (8007c54 <lfs_init+0x26c>)
 8007bc4:	f640 7179 	movw	r1, #3961	; 0xf79
 8007bc8:	4823      	ldr	r0, [pc, #140]	; (8007c58 <lfs_init+0x270>)
 8007bca:	f001 f967 	bl	8008e9c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	665a      	str	r2, [r3, #100]	; 0x64
 8007be2:	e010      	b.n	8007c06 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fa fe81 	bl	80028f2 <lfs_malloc>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8007bfe:	f06f 030b 	mvn.w	r3, #11
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007c04:	e099      	b.n	8007d3a <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0c:	2bff      	cmp	r3, #255	; 0xff
 8007c0e:	d906      	bls.n	8007c1e <lfs_init+0x236>
 8007c10:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <lfs_init+0x298>)
 8007c12:	4a10      	ldr	r2, [pc, #64]	; (8007c54 <lfs_init+0x26c>)
 8007c14:	f640 7186 	movw	r1, #3974	; 0xf86
 8007c18:	480f      	ldr	r0, [pc, #60]	; (8007c58 <lfs_init+0x270>)
 8007c1a:	f001 f93f 	bl	8008e9c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da23      	bge.n	8007c88 <lfs_init+0x2a0>
 8007c40:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <lfs_init+0x29c>)
 8007c42:	4a04      	ldr	r2, [pc, #16]	; (8007c54 <lfs_init+0x26c>)
 8007c44:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007c48:	4803      	ldr	r0, [pc, #12]	; (8007c58 <lfs_init+0x270>)
 8007c4a:	f001 f927 	bl	8008e9c <__assert_func>
 8007c4e:	bf00      	nop
 8007c50:	0800a394 	.word	0x0800a394
 8007c54:	0800aa00 	.word	0x0800aa00
 8007c58:	0800a010 	.word	0x0800a010
 8007c5c:	0800a3b0 	.word	0x0800a3b0
 8007c60:	0800a3cc 	.word	0x0800a3cc
 8007c64:	0800a3e8 	.word	0x0800a3e8
 8007c68:	0800a418 	.word	0x0800a418
 8007c6c:	0800a448 	.word	0x0800a448
 8007c70:	0800a47c 	.word	0x0800a47c
 8007c74:	0800a4c8 	.word	0x0800a4c8
 8007c78:	0800a4e4 	.word	0x0800a4e4
 8007c7c:	0800a504 	.word	0x0800a504
 8007c80:	0800a558 	.word	0x0800a558
 8007c84:	0800a574 	.word	0x0800a574
    lfs->file_max = lfs->cfg->file_max;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007ca0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <lfs_init+0x2d6>
 8007cb0:	4b26      	ldr	r3, [pc, #152]	; (8007d4c <lfs_init+0x364>)
 8007cb2:	4a27      	ldr	r2, [pc, #156]	; (8007d50 <lfs_init+0x368>)
 8007cb4:	f640 7192 	movw	r1, #3986	; 0xf92
 8007cb8:	4826      	ldr	r0, [pc, #152]	; (8007d54 <lfs_init+0x36c>)
 8007cba:	f001 f8ef 	bl	8008e9c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007cd6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d906      	bls.n	8007cf6 <lfs_init+0x30e>
 8007ce8:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <lfs_init+0x370>)
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <lfs_init+0x368>)
 8007cec:	f640 7198 	movw	r1, #3992	; 0xf98
 8007cf0:	4818      	ldr	r0, [pc, #96]	; (8007d54 <lfs_init+0x36c>)
 8007cf2:	f001 f8d3 	bl	8008e9c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	333c      	adds	r3, #60	; 0x3c
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3330      	adds	r3, #48	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3348      	adds	r3, #72	; 0x48
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e003      	b.n	8007d42 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f80e 	bl	8007d5c <lfs_deinit>
    return err;
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3730      	adds	r7, #48	; 0x30
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	0800a598 	.word	0x0800a598
 8007d50:	0800aa00 	.word	0x0800aa00
 8007d54:	0800a010 	.word	0x0800a010
 8007d58:	0800a5b4 	.word	0x0800a5b4

08007d5c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d104      	bne.n	8007d78 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fa fdc9 	bl	800290a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fa fdbf 	bl	800290a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fa fdb5 	bl	800290a <lfs_free>
    }

    return 0;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b0a0      	sub	sp, #128	; 0x80
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff fe13 	bl	80079e8 <lfs_init>
 8007dc2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <lfs_rawformat+0x22>
            return err;
 8007dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dcc:	e082      	b.n	8007ed4 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f001 f8e6 	bl	8008fac <memset>
        lfs->free.off = 0;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fa fcdc 	bl	80027b4 <lfs_min>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7fb fc19 	bl	8003640 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fd f9f1 	bl	80051fc <lfs_dir_alloc>
 8007e1a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d14f      	bne.n	8007ec2 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e26:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007e2e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e34:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007e36:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007e3c:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007e42:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007e48:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007e4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fb fb36 	bl	80034c0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007e54:	4b21      	ldr	r3, [pc, #132]	; (8007edc <lfs_rawformat+0x130>)
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	2300      	movs	r3, #0
 8007e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <lfs_rawformat+0x134>)
 8007e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e60:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <lfs_rawformat+0x138>)
 8007e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e64:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <lfs_rawformat+0x13c>)
 8007e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e6e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007e72:	f107 010c 	add.w	r1, r7, #12
 8007e76:	2303      	movs	r3, #3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fe fb99 	bl	80065b0 <lfs_dir_commit>
 8007e7e:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11f      	bne.n	8007ec6 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007e8c:	f107 010c 	add.w	r1, r7, #12
 8007e90:	2300      	movs	r3, #0
 8007e92:	2200      	movs	r2, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fe fb8b 	bl	80065b0 <lfs_dir_commit>
 8007e9a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d113      	bne.n	8007eca <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8007eaa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007eae:	f107 030c 	add.w	r3, r7, #12
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7fc fe1d 	bl	8004af4 <lfs_dir_fetch>
 8007eba:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	e004      	b.n	8007ecc <lfs_rawformat+0x120>
            goto cleanup;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <lfs_rawformat+0x120>
            goto cleanup;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <lfs_rawformat+0x120>
            goto cleanup;
 8007eca:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff45 	bl	8007d5c <lfs_deinit>
    return err;
 8007ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3780      	adds	r7, #128	; 0x80
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40100000 	.word	0x40100000
 8007ee0:	0ff00008 	.word	0x0ff00008
 8007ee4:	0800a5e4 	.word	0x0800a5e4
 8007ee8:	20100018 	.word	0x20100018

08007eec <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b09c      	sub	sp, #112	; 0x70
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fd75 	bl	80079e8 <lfs_init>
 8007efe:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <lfs_rawmount+0x1e>
        return err;
 8007f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f08:	e192      	b.n	8008230 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f0e:	2220      	movs	r2, #32
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 f84a 	bl	8008fac <memset>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007f20:	e10b      	b.n	800813a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d303      	bcc.n	8007f38 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007f30:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007f34:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f36:	e177      	b.n	8008228 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	4b8a      	ldr	r3, [pc, #552]	; (800816c <lfs_rawmount+0x280>)
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f46:	2308      	movs	r3, #8
 8007f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f4e:	f103 0218 	add.w	r2, r3, #24
 8007f52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	4b84      	ldr	r3, [pc, #528]	; (8008170 <lfs_rawmount+0x284>)
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	4b83      	ldr	r3, [pc, #524]	; (8008174 <lfs_rawmount+0x288>)
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	4b83      	ldr	r3, [pc, #524]	; (8008178 <lfs_rawmount+0x28c>)
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fc fa54 	bl	8004418 <lfs_dir_fetchmatch>
 8007f70:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da02      	bge.n	8007f7e <lfs_rawmount+0x92>
            err = tag;
 8007f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f7c:	e154      	b.n	8008228 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80cd 	beq.w	8008120 <lfs_rawmount+0x234>
 8007f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fb f8dc 	bl	8003146 <lfs_tag_isdelete>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f083 0301 	eor.w	r3, r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80c2 	beq.w	8008120 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007fa8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4b72      	ldr	r3, [pc, #456]	; (800817c <lfs_rawmount+0x290>)
 8007fb4:	4a70      	ldr	r2, [pc, #448]	; (8008178 <lfs_rawmount+0x28c>)
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fb fcfc 	bl	80039b4 <lfs_dir_get>
 8007fbc:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da02      	bge.n	8007fca <lfs_rawmount+0xde>
                err = tag;
 8007fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007fc8:	e12e      	b.n	8008228 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fb fa3e 	bl	8003450 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8007fe2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d103      	bne.n	8007ff2 <lfs_rawmount+0x106>
 8007fea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8007ff2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8007ff6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ffa:	4961      	ldr	r1, [pc, #388]	; (8008180 <lfs_rawmount+0x294>)
 8007ffc:	9101      	str	r1, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	f241 0233 	movw	r2, #4147	; 0x1033
 8008006:	495f      	ldr	r1, [pc, #380]	; (8008184 <lfs_rawmount+0x298>)
 8008008:	485f      	ldr	r0, [pc, #380]	; (8008188 <lfs_rawmount+0x29c>)
 800800a:	f001 fba5 	bl	8009758 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800800e:	f06f 0315 	mvn.w	r3, #21
 8008012:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008014:	e083      	b.n	800811e <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d018      	beq.n	800804e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008022:	429a      	cmp	r2, r3
 8008024:	d910      	bls.n	8008048 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802c:	4954      	ldr	r1, [pc, #336]	; (8008180 <lfs_rawmount+0x294>)
 800802e:	9101      	str	r1, [sp, #4]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4613      	mov	r3, r2
 8008034:	f241 023c 	movw	r2, #4156	; 0x103c
 8008038:	4952      	ldr	r1, [pc, #328]	; (8008184 <lfs_rawmount+0x298>)
 800803a:	4854      	ldr	r0, [pc, #336]	; (800818c <lfs_rawmount+0x2a0>)
 800803c:	f001 fb8c 	bl	8009758 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8008040:	f06f 0315 	mvn.w	r3, #21
 8008044:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8008046:	e06a      	b.n	800811e <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d018      	beq.n	8008086 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805a:	429a      	cmp	r2, r3
 800805c:	d910      	bls.n	8008080 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4946      	ldr	r1, [pc, #280]	; (8008180 <lfs_rawmount+0x294>)
 8008066:	9101      	str	r1, [sp, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4613      	mov	r3, r2
 800806c:	f241 0247 	movw	r2, #4167	; 0x1047
 8008070:	4944      	ldr	r1, [pc, #272]	; (8008184 <lfs_rawmount+0x298>)
 8008072:	4847      	ldr	r0, [pc, #284]	; (8008190 <lfs_rawmount+0x2a4>)
 8008074:	f001 fb70 	bl	8009758 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8008078:	f06f 0315 	mvn.w	r3, #21
 800807c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800807e:	e04e      	b.n	800811e <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d018      	beq.n	80080be <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 800808c:	6a3a      	ldr	r2, [r7, #32]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008092:	429a      	cmp	r2, r3
 8008094:	d910      	bls.n	80080b8 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8008096:	6a3a      	ldr	r2, [r7, #32]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809c:	4938      	ldr	r1, [pc, #224]	; (8008180 <lfs_rawmount+0x294>)
 800809e:	9101      	str	r1, [sp, #4]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	f241 0252 	movw	r2, #4178	; 0x1052
 80080a8:	4936      	ldr	r1, [pc, #216]	; (8008184 <lfs_rawmount+0x298>)
 80080aa:	483a      	ldr	r0, [pc, #232]	; (8008194 <lfs_rawmount+0x2a8>)
 80080ac:	f001 fb54 	bl	8009758 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80080b0:	f06f 0315 	mvn.w	r3, #21
 80080b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80080b6:	e032      	b.n	800811e <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d011      	beq.n	80080ee <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	492b      	ldr	r1, [pc, #172]	; (8008180 <lfs_rawmount+0x294>)
 80080d4:	9101      	str	r1, [sp, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4613      	mov	r3, r2
 80080da:	f241 025c 	movw	r2, #4188	; 0x105c
 80080de:	4929      	ldr	r1, [pc, #164]	; (8008184 <lfs_rawmount+0x298>)
 80080e0:	482d      	ldr	r0, [pc, #180]	; (8008198 <lfs_rawmount+0x2ac>)
 80080e2:	f001 fb39 	bl	8009758 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80080e6:	f06f 0315 	mvn.w	r3, #21
 80080ea:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80080ec:	e017      	b.n	800811e <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d012      	beq.n	8008120 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	491f      	ldr	r1, [pc, #124]	; (8008180 <lfs_rawmount+0x294>)
 8008104:	9101      	str	r1, [sp, #4]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4613      	mov	r3, r2
 800810a:	f241 0263 	movw	r2, #4195	; 0x1063
 800810e:	491d      	ldr	r1, [pc, #116]	; (8008184 <lfs_rawmount+0x298>)
 8008110:	4822      	ldr	r0, [pc, #136]	; (800819c <lfs_rawmount+0x2b0>)
 8008112:	f001 fb21 	bl	8009758 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8008116:	f06f 0315 	mvn.w	r3, #21
 800811a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800811c:	bf00      	nop
            goto cleanup;
 800811e:	e083      	b.n	8008228 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fc fcfd 	bl	8004b2c <lfs_dir_getgstate>
 8008132:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8008134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d175      	bne.n	8008226 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 800813a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800813e:	3318      	adds	r3, #24
 8008140:	4618      	mov	r0, r3
 8008142:	f7fa ff4c 	bl	8002fde <lfs_pair_isnull>
 8008146:	4603      	mov	r3, r0
 8008148:	f083 0301 	eor.w	r3, r3, #1
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	f47f aee7 	bne.w	8007f22 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3320      	adds	r3, #32
 8008158:	4618      	mov	r0, r3
 800815a:	f7fa ff40 	bl	8002fde <lfs_pair_isnull>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01d      	beq.n	80081a0 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8008164:	f06f 0315 	mvn.w	r3, #21
 8008168:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800816a:	e05d      	b.n	8008228 <lfs_rawmount+0x33c>
 800816c:	0800a5e4 	.word	0x0800a5e4
 8008170:	08004b91 	.word	0x08004b91
 8008174:	0ff00008 	.word	0x0ff00008
 8008178:	7ffffc00 	.word	0x7ffffc00
 800817c:	20100018 	.word	0x20100018
 8008180:	0800a10c 	.word	0x0800a10c
 8008184:	0800a010 	.word	0x0800a010
 8008188:	0800a5f0 	.word	0x0800a5f0
 800818c:	0800a61c 	.word	0x0800a61c
 8008190:	0800a650 	.word	0x0800a650
 8008194:	0800a684 	.word	0x0800a684
 8008198:	0800a6b8 	.word	0x0800a6b8
 800819c:	0800a6ec 	.word	0x0800a6ec
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3330      	adds	r3, #48	; 0x30
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fb f871 	bl	800328c <lfs_gstate_iszero>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f083 0301 	eor.w	r3, r3, #1
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d010      	beq.n	80081d8 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081c2:	481d      	ldr	r0, [pc, #116]	; (8008238 <lfs_rawmount+0x34c>)
 80081c4:	9002      	str	r0, [sp, #8]
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	460b      	mov	r3, r1
 80081cc:	f241 0279 	movw	r2, #4217	; 0x1079
 80081d0:	491a      	ldr	r1, [pc, #104]	; (800823c <lfs_rawmount+0x350>)
 80081d2:	481b      	ldr	r0, [pc, #108]	; (8008240 <lfs_rawmount+0x354>)
 80081d4:	f001 fac0 	bl	8009758 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fa ffa4 	bl	800312a <lfs_tag_isvalid>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f083 0301 	eor.w	r3, r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	333c      	adds	r3, #60	; 0x3c
 80081fc:	3230      	adds	r2, #48	; 0x30
 80081fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008200:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800820c:	6a12      	ldr	r2, [r2, #32]
 800820e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008212:	fb01 f202 	mul.w	r2, r1, r2
 8008216:	1a9a      	subs	r2, r3, r2
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7fb fa1e 	bl	800365e <lfs_alloc_drop>

    return 0;
 8008222:	2300      	movs	r3, #0
 8008224:	e004      	b.n	8008230 <lfs_rawmount+0x344>
            goto cleanup;
 8008226:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f80b 	bl	8008244 <lfs_rawunmount>
    return err;
 800822e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008230:	4618      	mov	r0, r3
 8008232:	3760      	adds	r7, #96	; 0x60
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	0800a10c 	.word	0x0800a10c
 800823c:	0800a010 	.word	0x0800a010
 8008240:	0800a71c 	.word	0x0800a71c

08008244 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fd85 	bl	8007d5c <lfs_deinit>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b09d      	sub	sp, #116	; 0x74
 8008260:	af04      	add	r7, sp, #16
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800826a:	f107 0318 	add.w	r3, r7, #24
 800826e:	2220      	movs	r2, #32
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fe9a 	bl	8008fac <memset>
 8008278:	2301      	movs	r3, #1
 800827a:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8008280:	e0a7      	b.n	80083d2 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	085b      	lsrs	r3, r3, #1
 800828a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8008290:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008294:	e102      	b.n	800849c <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8008296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008298:	3301      	adds	r3, #1
 800829a:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800829c:	2300      	movs	r3, #0
 800829e:	65bb      	str	r3, [r7, #88]	; 0x58
 80082a0:	e013      	b.n	80082ca <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 80082a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082a4:	3306      	adds	r3, #6
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	3360      	adds	r3, #96	; 0x60
 80082aa:	443b      	add	r3, r7
 80082ac:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4611      	mov	r1, r2
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
 80082b8:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <lfs_fs_rawtraverse+0x68>
                return err;
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	e0eb      	b.n	800849c <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 80082c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c6:	3301      	adds	r3, #1
 80082c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	dde8      	ble.n	80082a2 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80082d0:	f107 0318 	add.w	r3, r7, #24
 80082d4:	f103 0218 	add.w	r2, r3, #24
 80082d8:	f107 0318 	add.w	r3, r7, #24
 80082dc:	4619      	mov	r1, r3
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7fc fc08 	bl	8004af4 <lfs_dir_fetch>
 80082e4:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <lfs_fs_rawtraverse+0x94>
            return err;
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	e0d5      	b.n	800849c <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80082f0:	2300      	movs	r3, #0
 80082f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082f6:	e067      	b.n	80083c8 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80082f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082fc:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80082fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008302:	f043 0308 	orr.w	r3, r3, #8
 8008306:	f107 0118 	add.w	r1, r7, #24
 800830a:	f107 0210 	add.w	r2, r7, #16
 800830e:	9200      	str	r2, [sp, #0]
 8008310:	4a64      	ldr	r2, [pc, #400]	; (80084a4 <lfs_fs_rawtraverse+0x248>)
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7fb fb4e 	bl	80039b4 <lfs_dir_get>
 8008318:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800831a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831c:	2b00      	cmp	r3, #0
 800831e:	da05      	bge.n	800832c <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	f113 0f02 	cmn.w	r3, #2
 8008326:	d049      	beq.n	80083bc <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	e0b7      	b.n	800849c <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800832c:	f107 0310 	add.w	r3, r7, #16
 8008330:	4618      	mov	r0, r3
 8008332:	f7fb f85d 	bl	80033f0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8008336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008338:	4618      	mov	r0, r3
 800833a:	f7fa ff27 	bl	800318c <lfs_tag_type3>
 800833e:	4603      	mov	r3, r0
 8008340:	461a      	mov	r2, r3
 8008342:	f240 2302 	movw	r3, #514	; 0x202
 8008346:	429a      	cmp	r2, r3
 8008348:	d113      	bne.n	8008372 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	6938      	ldr	r0, [r7, #16]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	9202      	str	r2, [sp, #8]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	9201      	str	r2, [sp, #4]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	4603      	mov	r3, r0
 800835c:	460a      	mov	r2, r1
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7fe faf5 	bl	8006950 <lfs_ctz_traverse>
 8008366:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d027      	beq.n	80083be <lfs_fs_rawtraverse+0x162>
                    return err;
 800836e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008370:	e094      	b.n	800849c <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d022      	beq.n	80083be <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8008378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837a:	4618      	mov	r0, r3
 800837c:	f7fa ff06 	bl	800318c <lfs_tag_type3>
 8008380:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8008382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008386:	d11a      	bne.n	80083be <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8008388:	2300      	movs	r3, #0
 800838a:	653b      	str	r3, [r7, #80]	; 0x50
 800838c:	e012      	b.n	80083b4 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	f107 0210 	add.w	r2, r7, #16
 8008396:	4413      	add	r3, r2
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4611      	mov	r1, r2
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
 80083a2:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80083a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <lfs_fs_rawtraverse+0x152>
                        return err;
 80083aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ac:	e076      	b.n	800849c <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 80083ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b0:	3301      	adds	r3, #1
 80083b2:	653b      	str	r3, [r7, #80]	; 0x50
 80083b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	dde9      	ble.n	800838e <lfs_fs_rawtraverse+0x132>
 80083ba:	e000      	b.n	80083be <lfs_fs_rawtraverse+0x162>
                    continue;
 80083bc:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80083be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083c2:	3301      	adds	r3, #1
 80083c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80083c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083ca:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d392      	bcc.n	80082f8 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80083d2:	f107 0318 	add.w	r3, r7, #24
 80083d6:	3318      	adds	r3, #24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fa fe00 	bl	8002fde <lfs_pair_isnull>
 80083de:	4603      	mov	r3, r0
 80083e0:	f083 0301 	eor.w	r3, r3, #1
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f47f af4b 	bne.w	8008282 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f2:	e04f      	b.n	8008494 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80083f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f6:	799b      	ldrb	r3, [r3, #6]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d147      	bne.n	800848c <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80083fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01d      	beq.n	8008444 <lfs_fs_rawtraverse+0x1e8>
 8008408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d117      	bne.n	8008444 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008416:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4623      	mov	r3, r4
 8008430:	4602      	mov	r2, r0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7fe fa8c 	bl	8006950 <lfs_ctz_traverse>
 8008438:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800843a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8008440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008442:	e02b      	b.n	800849c <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8008444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01e      	beq.n	800848e <lfs_fs_rawtraverse+0x232>
 8008450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d118      	bne.n	800848e <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800845c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008466:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	9202      	str	r2, [sp, #8]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	9201      	str	r2, [sp, #4]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4623      	mov	r3, r4
 8008478:	4602      	mov	r2, r0
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7fe fa68 	bl	8006950 <lfs_ctz_traverse>
 8008480:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8008482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <lfs_fs_rawtraverse+0x232>
                return err;
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	e007      	b.n	800849c <lfs_fs_rawtraverse+0x240>
            continue;
 800848c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800848e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1ac      	bne.n	80083f4 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3764      	adds	r7, #100	; 0x64
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}
 80084a4:	700ffc00 	.word	0x700ffc00

080084a8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80084c4:	e024      	b.n	8008510 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	085b      	lsrs	r3, r3, #1
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d302      	bcc.n	80084da <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80084d4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80084d8:	e027      	b.n	800852a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	3301      	adds	r3, #1
 80084de:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3318      	adds	r3, #24
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fa fd94 	bl	8003014 <lfs_pair_cmp>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <lfs_fs_pred+0x4e>
            return 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e019      	b.n	800852a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3318      	adds	r3, #24
 80084fa:	461a      	mov	r2, r3
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7fc faf8 	bl	8004af4 <lfs_dir_fetch>
 8008504:	6138      	str	r0, [r7, #16]
        if (err) {
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <lfs_fs_pred+0x68>
            return err;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	e00c      	b.n	800852a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3318      	adds	r3, #24
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fd62 	bl	8002fde <lfs_pair_isnull>
 800851a:	4603      	mov	r3, r0
 800851c:	f083 0301 	eor.w	r3, r3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1cf      	bne.n	80084c6 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008526:	f06f 0301 	mvn.w	r3, #1
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8008532:	b5b0      	push	{r4, r5, r7, lr}
 8008534:	b08e      	sub	sp, #56	; 0x38
 8008536:	af04      	add	r7, sp, #16
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8008552:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8008558:	69dd      	ldr	r5, [r3, #28]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	6852      	ldr	r2, [r2, #4]
 8008562:	2108      	movs	r1, #8
 8008564:	9103      	str	r1, [sp, #12]
 8008566:	f107 0110 	add.w	r1, r7, #16
 800856a:	9102      	str	r1, [sp, #8]
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	462b      	mov	r3, r5
 8008572:	4622      	mov	r2, r4
 8008574:	4601      	mov	r1, r0
 8008576:	6a38      	ldr	r0, [r7, #32]
 8008578:	f7fa f9f8 	bl	800296c <lfs_bd_read>
 800857c:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <lfs_fs_parent_match+0x56>
        return err;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	e012      	b.n	80085ae <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8008588:	f107 0310 	add.w	r3, r7, #16
 800858c:	4618      	mov	r0, r3
 800858e:	f7fa fd98 	bl	80030c2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	1d1a      	adds	r2, r3, #4
 8008596:	f107 0310 	add.w	r3, r7, #16
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f7fa fd39 	bl	8003014 <lfs_pair_cmp>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bf14      	ite	ne
 80085a8:	2301      	movne	r3, #1
 80085aa:	2300      	moveq	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3728      	adds	r7, #40	; 0x28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085b8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08e      	sub	sp, #56	; 0x38
 80085bc:	af04      	add	r7, sp, #16
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 80085d4:	e02f      	b.n	8008636 <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80085e4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80085e8:	e032      	b.n	8008650 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	3301      	adds	r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	4b12      	ldr	r3, [pc, #72]	; (8008658 <lfs_fs_parent+0xa0>)
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	2300      	movs	r3, #0
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <lfs_fs_parent+0xa4>)
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <lfs_fs_parent+0xa8>)
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7fb fefb 	bl	8004418 <lfs_dir_fetchmatch>
 8008622:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <lfs_fs_parent+0x7e>
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	f113 0f02 	cmn.w	r3, #2
 8008630:	d001      	beq.n	8008636 <lfs_fs_parent+0x7e>
            return tag;
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	e00c      	b.n	8008650 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3318      	adds	r3, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f7fa fccf 	bl	8002fde <lfs_pair_isnull>
 8008640:	4603      	mov	r3, r0
 8008642:	f083 0301 	eor.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1c4      	bne.n	80085d6 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800864c:	f06f 0301 	mvn.w	r3, #1
}
 8008650:	4618      	mov	r0, r3
 8008652:	3728      	adds	r7, #40	; 0x28
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08008533 	.word	0x08008533
 800865c:	20000008 	.word	0x20000008
 8008660:	7ff003ff 	.word	0x7ff003ff

08008664 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	4618      	mov	r0, r3
 8008676:	f7fa fdc3 	bl	8003200 <lfs_tag_size>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <lfs_fs_preporphans+0x32>
 8008680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008684:	2b00      	cmp	r3, #0
 8008686:	da06      	bge.n	8008696 <lfs_fs_preporphans+0x32>
 8008688:	4b10      	ldr	r3, [pc, #64]	; (80086cc <lfs_fs_preporphans+0x68>)
 800868a:	4a11      	ldr	r2, [pc, #68]	; (80086d0 <lfs_fs_preporphans+0x6c>)
 800868c:	f241 114c 	movw	r1, #4428	; 0x114c
 8008690:	4810      	ldr	r0, [pc, #64]	; (80086d4 <lfs_fs_preporphans+0x70>)
 8008692:	f000 fc03 	bl	8008e9c <__assert_func>
    lfs->gstate.tag += orphans;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800869e:	441a      	add	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3330      	adds	r3, #48	; 0x30
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fa fe08 	bl	80032c6 <lfs_gstate_hasorphans>
 80086b6:	4603      	mov	r3, r0
 80086b8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80086ba:	ea44 0203 	orr.w	r2, r4, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd90      	pop	{r4, r7, pc}
 80086cc:	0800a754 	.word	0x0800a754
 80086d0:	0800aa0c 	.word	0x0800aa0c
 80086d4:	0800a010 	.word	0x0800a010

080086d8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	460b      	mov	r3, r1
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <lfs_fs_prepmove+0x70>)
 80086ec:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80086ee:	897b      	ldrh	r3, [r7, #10]
 80086f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80086f4:	428b      	cmp	r3, r1
 80086f6:	d006      	beq.n	8008706 <lfs_fs_prepmove+0x2e>
 80086f8:	897b      	ldrh	r3, [r7, #10]
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008700:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008704:	e000      	b.n	8008708 <lfs_fs_prepmove+0x30>
 8008706:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008708:	431a      	orrs	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800870e:	897b      	ldrh	r3, [r7, #10]
 8008710:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008714:	4293      	cmp	r3, r2
 8008716:	d002      	beq.n	800871e <lfs_fs_prepmove+0x46>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	e000      	b.n	8008720 <lfs_fs_prepmove+0x48>
 800871e:	2300      	movs	r3, #0
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <lfs_fs_prepmove+0x5e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3304      	adds	r3, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	e000      	b.n	8008738 <lfs_fs_prepmove+0x60>
 8008736:	2300      	movs	r3, #0
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800873c:	bf00      	nop
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	800003ff 	.word	0x800003ff

0800874c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800874c:	b5b0      	push	{r4, r5, r7, lr}
 800874e:	b094      	sub	sp, #80	; 0x50
 8008750:	af04      	add	r7, sp, #16
 8008752:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	333c      	adds	r3, #60	; 0x3c
 8008758:	4618      	mov	r0, r3
 800875a:	f7fa fdd6 	bl	800330a <lfs_gstate_hasmove>
 800875e:	4603      	mov	r3, r0
 8008760:	f083 0301 	eor.w	r3, r3, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <lfs_fs_demove+0x22>
        return 0;
 800876a:	2300      	movs	r3, #0
 800876c:	e049      	b.n	8008802 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	4618      	mov	r0, r3
 800877c:	f7fa fd30 	bl	80031e0 <lfs_tag_id>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	4b21      	ldr	r3, [pc, #132]	; (800880c <lfs_fs_demove+0xc0>)
 8008786:	9302      	str	r3, [sp, #8]
 8008788:	9201      	str	r2, [sp, #4]
 800878a:	9400      	str	r4, [sp, #0]
 800878c:	462b      	mov	r3, r5
 800878e:	f241 1266 	movw	r2, #4454	; 0x1166
 8008792:	491f      	ldr	r1, [pc, #124]	; (8008810 <lfs_fs_demove+0xc4>)
 8008794:	481f      	ldr	r0, [pc, #124]	; (8008814 <lfs_fs_demove+0xc8>)
 8008796:	f000 ffdf 	bl	8009758 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80087a0:	f107 0318 	add.w	r3, r7, #24
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fc f9a4 	bl	8004af4 <lfs_dir_fetch>
 80087ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80087ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <lfs_fs_demove+0x6c>
        return err;
 80087b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b6:	e024      	b.n	8008802 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fa fd0f 	bl	80031e0 <lfs_tag_id>
 80087c2:	4603      	mov	r3, r0
 80087c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80087c6:	2200      	movs	r2, #0
 80087c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff83 	bl	80086d8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80087d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087d4:	029b      	lsls	r3, r3, #10
 80087d6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80087da:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80087de:	613b      	str	r3, [r7, #16]
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	f107 0210 	add.w	r2, r7, #16
 80087e8:	f107 0118 	add.w	r1, r7, #24
 80087ec:	2301      	movs	r3, #1
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fd fede 	bl	80065b0 <lfs_dir_commit>
 80087f4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <lfs_fs_demove+0xb4>
        return err;
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	e000      	b.n	8008802 <lfs_fs_demove+0xb6>
    }

    return 0;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3740      	adds	r7, #64	; 0x40
 8008806:	46bd      	mov	sp, r7
 8008808:	bdb0      	pop	{r4, r5, r7, pc}
 800880a:	bf00      	nop
 800880c:	0800a10c 	.word	0x0800a10c
 8008810:	0800a010 	.word	0x0800a010
 8008814:	0800a788 	.word	0x0800a788

08008818 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	b0b2      	sub	sp, #200	; 0xc8
 800881c:	af04      	add	r7, sp, #16
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3330      	adds	r3, #48	; 0x30
 8008828:	4618      	mov	r0, r3
 800882a:	f7fa fd4c 	bl	80032c6 <lfs_gstate_hasorphans>
 800882e:	4603      	mov	r3, r0
 8008830:	f083 0301 	eor.w	r3, r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <lfs_fs_deorphan+0x26>
        return 0;
 800883a:	2300      	movs	r3, #0
 800883c:	e17c      	b.n	8008b38 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	2220      	movs	r2, #32
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fbad 	bl	8008fac <memset>
 8008852:	2301      	movs	r3, #1
 8008854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008858:	2301      	movs	r3, #1
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800885c:	e148      	b.n	8008af0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	f103 0218 	add.w	r2, r3, #24
 8008866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fc f941 	bl	8004af4 <lfs_dir_fetch>
 8008872:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8008876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <lfs_fs_deorphan+0x6c>
                return err;
 800887e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008882:	e159      	b.n	8008b38 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8008884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008888:	f083 0301 	eor.w	r3, r3, #1
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8124 	beq.w	8008adc <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8008894:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008898:	f107 030c 	add.w	r3, r7, #12
 800889c:	3318      	adds	r3, #24
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff fe89 	bl	80085b8 <lfs_fs_parent>
 80088a6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	da07      	bge.n	80088c2 <lfs_fs_deorphan+0xaa>
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088b6:	f113 0f02 	cmn.w	r3, #2
 80088ba:	d002      	beq.n	80088c2 <lfs_fs_deorphan+0xaa>
                    return tag;
 80088bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088c0:	e13a      	b.n	8008b38 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088c6:	f113 0f02 	cmn.w	r3, #2
 80088ca:	d157      	bne.n	800897c <lfs_fs_deorphan+0x164>
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d054      	beq.n	800897c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80088d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	499a      	ldr	r1, [pc, #616]	; (8008b40 <lfs_fs_deorphan+0x328>)
 80088d8:	9101      	str	r1, [sp, #4]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	f241 12a1 	movw	r2, #4513	; 0x11a1
 80088e2:	4998      	ldr	r1, [pc, #608]	; (8008b44 <lfs_fs_deorphan+0x32c>)
 80088e4:	4898      	ldr	r0, [pc, #608]	; (8008b48 <lfs_fs_deorphan+0x330>)
 80088e6:	f000 ff37 	bl	8009758 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80088f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fc f918 	bl	8004b2c <lfs_dir_getgstate>
 80088fc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8008900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <lfs_fs_deorphan+0xf6>
                        return err;
 8008908:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800890c:	e114      	b.n	8008b38 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800890e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008912:	3318      	adds	r3, #24
 8008914:	4618      	mov	r0, r3
 8008916:	f7fa fbee 	bl	80030f6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800891a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800891e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008922:	051a      	lsls	r2, r3, #20
 8008924:	4b89      	ldr	r3, [pc, #548]	; (8008b4c <lfs_fs_deorphan+0x334>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800892c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008930:	3318      	adds	r3, #24
 8008932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008936:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800893a:	f107 010c 	add.w	r1, r7, #12
 800893e:	2301      	movs	r3, #1
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7fd fb3b 	bl	8005fbc <lfs_dir_orphaningcommit>
 8008946:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800894a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800894e:	3318      	adds	r3, #24
 8008950:	4618      	mov	r0, r3
 8008952:	f7fa fbb6 	bl	80030c2 <lfs_pair_fromle32>
                    if (state < 0) {
 8008956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800895a:	2b00      	cmp	r3, #0
 800895c:	da02      	bge.n	8008964 <lfs_fs_deorphan+0x14c>
                        return state;
 800895e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8008962:	e0e9      	b.n	8008b38 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8008964:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008968:	3301      	adds	r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8008970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008974:	2b03      	cmp	r3, #3
 8008976:	f040 80af 	bne.w	8008ad8 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 800897a:	e763      	b.n	8008844 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 800897c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008980:	f113 0f02 	cmn.w	r3, #2
 8008984:	f000 80aa 	beq.w	8008adc <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8008988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800898c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008990:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	4a6d      	ldr	r2, [pc, #436]	; (8008b50 <lfs_fs_deorphan+0x338>)
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7fb f80a 	bl	80039b4 <lfs_dir_get>
 80089a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80089a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da02      	bge.n	80089b2 <lfs_fs_deorphan+0x19a>
                        return state;
 80089ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b0:	e0c2      	b.n	8008b38 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 80089b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fa fb83 	bl	80030c2 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	f103 0218 	add.w	r2, r3, #24
 80089c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fa fb4c 	bl	8003068 <lfs_pair_sync>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f083 0301 	eor.w	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d07f      	beq.n	8008adc <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80089dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80089e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089e8:	4c55      	ldr	r4, [pc, #340]	; (8008b40 <lfs_fs_deorphan+0x328>)
 80089ea:	9403      	str	r4, [sp, #12]
 80089ec:	9102      	str	r1, [sp, #8]
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4603      	mov	r3, r0
 80089f4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 80089f8:	4952      	ldr	r1, [pc, #328]	; (8008b44 <lfs_fs_deorphan+0x32c>)
 80089fa:	4856      	ldr	r0, [pc, #344]	; (8008b54 <lfs_fs_deorphan+0x33c>)
 80089fc:	f000 feac 	bl	8009758 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008a00:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008a04:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3330      	adds	r3, #48	; 0x30
 8008a0c:	f107 020c 	add.w	r2, r7, #12
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fa fc8c 	bl	8003330 <lfs_gstate_hasmovehere>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d01c      	beq.n	8008a58 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fa fbdc 	bl	80031e0 <lfs_tag_id>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8008a36:	4842      	ldr	r0, [pc, #264]	; (8008b40 <lfs_fs_deorphan+0x328>)
 8008a38:	9002      	str	r0, [sp, #8]
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8008a44:	493f      	ldr	r1, [pc, #252]	; (8008b44 <lfs_fs_deorphan+0x32c>)
 8008a46:	4844      	ldr	r0, [pc, #272]	; (8008b58 <lfs_fs_deorphan+0x340>)
 8008a48:	f000 fe86 	bl	8009758 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fe40 	bl	80086d8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008a58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fa fb4a 	bl	80030f6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008a62:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008a66:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d007      	beq.n	8008a7e <lfs_fs_deorphan+0x266>
 8008a6e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008a78:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008a7c:	e000      	b.n	8008a80 <lfs_fs_deorphan+0x268>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a88:	4b34      	ldr	r3, [pc, #208]	; (8008b5c <lfs_fs_deorphan+0x344>)
 8008a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a96:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008a9a:	f107 010c 	add.w	r1, r7, #12
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fd fa8b 	bl	8005fbc <lfs_dir_orphaningcommit>
 8008aa6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008aaa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fa fb07 	bl	80030c2 <lfs_pair_fromle32>
                        if (state < 0) {
 8008ab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da02      	bge.n	8008ac2 <lfs_fs_deorphan+0x2aa>
                            return state;
 8008abc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8008ac0:	e03a      	b.n	8008b38 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8008ac2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8008ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d10c      	bne.n	8008af0 <lfs_fs_deorphan+0x2d8>
 8008ad6:	e6b5      	b.n	8008844 <lfs_fs_deorphan+0x2c>
                    continue;
 8008ad8:	bf00      	nop
 8008ada:	e009      	b.n	8008af0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8008adc:	f107 040c 	add.w	r4, r7, #12
 8008ae0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8008ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ae8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8008af0:	f107 030c 	add.w	r3, r7, #12
 8008af4:	3318      	adds	r3, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fa fa71 	bl	8002fde <lfs_pair_isnull>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f47f aeaa 	bne.w	800885e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3330      	adds	r3, #48	; 0x30
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa fbec 	bl	80032ec <lfs_gstate_getorphans>
 8008b14:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8008b16:	461a      	mov	r2, r3
 8008b18:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7f9 fe48 	bl	80027b4 <lfs_min>
 8008b24:	4603      	mov	r3, r0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	425b      	negs	r3, r3
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff fd97 	bl	8008664 <lfs_fs_preporphans>
 8008b36:	4603      	mov	r3, r0
            found));
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	37b8      	adds	r7, #184	; 0xb8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b40:	0800a10c 	.word	0x0800a10c
 8008b44:	0800a010 	.word	0x0800a010
 8008b48:	0800a7bc 	.word	0x0800a7bc
 8008b4c:	000ffc08 	.word	0x000ffc08
 8008b50:	7ffffc00 	.word	0x7ffffc00
 8008b54:	0800a7ec 	.word	0x0800a7ec
 8008b58:	0800a830 	.word	0x0800a830
 8008b5c:	600ffc08 	.word	0x600ffc08

08008b60 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff fdef 	bl	800874c <lfs_fs_demove>
 8008b6e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <lfs_fs_forceconsistency+0x1a>
        return err;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	e00a      	b.n	8008b90 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fe4b 	bl	8008818 <lfs_fs_deorphan>
 8008b82:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <lfs_fs_forceconsistency+0x2e>
        return err;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	e000      	b.n	8008b90 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	601a      	str	r2, [r3, #0]
    return 0;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8008bcc:	f107 0208 	add.w	r2, r7, #8
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4907      	ldr	r1, [pc, #28]	; (8008bf0 <lfs_fs_rawsize+0x30>)
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fb41 	bl	800825c <lfs_fs_rawtraverse>
 8008bda:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <lfs_fs_rawsize+0x26>
        return err;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	e000      	b.n	8008be8 <lfs_fs_rawsize+0x28>
    }

    return size;
 8008be6:	68bb      	ldr	r3, [r7, #8]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	08008b99 	.word	0x08008b99

08008bf4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <lfs_format+0x18>
        return err;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e005      	b.n	8008c18 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff f8cc 	bl	8007dac <lfs_rawformat>
 8008c14:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008c16:	68fb      	ldr	r3, [r7, #12]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <lfs_mount+0x18>
        return err;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e005      	b.n	8008c44 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff f956 	bl	8007eec <lfs_rawmount>
 8008c40:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <lfs_unmount+0x16>
        return err;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	e004      	b.n	8008c6c <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff faee 	bl	8008244 <lfs_rawunmount>
 8008c68:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
    if (err) {
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <lfs_file_open+0x1c>
        return err;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	e01a      	b.n	8008cc6 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	68b9      	ldr	r1, [r7, #8]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fa fc4a 	bl	8003530 <lfs_mlist_isopen>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f083 0301 	eor.w	r3, r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <lfs_file_open+0x42>
 8008ca8:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <lfs_file_open+0x5c>)
 8008caa:	4a0a      	ldr	r2, [pc, #40]	; (8008cd4 <lfs_file_open+0x60>)
 8008cac:	f241 5166 	movw	r1, #5478	; 0x1566
 8008cb0:	4809      	ldr	r0, [pc, #36]	; (8008cd8 <lfs_file_open+0x64>)
 8008cb2:	f000 f8f3 	bl	8008e9c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7fe f893 	bl	8006de8 <lfs_file_rawopen>
 8008cc2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008cc4:	697b      	ldr	r3, [r7, #20]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800a878 	.word	0x0800a878
 8008cd4:	0800aa20 	.word	0x0800aa20
 8008cd8:	0800a010 	.word	0x0800a010

08008cdc <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <lfs_file_close+0x18>
        return err;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e015      	b.n	8008d20 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fa fc18 	bl	8003530 <lfs_mlist_isopen>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <lfs_file_close+0x38>
 8008d06:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <lfs_file_close+0x4c>)
 8008d08:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <lfs_file_close+0x50>)
 8008d0a:	f241 518a 	movw	r1, #5514	; 0x158a
 8008d0e:	4808      	ldr	r0, [pc, #32]	; (8008d30 <lfs_file_close+0x54>)
 8008d10:	f000 f8c4 	bl	8008e9c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe f87e 	bl	8006e18 <lfs_file_rawclose>
 8008d1c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	0800a8b0 	.word	0x0800a8b0
 8008d2c:	0800aa30 	.word	0x0800aa30
 8008d30:	0800a010 	.word	0x0800a010

08008d34 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
    if (err) {
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <lfs_file_read+0x1c>
        return err;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	e017      	b.n	8008d80 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fa fbea 	bl	8003530 <lfs_mlist_isopen>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d106      	bne.n	8008d70 <lfs_file_read+0x3c>
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <lfs_file_read+0x54>)
 8008d64:	4a09      	ldr	r2, [pc, #36]	; (8008d8c <lfs_file_read+0x58>)
 8008d66:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008d6a:	4809      	ldr	r0, [pc, #36]	; (8008d90 <lfs_file_read+0x5c>)
 8008d6c:	f000 f896 	bl	8008e9c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7fe fb9a 	bl	80074b0 <lfs_file_rawread>
 8008d7c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008d7e:	693b      	ldr	r3, [r7, #16]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	0800a8b0 	.word	0x0800a8b0
 8008d8c:	0800aa40 	.word	0x0800aa40
 8008d90:	0800a010 	.word	0x0800a010

08008d94 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
    if (err) {
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <lfs_file_write+0x1c>
        return err;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	e017      	b.n	8008de0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fa fbba 	bl	8003530 <lfs_mlist_isopen>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <lfs_file_write+0x3c>
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <lfs_file_write+0x54>)
 8008dc4:	4a09      	ldr	r2, [pc, #36]	; (8008dec <lfs_file_write+0x58>)
 8008dc6:	f241 51be 	movw	r1, #5566	; 0x15be
 8008dca:	4809      	ldr	r0, [pc, #36]	; (8008df0 <lfs_file_write+0x5c>)
 8008dcc:	f000 f866 	bl	8008e9c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7fe fcc8 	bl	800776c <lfs_file_rawwrite>
 8008ddc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008dde:	693b      	ldr	r3, [r7, #16]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	0800a8b0 	.word	0x0800a8b0
 8008dec:	0800aa50 	.word	0x0800aa50
 8008df0:	0800a010 	.word	0x0800a010

08008df4 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <lfs_file_rewind+0x18>
        return err;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	e005      	b.n	8008e18 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7fe fdb9 	bl	8007986 <lfs_file_rawrewind>
 8008e14:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008e16:	68fb      	ldr	r3, [r7, #12]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e024      	b.n	8008e80 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	091a      	lsrs	r2, r3, #4
 8008e3a:	6939      	ldr	r1, [r7, #16]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	440b      	add	r3, r1
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	4619      	mov	r1, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	404b      	eors	r3, r1
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	4912      	ldr	r1, [pc, #72]	; (8008e98 <lfs_crc+0x78>)
 8008e4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e52:	4053      	eors	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	091a      	lsrs	r2, r3, #4
 8008e5a:	6939      	ldr	r1, [r7, #16]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	440b      	add	r3, r1
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	404b      	eors	r3, r1
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	4909      	ldr	r1, [pc, #36]	; (8008e98 <lfs_crc+0x78>)
 8008e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e76:	4053      	eors	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3d6      	bcc.n	8008e36 <lfs_crc+0x16>
    }

    return crc;
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	0800aa60 	.word	0x0800aa60

08008e9c <__assert_func>:
 8008e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <__assert_func+0x2c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	68d8      	ldr	r0, [r3, #12]
 8008eaa:	b14c      	cbz	r4, 8008ec0 <__assert_func+0x24>
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <__assert_func+0x30>)
 8008eae:	9100      	str	r1, [sp, #0]
 8008eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eb4:	4906      	ldr	r1, [pc, #24]	; (8008ed0 <__assert_func+0x34>)
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	f000 f814 	bl	8008ee4 <fiprintf>
 8008ebc:	f000 fd74 	bl	80099a8 <abort>
 8008ec0:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <__assert_func+0x38>)
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	e7f3      	b.n	8008eae <__assert_func+0x12>
 8008ec6:	bf00      	nop
 8008ec8:	2000000c 	.word	0x2000000c
 8008ecc:	0800aaa0 	.word	0x0800aaa0
 8008ed0:	0800aaad 	.word	0x0800aaad
 8008ed4:	0800aadb 	.word	0x0800aadb

08008ed8 <__errno>:
 8008ed8:	4b01      	ldr	r3, [pc, #4]	; (8008ee0 <__errno+0x8>)
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	2000000c 	.word	0x2000000c

08008ee4 <fiprintf>:
 8008ee4:	b40e      	push	{r1, r2, r3}
 8008ee6:	b503      	push	{r0, r1, lr}
 8008ee8:	4601      	mov	r1, r0
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	4805      	ldr	r0, [pc, #20]	; (8008f04 <fiprintf+0x20>)
 8008eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef2:	6800      	ldr	r0, [r0, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	f000 f96b 	bl	80091d0 <_vfiprintf_r>
 8008efa:	b002      	add	sp, #8
 8008efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f00:	b003      	add	sp, #12
 8008f02:	4770      	bx	lr
 8008f04:	2000000c 	.word	0x2000000c

08008f08 <__libc_init_array>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4d0d      	ldr	r5, [pc, #52]	; (8008f40 <__libc_init_array+0x38>)
 8008f0c:	4c0d      	ldr	r4, [pc, #52]	; (8008f44 <__libc_init_array+0x3c>)
 8008f0e:	1b64      	subs	r4, r4, r5
 8008f10:	10a4      	asrs	r4, r4, #2
 8008f12:	2600      	movs	r6, #0
 8008f14:	42a6      	cmp	r6, r4
 8008f16:	d109      	bne.n	8008f2c <__libc_init_array+0x24>
 8008f18:	4d0b      	ldr	r5, [pc, #44]	; (8008f48 <__libc_init_array+0x40>)
 8008f1a:	4c0c      	ldr	r4, [pc, #48]	; (8008f4c <__libc_init_array+0x44>)
 8008f1c:	f001 f856 	bl	8009fcc <_init>
 8008f20:	1b64      	subs	r4, r4, r5
 8008f22:	10a4      	asrs	r4, r4, #2
 8008f24:	2600      	movs	r6, #0
 8008f26:	42a6      	cmp	r6, r4
 8008f28:	d105      	bne.n	8008f36 <__libc_init_array+0x2e>
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f30:	4798      	blx	r3
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7ee      	b.n	8008f14 <__libc_init_array+0xc>
 8008f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3a:	4798      	blx	r3
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	e7f2      	b.n	8008f26 <__libc_init_array+0x1e>
 8008f40:	0800ab7c 	.word	0x0800ab7c
 8008f44:	0800ab7c 	.word	0x0800ab7c
 8008f48:	0800ab7c 	.word	0x0800ab7c
 8008f4c:	0800ab80 	.word	0x0800ab80

08008f50 <malloc>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <malloc+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f000 b89d 	b.w	8009094 <_malloc_r>
 8008f5a:	bf00      	nop
 8008f5c:	2000000c 	.word	0x2000000c

08008f60 <free>:
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <free+0xc>)
 8008f62:	4601      	mov	r1, r0
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f000 b829 	b.w	8008fbc <_free_r>
 8008f6a:	bf00      	nop
 8008f6c:	2000000c 	.word	0x2000000c

08008f70 <memcmp>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	3901      	subs	r1, #1
 8008f74:	4402      	add	r2, r0
 8008f76:	4290      	cmp	r0, r2
 8008f78:	d101      	bne.n	8008f7e <memcmp+0xe>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	e005      	b.n	8008f8a <memcmp+0x1a>
 8008f7e:	7803      	ldrb	r3, [r0, #0]
 8008f80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d001      	beq.n	8008f8c <memcmp+0x1c>
 8008f88:	1b18      	subs	r0, r3, r4
 8008f8a:	bd10      	pop	{r4, pc}
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	e7f2      	b.n	8008f76 <memcmp+0x6>

08008f90 <memcpy>:
 8008f90:	440a      	add	r2, r1
 8008f92:	4291      	cmp	r1, r2
 8008f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f98:	d100      	bne.n	8008f9c <memcpy+0xc>
 8008f9a:	4770      	bx	lr
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa6:	4291      	cmp	r1, r2
 8008fa8:	d1f9      	bne.n	8008f9e <memcpy+0xe>
 8008faa:	bd10      	pop	{r4, pc}

08008fac <memset>:
 8008fac:	4402      	add	r2, r0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d100      	bne.n	8008fb6 <memset+0xa>
 8008fb4:	4770      	bx	lr
 8008fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fba:	e7f9      	b.n	8008fb0 <memset+0x4>

08008fbc <_free_r>:
 8008fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_free_r+0x90>
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	9001      	str	r0, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f1a1 0404 	sub.w	r4, r1, #4
 8008fce:	bfb8      	it	lt
 8008fd0:	18e4      	addlt	r4, r4, r3
 8008fd2:	f000 ff33 	bl	8009e3c <__malloc_lock>
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <_free_r+0x94>)
 8008fd8:	9801      	ldr	r0, [sp, #4]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x30>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	b003      	add	sp, #12
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	f000 bf2e 	b.w	8009e48 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x46>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x22>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x50>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x46>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x70>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x26>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x26>
 800902c:	d902      	bls.n	8009034 <_free_r+0x78>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x26>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x26>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	200002f4 	.word	0x200002f4

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0e      	ldr	r6, [pc, #56]	; (8009090 <sbrk_aligned+0x3c>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 fb92 	bl	8009788 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fb8d 	bl	8009788 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d00a      	beq.n	8009088 <sbrk_aligned+0x34>
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d007      	beq.n	800908c <sbrk_aligned+0x38>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4628      	mov	r0, r5
 8009080:	f000 fb82 	bl	8009788 <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d101      	bne.n	800908c <sbrk_aligned+0x38>
 8009088:	f04f 34ff 	mov.w	r4, #4294967295
 800908c:	4620      	mov	r0, r4
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	200002f8 	.word	0x200002f8

08009094 <_malloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	1ccd      	adds	r5, r1, #3
 800909a:	f025 0503 	bic.w	r5, r5, #3
 800909e:	3508      	adds	r5, #8
 80090a0:	2d0c      	cmp	r5, #12
 80090a2:	bf38      	it	cc
 80090a4:	250c      	movcc	r5, #12
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	4607      	mov	r7, r0
 80090aa:	db01      	blt.n	80090b0 <_malloc_r+0x1c>
 80090ac:	42a9      	cmp	r1, r5
 80090ae:	d905      	bls.n	80090bc <_malloc_r+0x28>
 80090b0:	230c      	movs	r3, #12
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	2600      	movs	r6, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	4e2e      	ldr	r6, [pc, #184]	; (8009178 <_malloc_r+0xe4>)
 80090be:	f000 febd 	bl	8009e3c <__malloc_lock>
 80090c2:	6833      	ldr	r3, [r6, #0]
 80090c4:	461c      	mov	r4, r3
 80090c6:	bb34      	cbnz	r4, 8009116 <_malloc_r+0x82>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7ff ffc2 	bl	8009054 <sbrk_aligned>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	4604      	mov	r4, r0
 80090d4:	d14d      	bne.n	8009172 <_malloc_r+0xde>
 80090d6:	6834      	ldr	r4, [r6, #0]
 80090d8:	4626      	mov	r6, r4
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d140      	bne.n	8009160 <_malloc_r+0xcc>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4638      	mov	r0, r7
 80090e4:	eb04 0803 	add.w	r8, r4, r3
 80090e8:	f000 fb4e 	bl	8009788 <_sbrk_r>
 80090ec:	4580      	cmp	r8, r0
 80090ee:	d13a      	bne.n	8009166 <_malloc_r+0xd2>
 80090f0:	6821      	ldr	r1, [r4, #0]
 80090f2:	3503      	adds	r5, #3
 80090f4:	1a6d      	subs	r5, r5, r1
 80090f6:	f025 0503 	bic.w	r5, r5, #3
 80090fa:	3508      	adds	r5, #8
 80090fc:	2d0c      	cmp	r5, #12
 80090fe:	bf38      	it	cc
 8009100:	250c      	movcc	r5, #12
 8009102:	4629      	mov	r1, r5
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff ffa5 	bl	8009054 <sbrk_aligned>
 800910a:	3001      	adds	r0, #1
 800910c:	d02b      	beq.n	8009166 <_malloc_r+0xd2>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	442b      	add	r3, r5
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e00e      	b.n	8009134 <_malloc_r+0xa0>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	1b52      	subs	r2, r2, r5
 800911a:	d41e      	bmi.n	800915a <_malloc_r+0xc6>
 800911c:	2a0b      	cmp	r2, #11
 800911e:	d916      	bls.n	800914e <_malloc_r+0xba>
 8009120:	1961      	adds	r1, r4, r5
 8009122:	42a3      	cmp	r3, r4
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	bf18      	it	ne
 8009128:	6059      	strne	r1, [r3, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	bf08      	it	eq
 800912e:	6031      	streq	r1, [r6, #0]
 8009130:	5162      	str	r2, [r4, r5]
 8009132:	604b      	str	r3, [r1, #4]
 8009134:	4638      	mov	r0, r7
 8009136:	f104 060b 	add.w	r6, r4, #11
 800913a:	f000 fe85 	bl	8009e48 <__malloc_unlock>
 800913e:	f026 0607 	bic.w	r6, r6, #7
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	1af2      	subs	r2, r6, r3
 8009146:	d0b6      	beq.n	80090b6 <_malloc_r+0x22>
 8009148:	1b9b      	subs	r3, r3, r6
 800914a:	50a3      	str	r3, [r4, r2]
 800914c:	e7b3      	b.n	80090b6 <_malloc_r+0x22>
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	42a3      	cmp	r3, r4
 8009152:	bf0c      	ite	eq
 8009154:	6032      	streq	r2, [r6, #0]
 8009156:	605a      	strne	r2, [r3, #4]
 8009158:	e7ec      	b.n	8009134 <_malloc_r+0xa0>
 800915a:	4623      	mov	r3, r4
 800915c:	6864      	ldr	r4, [r4, #4]
 800915e:	e7b2      	b.n	80090c6 <_malloc_r+0x32>
 8009160:	4634      	mov	r4, r6
 8009162:	6876      	ldr	r6, [r6, #4]
 8009164:	e7b9      	b.n	80090da <_malloc_r+0x46>
 8009166:	230c      	movs	r3, #12
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	4638      	mov	r0, r7
 800916c:	f000 fe6c 	bl	8009e48 <__malloc_unlock>
 8009170:	e7a1      	b.n	80090b6 <_malloc_r+0x22>
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	e7de      	b.n	8009134 <_malloc_r+0xa0>
 8009176:	bf00      	nop
 8009178:	200002f4 	.word	0x200002f4

0800917c <__sfputc_r>:
 800917c:	6893      	ldr	r3, [r2, #8]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	b410      	push	{r4}
 8009184:	6093      	str	r3, [r2, #8]
 8009186:	da08      	bge.n	800919a <__sfputc_r+0x1e>
 8009188:	6994      	ldr	r4, [r2, #24]
 800918a:	42a3      	cmp	r3, r4
 800918c:	db01      	blt.n	8009192 <__sfputc_r+0x16>
 800918e:	290a      	cmp	r1, #10
 8009190:	d103      	bne.n	800919a <__sfputc_r+0x1e>
 8009192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009196:	f000 bb35 	b.w	8009804 <__swbuf_r>
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	6010      	str	r0, [r2, #0]
 80091a0:	7019      	strb	r1, [r3, #0]
 80091a2:	4608      	mov	r0, r1
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <__sfputs_r>:
 80091aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	18d5      	adds	r5, r2, r3
 80091b4:	42ac      	cmp	r4, r5
 80091b6:	d101      	bne.n	80091bc <__sfputs_r+0x12>
 80091b8:	2000      	movs	r0, #0
 80091ba:	e007      	b.n	80091cc <__sfputs_r+0x22>
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	463a      	mov	r2, r7
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ffda 	bl	800917c <__sfputc_r>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d1f3      	bne.n	80091b4 <__sfputs_r+0xa>
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d0 <_vfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	460d      	mov	r5, r1
 80091d6:	b09d      	sub	sp, #116	; 0x74
 80091d8:	4614      	mov	r4, r2
 80091da:	4698      	mov	r8, r3
 80091dc:	4606      	mov	r6, r0
 80091de:	b118      	cbz	r0, 80091e8 <_vfiprintf_r+0x18>
 80091e0:	6983      	ldr	r3, [r0, #24]
 80091e2:	b90b      	cbnz	r3, 80091e8 <_vfiprintf_r+0x18>
 80091e4:	f000 fd12 	bl	8009c0c <__sinit>
 80091e8:	4b89      	ldr	r3, [pc, #548]	; (8009410 <_vfiprintf_r+0x240>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	d11b      	bne.n	8009226 <_vfiprintf_r+0x56>
 80091ee:	6875      	ldr	r5, [r6, #4]
 80091f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f2:	07d9      	lsls	r1, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fe:	f000 fda3 	bl	8009d48 <__retarget_lock_acquire_recursive>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	071b      	lsls	r3, r3, #28
 8009206:	d501      	bpl.n	800920c <_vfiprintf_r+0x3c>
 8009208:	692b      	ldr	r3, [r5, #16]
 800920a:	b9eb      	cbnz	r3, 8009248 <_vfiprintf_r+0x78>
 800920c:	4629      	mov	r1, r5
 800920e:	4630      	mov	r0, r6
 8009210:	f000 fb5c 	bl	80098cc <__swsetup_r>
 8009214:	b1c0      	cbz	r0, 8009248 <_vfiprintf_r+0x78>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07dc      	lsls	r4, r3, #31
 800921a:	d50e      	bpl.n	800923a <_vfiprintf_r+0x6a>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b01d      	add	sp, #116	; 0x74
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	4b7b      	ldr	r3, [pc, #492]	; (8009414 <_vfiprintf_r+0x244>)
 8009228:	429d      	cmp	r5, r3
 800922a:	d101      	bne.n	8009230 <_vfiprintf_r+0x60>
 800922c:	68b5      	ldr	r5, [r6, #8]
 800922e:	e7df      	b.n	80091f0 <_vfiprintf_r+0x20>
 8009230:	4b79      	ldr	r3, [pc, #484]	; (8009418 <_vfiprintf_r+0x248>)
 8009232:	429d      	cmp	r5, r3
 8009234:	bf08      	it	eq
 8009236:	68f5      	ldreq	r5, [r6, #12]
 8009238:	e7da      	b.n	80091f0 <_vfiprintf_r+0x20>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	0598      	lsls	r0, r3, #22
 800923e:	d4ed      	bmi.n	800921c <_vfiprintf_r+0x4c>
 8009240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009242:	f000 fd82 	bl	8009d4a <__retarget_lock_release_recursive>
 8009246:	e7e9      	b.n	800921c <_vfiprintf_r+0x4c>
 8009248:	2300      	movs	r3, #0
 800924a:	9309      	str	r3, [sp, #36]	; 0x24
 800924c:	2320      	movs	r3, #32
 800924e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009252:	f8cd 800c 	str.w	r8, [sp, #12]
 8009256:	2330      	movs	r3, #48	; 0x30
 8009258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800941c <_vfiprintf_r+0x24c>
 800925c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009260:	f04f 0901 	mov.w	r9, #1
 8009264:	4623      	mov	r3, r4
 8009266:	469a      	mov	sl, r3
 8009268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926c:	b10a      	cbz	r2, 8009272 <_vfiprintf_r+0xa2>
 800926e:	2a25      	cmp	r2, #37	; 0x25
 8009270:	d1f9      	bne.n	8009266 <_vfiprintf_r+0x96>
 8009272:	ebba 0b04 	subs.w	fp, sl, r4
 8009276:	d00b      	beq.n	8009290 <_vfiprintf_r+0xc0>
 8009278:	465b      	mov	r3, fp
 800927a:	4622      	mov	r2, r4
 800927c:	4629      	mov	r1, r5
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff93 	bl	80091aa <__sfputs_r>
 8009284:	3001      	adds	r0, #1
 8009286:	f000 80aa 	beq.w	80093de <_vfiprintf_r+0x20e>
 800928a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928c:	445a      	add	r2, fp
 800928e:	9209      	str	r2, [sp, #36]	; 0x24
 8009290:	f89a 3000 	ldrb.w	r3, [sl]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 80a2 	beq.w	80093de <_vfiprintf_r+0x20e>
 800929a:	2300      	movs	r3, #0
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a4:	f10a 0a01 	add.w	sl, sl, #1
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092b0:	931a      	str	r3, [sp, #104]	; 0x68
 80092b2:	4654      	mov	r4, sl
 80092b4:	2205      	movs	r2, #5
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	4858      	ldr	r0, [pc, #352]	; (800941c <_vfiprintf_r+0x24c>)
 80092bc:	f7f6 ffa0 	bl	8000200 <memchr>
 80092c0:	9a04      	ldr	r2, [sp, #16]
 80092c2:	b9d8      	cbnz	r0, 80092fc <_vfiprintf_r+0x12c>
 80092c4:	06d1      	lsls	r1, r2, #27
 80092c6:	bf44      	itt	mi
 80092c8:	2320      	movmi	r3, #32
 80092ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ce:	0713      	lsls	r3, r2, #28
 80092d0:	bf44      	itt	mi
 80092d2:	232b      	movmi	r3, #43	; 0x2b
 80092d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d8:	f89a 3000 	ldrb.w	r3, [sl]
 80092dc:	2b2a      	cmp	r3, #42	; 0x2a
 80092de:	d015      	beq.n	800930c <_vfiprintf_r+0x13c>
 80092e0:	9a07      	ldr	r2, [sp, #28]
 80092e2:	4654      	mov	r4, sl
 80092e4:	2000      	movs	r0, #0
 80092e6:	f04f 0c0a 	mov.w	ip, #10
 80092ea:	4621      	mov	r1, r4
 80092ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f0:	3b30      	subs	r3, #48	; 0x30
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d94e      	bls.n	8009394 <_vfiprintf_r+0x1c4>
 80092f6:	b1b0      	cbz	r0, 8009326 <_vfiprintf_r+0x156>
 80092f8:	9207      	str	r2, [sp, #28]
 80092fa:	e014      	b.n	8009326 <_vfiprintf_r+0x156>
 80092fc:	eba0 0308 	sub.w	r3, r0, r8
 8009300:	fa09 f303 	lsl.w	r3, r9, r3
 8009304:	4313      	orrs	r3, r2
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	46a2      	mov	sl, r4
 800930a:	e7d2      	b.n	80092b2 <_vfiprintf_r+0xe2>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d19      	adds	r1, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9103      	str	r1, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfbb      	ittet	lt
 8009318:	425b      	neglt	r3, r3
 800931a:	f042 0202 	orrlt.w	r2, r2, #2
 800931e:	9307      	strge	r3, [sp, #28]
 8009320:	9307      	strlt	r3, [sp, #28]
 8009322:	bfb8      	it	lt
 8009324:	9204      	strlt	r2, [sp, #16]
 8009326:	7823      	ldrb	r3, [r4, #0]
 8009328:	2b2e      	cmp	r3, #46	; 0x2e
 800932a:	d10c      	bne.n	8009346 <_vfiprintf_r+0x176>
 800932c:	7863      	ldrb	r3, [r4, #1]
 800932e:	2b2a      	cmp	r3, #42	; 0x2a
 8009330:	d135      	bne.n	800939e <_vfiprintf_r+0x1ce>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9203      	str	r2, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfb8      	it	lt
 800933e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009342:	3402      	adds	r4, #2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800942c <_vfiprintf_r+0x25c>
 800934a:	7821      	ldrb	r1, [r4, #0]
 800934c:	2203      	movs	r2, #3
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ff56 	bl	8000200 <memchr>
 8009354:	b140      	cbz	r0, 8009368 <_vfiprintf_r+0x198>
 8009356:	2340      	movs	r3, #64	; 0x40
 8009358:	eba0 000a 	sub.w	r0, r0, sl
 800935c:	fa03 f000 	lsl.w	r0, r3, r0
 8009360:	9b04      	ldr	r3, [sp, #16]
 8009362:	4303      	orrs	r3, r0
 8009364:	3401      	adds	r4, #1
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936c:	482c      	ldr	r0, [pc, #176]	; (8009420 <_vfiprintf_r+0x250>)
 800936e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009372:	2206      	movs	r2, #6
 8009374:	f7f6 ff44 	bl	8000200 <memchr>
 8009378:	2800      	cmp	r0, #0
 800937a:	d03f      	beq.n	80093fc <_vfiprintf_r+0x22c>
 800937c:	4b29      	ldr	r3, [pc, #164]	; (8009424 <_vfiprintf_r+0x254>)
 800937e:	bb1b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x1f8>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	3307      	adds	r3, #7
 8009384:	f023 0307 	bic.w	r3, r3, #7
 8009388:	3308      	adds	r3, #8
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	443b      	add	r3, r7
 8009390:	9309      	str	r3, [sp, #36]	; 0x24
 8009392:	e767      	b.n	8009264 <_vfiprintf_r+0x94>
 8009394:	fb0c 3202 	mla	r2, ip, r2, r3
 8009398:	460c      	mov	r4, r1
 800939a:	2001      	movs	r0, #1
 800939c:	e7a5      	b.n	80092ea <_vfiprintf_r+0x11a>
 800939e:	2300      	movs	r3, #0
 80093a0:	3401      	adds	r4, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f04f 0c0a 	mov.w	ip, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b0:	3a30      	subs	r2, #48	; 0x30
 80093b2:	2a09      	cmp	r2, #9
 80093b4:	d903      	bls.n	80093be <_vfiprintf_r+0x1ee>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0c5      	beq.n	8009346 <_vfiprintf_r+0x176>
 80093ba:	9105      	str	r1, [sp, #20]
 80093bc:	e7c3      	b.n	8009346 <_vfiprintf_r+0x176>
 80093be:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c2:	4604      	mov	r4, r0
 80093c4:	2301      	movs	r3, #1
 80093c6:	e7f0      	b.n	80093aa <_vfiprintf_r+0x1da>
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	462a      	mov	r2, r5
 80093ce:	4b16      	ldr	r3, [pc, #88]	; (8009428 <_vfiprintf_r+0x258>)
 80093d0:	a904      	add	r1, sp, #16
 80093d2:	4630      	mov	r0, r6
 80093d4:	f3af 8000 	nop.w
 80093d8:	4607      	mov	r7, r0
 80093da:	1c78      	adds	r0, r7, #1
 80093dc:	d1d6      	bne.n	800938c <_vfiprintf_r+0x1bc>
 80093de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e0:	07d9      	lsls	r1, r3, #31
 80093e2:	d405      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093e4:	89ab      	ldrh	r3, [r5, #12]
 80093e6:	059a      	lsls	r2, r3, #22
 80093e8:	d402      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ec:	f000 fcad 	bl	8009d4a <__retarget_lock_release_recursive>
 80093f0:	89ab      	ldrh	r3, [r5, #12]
 80093f2:	065b      	lsls	r3, r3, #25
 80093f4:	f53f af12 	bmi.w	800921c <_vfiprintf_r+0x4c>
 80093f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fa:	e711      	b.n	8009220 <_vfiprintf_r+0x50>
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	462a      	mov	r2, r5
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <_vfiprintf_r+0x258>)
 8009404:	a904      	add	r1, sp, #16
 8009406:	4630      	mov	r0, r6
 8009408:	f000 f880 	bl	800950c <_printf_i>
 800940c:	e7e4      	b.n	80093d8 <_vfiprintf_r+0x208>
 800940e:	bf00      	nop
 8009410:	0800ab34 	.word	0x0800ab34
 8009414:	0800ab54 	.word	0x0800ab54
 8009418:	0800ab14 	.word	0x0800ab14
 800941c:	0800aae0 	.word	0x0800aae0
 8009420:	0800aaea 	.word	0x0800aaea
 8009424:	00000000 	.word	0x00000000
 8009428:	080091ab 	.word	0x080091ab
 800942c:	0800aae6 	.word	0x0800aae6

08009430 <_printf_common>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	4699      	mov	r9, r3
 8009438:	688a      	ldr	r2, [r1, #8]
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009440:	4293      	cmp	r3, r2
 8009442:	bfb8      	it	lt
 8009444:	4613      	movlt	r3, r2
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944c:	4607      	mov	r7, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b10a      	cbz	r2, 8009456 <_printf_common+0x26>
 8009452:	3301      	adds	r3, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	6833      	ldrmi	r3, [r6, #0]
 800945e:	3302      	addmi	r3, #2
 8009460:	6033      	strmi	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	f015 0506 	ands.w	r5, r5, #6
 8009468:	d106      	bne.n	8009478 <_printf_common+0x48>
 800946a:	f104 0a19 	add.w	sl, r4, #25
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc26      	bgt.n	80094c6 <_printf_common+0x96>
 8009478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800947c:	1e13      	subs	r3, r2, #0
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	2301      	movne	r3, #1
 8009484:	0692      	lsls	r2, r2, #26
 8009486:	d42b      	bmi.n	80094e0 <_printf_common+0xb0>
 8009488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800948c:	4649      	mov	r1, r9
 800948e:	4638      	mov	r0, r7
 8009490:	47c0      	blx	r8
 8009492:	3001      	adds	r0, #1
 8009494:	d01e      	beq.n	80094d4 <_printf_common+0xa4>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	68e5      	ldr	r5, [r4, #12]
 800949a:	6832      	ldr	r2, [r6, #0]
 800949c:	f003 0306 	and.w	r3, r3, #6
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	bf08      	it	eq
 80094a4:	1aad      	subeq	r5, r5, r2
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	6922      	ldr	r2, [r4, #16]
 80094aa:	bf0c      	ite	eq
 80094ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b0:	2500      	movne	r5, #0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bfc4      	itt	gt
 80094b6:	1a9b      	subgt	r3, r3, r2
 80094b8:	18ed      	addgt	r5, r5, r3
 80094ba:	2600      	movs	r6, #0
 80094bc:	341a      	adds	r4, #26
 80094be:	42b5      	cmp	r5, r6
 80094c0:	d11a      	bne.n	80094f8 <_printf_common+0xc8>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e008      	b.n	80094d8 <_printf_common+0xa8>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4649      	mov	r1, r9
 80094cc:	4638      	mov	r0, r7
 80094ce:	47c0      	blx	r8
 80094d0:	3001      	adds	r0, #1
 80094d2:	d103      	bne.n	80094dc <_printf_common+0xac>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094dc:	3501      	adds	r5, #1
 80094de:	e7c6      	b.n	800946e <_printf_common+0x3e>
 80094e0:	18e1      	adds	r1, r4, r3
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	2030      	movs	r0, #48	; 0x30
 80094e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ea:	4422      	add	r2, r4
 80094ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094f4:	3302      	adds	r3, #2
 80094f6:	e7c7      	b.n	8009488 <_printf_common+0x58>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4622      	mov	r2, r4
 80094fc:	4649      	mov	r1, r9
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d0e6      	beq.n	80094d4 <_printf_common+0xa4>
 8009506:	3601      	adds	r6, #1
 8009508:	e7d9      	b.n	80094be <_printf_common+0x8e>
	...

0800950c <_printf_i>:
 800950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	7e0f      	ldrb	r7, [r1, #24]
 8009512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009514:	2f78      	cmp	r7, #120	; 0x78
 8009516:	4691      	mov	r9, r2
 8009518:	4680      	mov	r8, r0
 800951a:	460c      	mov	r4, r1
 800951c:	469a      	mov	sl, r3
 800951e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009522:	d807      	bhi.n	8009534 <_printf_i+0x28>
 8009524:	2f62      	cmp	r7, #98	; 0x62
 8009526:	d80a      	bhi.n	800953e <_printf_i+0x32>
 8009528:	2f00      	cmp	r7, #0
 800952a:	f000 80d8 	beq.w	80096de <_printf_i+0x1d2>
 800952e:	2f58      	cmp	r7, #88	; 0x58
 8009530:	f000 80a3 	beq.w	800967a <_printf_i+0x16e>
 8009534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800953c:	e03a      	b.n	80095b4 <_printf_i+0xa8>
 800953e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009542:	2b15      	cmp	r3, #21
 8009544:	d8f6      	bhi.n	8009534 <_printf_i+0x28>
 8009546:	a101      	add	r1, pc, #4	; (adr r1, 800954c <_printf_i+0x40>)
 8009548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800954c:	080095a5 	.word	0x080095a5
 8009550:	080095b9 	.word	0x080095b9
 8009554:	08009535 	.word	0x08009535
 8009558:	08009535 	.word	0x08009535
 800955c:	08009535 	.word	0x08009535
 8009560:	08009535 	.word	0x08009535
 8009564:	080095b9 	.word	0x080095b9
 8009568:	08009535 	.word	0x08009535
 800956c:	08009535 	.word	0x08009535
 8009570:	08009535 	.word	0x08009535
 8009574:	08009535 	.word	0x08009535
 8009578:	080096c5 	.word	0x080096c5
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080096a7 	.word	0x080096a7
 8009584:	08009535 	.word	0x08009535
 8009588:	08009535 	.word	0x08009535
 800958c:	080096e7 	.word	0x080096e7
 8009590:	08009535 	.word	0x08009535
 8009594:	080095e9 	.word	0x080095e9
 8009598:	08009535 	.word	0x08009535
 800959c:	08009535 	.word	0x08009535
 80095a0:	080096af 	.word	0x080096af
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	602a      	str	r2, [r5, #0]
 80095ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0a3      	b.n	8009700 <_printf_i+0x1f4>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	6829      	ldr	r1, [r5, #0]
 80095bc:	0606      	lsls	r6, r0, #24
 80095be:	f101 0304 	add.w	r3, r1, #4
 80095c2:	d50a      	bpl.n	80095da <_printf_i+0xce>
 80095c4:	680e      	ldr	r6, [r1, #0]
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	da03      	bge.n	80095d4 <_printf_i+0xc8>
 80095cc:	232d      	movs	r3, #45	; 0x2d
 80095ce:	4276      	negs	r6, r6
 80095d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d4:	485e      	ldr	r0, [pc, #376]	; (8009750 <_printf_i+0x244>)
 80095d6:	230a      	movs	r3, #10
 80095d8:	e019      	b.n	800960e <_printf_i+0x102>
 80095da:	680e      	ldr	r6, [r1, #0]
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095e2:	bf18      	it	ne
 80095e4:	b236      	sxthne	r6, r6
 80095e6:	e7ef      	b.n	80095c8 <_printf_i+0xbc>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	6029      	str	r1, [r5, #0]
 80095f0:	0601      	lsls	r1, r0, #24
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0xec>
 80095f4:	681e      	ldr	r6, [r3, #0]
 80095f6:	e002      	b.n	80095fe <_printf_i+0xf2>
 80095f8:	0646      	lsls	r6, r0, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0xe8>
 80095fc:	881e      	ldrh	r6, [r3, #0]
 80095fe:	4854      	ldr	r0, [pc, #336]	; (8009750 <_printf_i+0x244>)
 8009600:	2f6f      	cmp	r7, #111	; 0x6f
 8009602:	bf0c      	ite	eq
 8009604:	2308      	moveq	r3, #8
 8009606:	230a      	movne	r3, #10
 8009608:	2100      	movs	r1, #0
 800960a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800960e:	6865      	ldr	r5, [r4, #4]
 8009610:	60a5      	str	r5, [r4, #8]
 8009612:	2d00      	cmp	r5, #0
 8009614:	bfa2      	ittt	ge
 8009616:	6821      	ldrge	r1, [r4, #0]
 8009618:	f021 0104 	bicge.w	r1, r1, #4
 800961c:	6021      	strge	r1, [r4, #0]
 800961e:	b90e      	cbnz	r6, 8009624 <_printf_i+0x118>
 8009620:	2d00      	cmp	r5, #0
 8009622:	d04d      	beq.n	80096c0 <_printf_i+0x1b4>
 8009624:	4615      	mov	r5, r2
 8009626:	fbb6 f1f3 	udiv	r1, r6, r3
 800962a:	fb03 6711 	mls	r7, r3, r1, r6
 800962e:	5dc7      	ldrb	r7, [r0, r7]
 8009630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009634:	4637      	mov	r7, r6
 8009636:	42bb      	cmp	r3, r7
 8009638:	460e      	mov	r6, r1
 800963a:	d9f4      	bls.n	8009626 <_printf_i+0x11a>
 800963c:	2b08      	cmp	r3, #8
 800963e:	d10b      	bne.n	8009658 <_printf_i+0x14c>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	07de      	lsls	r6, r3, #31
 8009644:	d508      	bpl.n	8009658 <_printf_i+0x14c>
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	6861      	ldr	r1, [r4, #4]
 800964a:	4299      	cmp	r1, r3
 800964c:	bfde      	ittt	le
 800964e:	2330      	movle	r3, #48	; 0x30
 8009650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009658:	1b52      	subs	r2, r2, r5
 800965a:	6122      	str	r2, [r4, #16]
 800965c:	f8cd a000 	str.w	sl, [sp]
 8009660:	464b      	mov	r3, r9
 8009662:	aa03      	add	r2, sp, #12
 8009664:	4621      	mov	r1, r4
 8009666:	4640      	mov	r0, r8
 8009668:	f7ff fee2 	bl	8009430 <_printf_common>
 800966c:	3001      	adds	r0, #1
 800966e:	d14c      	bne.n	800970a <_printf_i+0x1fe>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b004      	add	sp, #16
 8009676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967a:	4835      	ldr	r0, [pc, #212]	; (8009750 <_printf_i+0x244>)
 800967c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009680:	6829      	ldr	r1, [r5, #0]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f851 6b04 	ldr.w	r6, [r1], #4
 8009688:	6029      	str	r1, [r5, #0]
 800968a:	061d      	lsls	r5, r3, #24
 800968c:	d514      	bpl.n	80096b8 <_printf_i+0x1ac>
 800968e:	07df      	lsls	r7, r3, #31
 8009690:	bf44      	itt	mi
 8009692:	f043 0320 	orrmi.w	r3, r3, #32
 8009696:	6023      	strmi	r3, [r4, #0]
 8009698:	b91e      	cbnz	r6, 80096a2 <_printf_i+0x196>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f023 0320 	bic.w	r3, r3, #32
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	2310      	movs	r3, #16
 80096a4:	e7b0      	b.n	8009608 <_printf_i+0xfc>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	f043 0320 	orr.w	r3, r3, #32
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	2378      	movs	r3, #120	; 0x78
 80096b0:	4828      	ldr	r0, [pc, #160]	; (8009754 <_printf_i+0x248>)
 80096b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096b6:	e7e3      	b.n	8009680 <_printf_i+0x174>
 80096b8:	0659      	lsls	r1, r3, #25
 80096ba:	bf48      	it	mi
 80096bc:	b2b6      	uxthmi	r6, r6
 80096be:	e7e6      	b.n	800968e <_printf_i+0x182>
 80096c0:	4615      	mov	r5, r2
 80096c2:	e7bb      	b.n	800963c <_printf_i+0x130>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	6826      	ldr	r6, [r4, #0]
 80096c8:	6961      	ldr	r1, [r4, #20]
 80096ca:	1d18      	adds	r0, r3, #4
 80096cc:	6028      	str	r0, [r5, #0]
 80096ce:	0635      	lsls	r5, r6, #24
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	d501      	bpl.n	80096d8 <_printf_i+0x1cc>
 80096d4:	6019      	str	r1, [r3, #0]
 80096d6:	e002      	b.n	80096de <_printf_i+0x1d2>
 80096d8:	0670      	lsls	r0, r6, #25
 80096da:	d5fb      	bpl.n	80096d4 <_printf_i+0x1c8>
 80096dc:	8019      	strh	r1, [r3, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	4615      	mov	r5, r2
 80096e4:	e7ba      	b.n	800965c <_printf_i+0x150>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	602a      	str	r2, [r5, #0]
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	6862      	ldr	r2, [r4, #4]
 80096f0:	2100      	movs	r1, #0
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7f6 fd84 	bl	8000200 <memchr>
 80096f8:	b108      	cbz	r0, 80096fe <_printf_i+0x1f2>
 80096fa:	1b40      	subs	r0, r0, r5
 80096fc:	6060      	str	r0, [r4, #4]
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	6123      	str	r3, [r4, #16]
 8009702:	2300      	movs	r3, #0
 8009704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009708:	e7a8      	b.n	800965c <_printf_i+0x150>
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	462a      	mov	r2, r5
 800970e:	4649      	mov	r1, r9
 8009710:	4640      	mov	r0, r8
 8009712:	47d0      	blx	sl
 8009714:	3001      	adds	r0, #1
 8009716:	d0ab      	beq.n	8009670 <_printf_i+0x164>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	079b      	lsls	r3, r3, #30
 800971c:	d413      	bmi.n	8009746 <_printf_i+0x23a>
 800971e:	68e0      	ldr	r0, [r4, #12]
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	4298      	cmp	r0, r3
 8009724:	bfb8      	it	lt
 8009726:	4618      	movlt	r0, r3
 8009728:	e7a4      	b.n	8009674 <_printf_i+0x168>
 800972a:	2301      	movs	r3, #1
 800972c:	4632      	mov	r2, r6
 800972e:	4649      	mov	r1, r9
 8009730:	4640      	mov	r0, r8
 8009732:	47d0      	blx	sl
 8009734:	3001      	adds	r0, #1
 8009736:	d09b      	beq.n	8009670 <_printf_i+0x164>
 8009738:	3501      	adds	r5, #1
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	9903      	ldr	r1, [sp, #12]
 800973e:	1a5b      	subs	r3, r3, r1
 8009740:	42ab      	cmp	r3, r5
 8009742:	dcf2      	bgt.n	800972a <_printf_i+0x21e>
 8009744:	e7eb      	b.n	800971e <_printf_i+0x212>
 8009746:	2500      	movs	r5, #0
 8009748:	f104 0619 	add.w	r6, r4, #25
 800974c:	e7f5      	b.n	800973a <_printf_i+0x22e>
 800974e:	bf00      	nop
 8009750:	0800aaf1 	.word	0x0800aaf1
 8009754:	0800ab02 	.word	0x0800ab02

08009758 <iprintf>:
 8009758:	b40f      	push	{r0, r1, r2, r3}
 800975a:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <iprintf+0x2c>)
 800975c:	b513      	push	{r0, r1, r4, lr}
 800975e:	681c      	ldr	r4, [r3, #0]
 8009760:	b124      	cbz	r4, 800976c <iprintf+0x14>
 8009762:	69a3      	ldr	r3, [r4, #24]
 8009764:	b913      	cbnz	r3, 800976c <iprintf+0x14>
 8009766:	4620      	mov	r0, r4
 8009768:	f000 fa50 	bl	8009c0c <__sinit>
 800976c:	ab05      	add	r3, sp, #20
 800976e:	9a04      	ldr	r2, [sp, #16]
 8009770:	68a1      	ldr	r1, [r4, #8]
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff fd2b 	bl	80091d0 <_vfiprintf_r>
 800977a:	b002      	add	sp, #8
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	b004      	add	sp, #16
 8009782:	4770      	bx	lr
 8009784:	2000000c 	.word	0x2000000c

08009788 <_sbrk_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d06      	ldr	r5, [pc, #24]	; (80097a4 <_sbrk_r+0x1c>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f7 fc18 	bl	8000fc8 <_sbrk>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_sbrk_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_sbrk_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	20000300 	.word	0x20000300

080097a8 <strchr>:
 80097a8:	b2c9      	uxtb	r1, r1
 80097aa:	4603      	mov	r3, r0
 80097ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b0:	b11a      	cbz	r2, 80097ba <strchr+0x12>
 80097b2:	428a      	cmp	r2, r1
 80097b4:	d1f9      	bne.n	80097aa <strchr+0x2>
 80097b6:	4618      	mov	r0, r3
 80097b8:	4770      	bx	lr
 80097ba:	2900      	cmp	r1, #0
 80097bc:	bf18      	it	ne
 80097be:	2300      	movne	r3, #0
 80097c0:	e7f9      	b.n	80097b6 <strchr+0xe>

080097c2 <strcspn>:
 80097c2:	b570      	push	{r4, r5, r6, lr}
 80097c4:	4603      	mov	r3, r0
 80097c6:	461e      	mov	r6, r3
 80097c8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80097cc:	b144      	cbz	r4, 80097e0 <strcspn+0x1e>
 80097ce:	1e4a      	subs	r2, r1, #1
 80097d0:	e001      	b.n	80097d6 <strcspn+0x14>
 80097d2:	42a5      	cmp	r5, r4
 80097d4:	d004      	beq.n	80097e0 <strcspn+0x1e>
 80097d6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80097da:	2d00      	cmp	r5, #0
 80097dc:	d1f9      	bne.n	80097d2 <strcspn+0x10>
 80097de:	e7f2      	b.n	80097c6 <strcspn+0x4>
 80097e0:	1a30      	subs	r0, r6, r0
 80097e2:	bd70      	pop	{r4, r5, r6, pc}

080097e4 <strspn>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4603      	mov	r3, r0
 80097e8:	461e      	mov	r6, r3
 80097ea:	f813 4b01 	ldrb.w	r4, [r3], #1
 80097ee:	b13c      	cbz	r4, 8009800 <strspn+0x1c>
 80097f0:	1e4a      	subs	r2, r1, #1
 80097f2:	e001      	b.n	80097f8 <strspn+0x14>
 80097f4:	42a5      	cmp	r5, r4
 80097f6:	d0f7      	beq.n	80097e8 <strspn+0x4>
 80097f8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	d1f9      	bne.n	80097f4 <strspn+0x10>
 8009800:	1a30      	subs	r0, r6, r0
 8009802:	bd70      	pop	{r4, r5, r6, pc}

08009804 <__swbuf_r>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	460e      	mov	r6, r1
 8009808:	4614      	mov	r4, r2
 800980a:	4605      	mov	r5, r0
 800980c:	b118      	cbz	r0, 8009816 <__swbuf_r+0x12>
 800980e:	6983      	ldr	r3, [r0, #24]
 8009810:	b90b      	cbnz	r3, 8009816 <__swbuf_r+0x12>
 8009812:	f000 f9fb 	bl	8009c0c <__sinit>
 8009816:	4b21      	ldr	r3, [pc, #132]	; (800989c <__swbuf_r+0x98>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d12b      	bne.n	8009874 <__swbuf_r+0x70>
 800981c:	686c      	ldr	r4, [r5, #4]
 800981e:	69a3      	ldr	r3, [r4, #24]
 8009820:	60a3      	str	r3, [r4, #8]
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	071a      	lsls	r2, r3, #28
 8009826:	d52f      	bpl.n	8009888 <__swbuf_r+0x84>
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	b36b      	cbz	r3, 8009888 <__swbuf_r+0x84>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	1ac0      	subs	r0, r0, r3
 8009832:	6963      	ldr	r3, [r4, #20]
 8009834:	b2f6      	uxtb	r6, r6
 8009836:	4283      	cmp	r3, r0
 8009838:	4637      	mov	r7, r6
 800983a:	dc04      	bgt.n	8009846 <__swbuf_r+0x42>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f950 	bl	8009ae4 <_fflush_r>
 8009844:	bb30      	cbnz	r0, 8009894 <__swbuf_r+0x90>
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	3b01      	subs	r3, #1
 800984a:	60a3      	str	r3, [r4, #8]
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	6022      	str	r2, [r4, #0]
 8009852:	701e      	strb	r6, [r3, #0]
 8009854:	6963      	ldr	r3, [r4, #20]
 8009856:	3001      	adds	r0, #1
 8009858:	4283      	cmp	r3, r0
 800985a:	d004      	beq.n	8009866 <__swbuf_r+0x62>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	07db      	lsls	r3, r3, #31
 8009860:	d506      	bpl.n	8009870 <__swbuf_r+0x6c>
 8009862:	2e0a      	cmp	r6, #10
 8009864:	d104      	bne.n	8009870 <__swbuf_r+0x6c>
 8009866:	4621      	mov	r1, r4
 8009868:	4628      	mov	r0, r5
 800986a:	f000 f93b 	bl	8009ae4 <_fflush_r>
 800986e:	b988      	cbnz	r0, 8009894 <__swbuf_r+0x90>
 8009870:	4638      	mov	r0, r7
 8009872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <__swbuf_r+0x9c>)
 8009876:	429c      	cmp	r4, r3
 8009878:	d101      	bne.n	800987e <__swbuf_r+0x7a>
 800987a:	68ac      	ldr	r4, [r5, #8]
 800987c:	e7cf      	b.n	800981e <__swbuf_r+0x1a>
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <__swbuf_r+0xa0>)
 8009880:	429c      	cmp	r4, r3
 8009882:	bf08      	it	eq
 8009884:	68ec      	ldreq	r4, [r5, #12]
 8009886:	e7ca      	b.n	800981e <__swbuf_r+0x1a>
 8009888:	4621      	mov	r1, r4
 800988a:	4628      	mov	r0, r5
 800988c:	f000 f81e 	bl	80098cc <__swsetup_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	d0cb      	beq.n	800982c <__swbuf_r+0x28>
 8009894:	f04f 37ff 	mov.w	r7, #4294967295
 8009898:	e7ea      	b.n	8009870 <__swbuf_r+0x6c>
 800989a:	bf00      	nop
 800989c:	0800ab34 	.word	0x0800ab34
 80098a0:	0800ab54 	.word	0x0800ab54
 80098a4:	0800ab14 	.word	0x0800ab14

080098a8 <_write_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	; (80098c8 <_write_r+0x20>)
 80098ac:	4604      	mov	r4, r0
 80098ae:	4608      	mov	r0, r1
 80098b0:	4611      	mov	r1, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	602a      	str	r2, [r5, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f7f7 fb35 	bl	8000f26 <_write>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_write_r+0x1e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_write_r+0x1e>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20000300 	.word	0x20000300

080098cc <__swsetup_r>:
 80098cc:	4b32      	ldr	r3, [pc, #200]	; (8009998 <__swsetup_r+0xcc>)
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	681d      	ldr	r5, [r3, #0]
 80098d2:	4606      	mov	r6, r0
 80098d4:	460c      	mov	r4, r1
 80098d6:	b125      	cbz	r5, 80098e2 <__swsetup_r+0x16>
 80098d8:	69ab      	ldr	r3, [r5, #24]
 80098da:	b913      	cbnz	r3, 80098e2 <__swsetup_r+0x16>
 80098dc:	4628      	mov	r0, r5
 80098de:	f000 f995 	bl	8009c0c <__sinit>
 80098e2:	4b2e      	ldr	r3, [pc, #184]	; (800999c <__swsetup_r+0xd0>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d10f      	bne.n	8009908 <__swsetup_r+0x3c>
 80098e8:	686c      	ldr	r4, [r5, #4]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	d42c      	bmi.n	800994e <__swsetup_r+0x82>
 80098f4:	06dd      	lsls	r5, r3, #27
 80098f6:	d411      	bmi.n	800991c <__swsetup_r+0x50>
 80098f8:	2309      	movs	r3, #9
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e03e      	b.n	8009986 <__swsetup_r+0xba>
 8009908:	4b25      	ldr	r3, [pc, #148]	; (80099a0 <__swsetup_r+0xd4>)
 800990a:	429c      	cmp	r4, r3
 800990c:	d101      	bne.n	8009912 <__swsetup_r+0x46>
 800990e:	68ac      	ldr	r4, [r5, #8]
 8009910:	e7eb      	b.n	80098ea <__swsetup_r+0x1e>
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <__swsetup_r+0xd8>)
 8009914:	429c      	cmp	r4, r3
 8009916:	bf08      	it	eq
 8009918:	68ec      	ldreq	r4, [r5, #12]
 800991a:	e7e6      	b.n	80098ea <__swsetup_r+0x1e>
 800991c:	0758      	lsls	r0, r3, #29
 800991e:	d512      	bpl.n	8009946 <__swsetup_r+0x7a>
 8009920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009922:	b141      	cbz	r1, 8009936 <__swsetup_r+0x6a>
 8009924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009928:	4299      	cmp	r1, r3
 800992a:	d002      	beq.n	8009932 <__swsetup_r+0x66>
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff fb45 	bl	8008fbc <_free_r>
 8009932:	2300      	movs	r3, #0
 8009934:	6363      	str	r3, [r4, #52]	; 0x34
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	2300      	movs	r3, #0
 8009940:	6063      	str	r3, [r4, #4]
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f043 0308 	orr.w	r3, r3, #8
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	b94b      	cbnz	r3, 8009966 <__swsetup_r+0x9a>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800995c:	d003      	beq.n	8009966 <__swsetup_r+0x9a>
 800995e:	4621      	mov	r1, r4
 8009960:	4630      	mov	r0, r6
 8009962:	f000 fa2b 	bl	8009dbc <__smakebuf_r>
 8009966:	89a0      	ldrh	r0, [r4, #12]
 8009968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800996c:	f010 0301 	ands.w	r3, r0, #1
 8009970:	d00a      	beq.n	8009988 <__swsetup_r+0xbc>
 8009972:	2300      	movs	r3, #0
 8009974:	60a3      	str	r3, [r4, #8]
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	425b      	negs	r3, r3
 800997a:	61a3      	str	r3, [r4, #24]
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	b943      	cbnz	r3, 8009992 <__swsetup_r+0xc6>
 8009980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009984:	d1ba      	bne.n	80098fc <__swsetup_r+0x30>
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	0781      	lsls	r1, r0, #30
 800998a:	bf58      	it	pl
 800998c:	6963      	ldrpl	r3, [r4, #20]
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	e7f4      	b.n	800997c <__swsetup_r+0xb0>
 8009992:	2000      	movs	r0, #0
 8009994:	e7f7      	b.n	8009986 <__swsetup_r+0xba>
 8009996:	bf00      	nop
 8009998:	2000000c 	.word	0x2000000c
 800999c:	0800ab34 	.word	0x0800ab34
 80099a0:	0800ab54 	.word	0x0800ab54
 80099a4:	0800ab14 	.word	0x0800ab14

080099a8 <abort>:
 80099a8:	b508      	push	{r3, lr}
 80099aa:	2006      	movs	r0, #6
 80099ac:	f000 fa8c 	bl	8009ec8 <raise>
 80099b0:	2001      	movs	r0, #1
 80099b2:	f7f7 fa91 	bl	8000ed8 <_exit>
	...

080099b8 <_close_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	; (80099d4 <_close_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7f7 facb 	bl	8000f5e <_close>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_close_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_close_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000300 	.word	0x20000300

080099d8 <__sflush_r>:
 80099d8:	898a      	ldrh	r2, [r1, #12]
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	0710      	lsls	r0, r2, #28
 80099e2:	460c      	mov	r4, r1
 80099e4:	d458      	bmi.n	8009a98 <__sflush_r+0xc0>
 80099e6:	684b      	ldr	r3, [r1, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc05      	bgt.n	80099f8 <__sflush_r+0x20>
 80099ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dc02      	bgt.n	80099f8 <__sflush_r+0x20>
 80099f2:	2000      	movs	r0, #0
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d0f9      	beq.n	80099f2 <__sflush_r+0x1a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a04:	682f      	ldr	r7, [r5, #0]
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	d032      	beq.n	8009a70 <__sflush_r+0x98>
 8009a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	075a      	lsls	r2, r3, #29
 8009a10:	d505      	bpl.n	8009a1e <__sflush_r+0x46>
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	1ac0      	subs	r0, r0, r3
 8009a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a18:	b10b      	cbz	r3, 8009a1e <__sflush_r+0x46>
 8009a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a1c:	1ac0      	subs	r0, r0, r3
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4602      	mov	r2, r0
 8009a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a24:	6a21      	ldr	r1, [r4, #32]
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b0      	blx	r6
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	d106      	bne.n	8009a3e <__sflush_r+0x66>
 8009a30:	6829      	ldr	r1, [r5, #0]
 8009a32:	291d      	cmp	r1, #29
 8009a34:	d82c      	bhi.n	8009a90 <__sflush_r+0xb8>
 8009a36:	4a2a      	ldr	r2, [pc, #168]	; (8009ae0 <__sflush_r+0x108>)
 8009a38:	40ca      	lsrs	r2, r1
 8009a3a:	07d6      	lsls	r6, r2, #31
 8009a3c:	d528      	bpl.n	8009a90 <__sflush_r+0xb8>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	6062      	str	r2, [r4, #4]
 8009a42:	04d9      	lsls	r1, r3, #19
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	d504      	bpl.n	8009a54 <__sflush_r+0x7c>
 8009a4a:	1c42      	adds	r2, r0, #1
 8009a4c:	d101      	bne.n	8009a52 <__sflush_r+0x7a>
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	b903      	cbnz	r3, 8009a54 <__sflush_r+0x7c>
 8009a52:	6560      	str	r0, [r4, #84]	; 0x54
 8009a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a56:	602f      	str	r7, [r5, #0]
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d0ca      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d002      	beq.n	8009a6a <__sflush_r+0x92>
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff faa9 	bl	8008fbc <_free_r>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a6e:	e7c1      	b.n	80099f4 <__sflush_r+0x1c>
 8009a70:	6a21      	ldr	r1, [r4, #32]
 8009a72:	2301      	movs	r3, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	1c41      	adds	r1, r0, #1
 8009a7a:	d1c7      	bne.n	8009a0c <__sflush_r+0x34>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c4      	beq.n	8009a0c <__sflush_r+0x34>
 8009a82:	2b1d      	cmp	r3, #29
 8009a84:	d001      	beq.n	8009a8a <__sflush_r+0xb2>
 8009a86:	2b16      	cmp	r3, #22
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0xb6>
 8009a8a:	602f      	str	r7, [r5, #0]
 8009a8c:	e7b1      	b.n	80099f2 <__sflush_r+0x1a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	e7ad      	b.n	80099f4 <__sflush_r+0x1c>
 8009a98:	690f      	ldr	r7, [r1, #16]
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	d0a9      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a9e:	0793      	lsls	r3, r2, #30
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	bf08      	it	eq
 8009aa4:	694b      	ldreq	r3, [r1, #20]
 8009aa6:	600f      	str	r7, [r1, #0]
 8009aa8:	bf18      	it	ne
 8009aaa:	2300      	movne	r3, #0
 8009aac:	eba6 0807 	sub.w	r8, r6, r7
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	dd9c      	ble.n	80099f2 <__sflush_r+0x1a>
 8009ab8:	6a21      	ldr	r1, [r4, #32]
 8009aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009abc:	4643      	mov	r3, r8
 8009abe:	463a      	mov	r2, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc06      	bgt.n	8009ad6 <__sflush_r+0xfe>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	e78e      	b.n	80099f4 <__sflush_r+0x1c>
 8009ad6:	4407      	add	r7, r0
 8009ad8:	eba8 0800 	sub.w	r8, r8, r0
 8009adc:	e7e9      	b.n	8009ab2 <__sflush_r+0xda>
 8009ade:	bf00      	nop
 8009ae0:	20400001 	.word	0x20400001

08009ae4 <_fflush_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	4605      	mov	r5, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b913      	cbnz	r3, 8009af4 <_fflush_r+0x10>
 8009aee:	2500      	movs	r5, #0
 8009af0:	4628      	mov	r0, r5
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	b118      	cbz	r0, 8009afe <_fflush_r+0x1a>
 8009af6:	6983      	ldr	r3, [r0, #24]
 8009af8:	b90b      	cbnz	r3, 8009afe <_fflush_r+0x1a>
 8009afa:	f000 f887 	bl	8009c0c <__sinit>
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <_fflush_r+0x6c>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d11b      	bne.n	8009b3c <_fflush_r+0x58>
 8009b04:	686c      	ldr	r4, [r5, #4]
 8009b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0ef      	beq.n	8009aee <_fflush_r+0xa>
 8009b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b10:	07d0      	lsls	r0, r2, #31
 8009b12:	d404      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b14:	0599      	lsls	r1, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1a:	f000 f915 	bl	8009d48 <__retarget_lock_acquire_recursive>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4621      	mov	r1, r4
 8009b22:	f7ff ff59 	bl	80099d8 <__sflush_r>
 8009b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b28:	07da      	lsls	r2, r3, #31
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	d4e0      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	059b      	lsls	r3, r3, #22
 8009b32:	d4dd      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b36:	f000 f908 	bl	8009d4a <__retarget_lock_release_recursive>
 8009b3a:	e7d9      	b.n	8009af0 <_fflush_r+0xc>
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <_fflush_r+0x70>)
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d101      	bne.n	8009b46 <_fflush_r+0x62>
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	e7df      	b.n	8009b06 <_fflush_r+0x22>
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <_fflush_r+0x74>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	bf08      	it	eq
 8009b4c:	68ec      	ldreq	r4, [r5, #12]
 8009b4e:	e7da      	b.n	8009b06 <_fflush_r+0x22>
 8009b50:	0800ab34 	.word	0x0800ab34
 8009b54:	0800ab54 	.word	0x0800ab54
 8009b58:	0800ab14 	.word	0x0800ab14

08009b5c <std>:
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	4604      	mov	r4, r0
 8009b62:	e9c0 3300 	strd	r3, r3, [r0]
 8009b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b6a:	6083      	str	r3, [r0, #8]
 8009b6c:	8181      	strh	r1, [r0, #12]
 8009b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b70:	81c2      	strh	r2, [r0, #14]
 8009b72:	6183      	str	r3, [r0, #24]
 8009b74:	4619      	mov	r1, r3
 8009b76:	2208      	movs	r2, #8
 8009b78:	305c      	adds	r0, #92	; 0x5c
 8009b7a:	f7ff fa17 	bl	8008fac <memset>
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x38>)
 8009b80:	6263      	str	r3, [r4, #36]	; 0x24
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <std+0x3c>)
 8009b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <std+0x40>)
 8009b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <std+0x44>)
 8009b8c:	6224      	str	r4, [r4, #32]
 8009b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	bf00      	nop
 8009b94:	08009f01 	.word	0x08009f01
 8009b98:	08009f23 	.word	0x08009f23
 8009b9c:	08009f5b 	.word	0x08009f5b
 8009ba0:	08009f7f 	.word	0x08009f7f

08009ba4 <_cleanup_r>:
 8009ba4:	4901      	ldr	r1, [pc, #4]	; (8009bac <_cleanup_r+0x8>)
 8009ba6:	f000 b8af 	b.w	8009d08 <_fwalk_reent>
 8009baa:	bf00      	nop
 8009bac:	08009ae5 	.word	0x08009ae5

08009bb0 <__sfmoreglue>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	2268      	movs	r2, #104	; 0x68
 8009bb4:	1e4d      	subs	r5, r1, #1
 8009bb6:	4355      	muls	r5, r2
 8009bb8:	460e      	mov	r6, r1
 8009bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bbe:	f7ff fa69 	bl	8009094 <_malloc_r>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	b140      	cbz	r0, 8009bd8 <__sfmoreglue+0x28>
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009bcc:	300c      	adds	r0, #12
 8009bce:	60a0      	str	r0, [r4, #8]
 8009bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bd4:	f7ff f9ea 	bl	8008fac <memset>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	bd70      	pop	{r4, r5, r6, pc}

08009bdc <__sfp_lock_acquire>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__sfp_lock_acquire+0x8>)
 8009bde:	f000 b8b3 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009be2:	bf00      	nop
 8009be4:	200002fd 	.word	0x200002fd

08009be8 <__sfp_lock_release>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__sfp_lock_release+0x8>)
 8009bea:	f000 b8ae 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009bee:	bf00      	nop
 8009bf0:	200002fd 	.word	0x200002fd

08009bf4 <__sinit_lock_acquire>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__sinit_lock_acquire+0x8>)
 8009bf6:	f000 b8a7 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	200002fe 	.word	0x200002fe

08009c00 <__sinit_lock_release>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sinit_lock_release+0x8>)
 8009c02:	f000 b8a2 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	200002fe 	.word	0x200002fe

08009c0c <__sinit>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
 8009c10:	f7ff fff0 	bl	8009bf4 <__sinit_lock_acquire>
 8009c14:	69a3      	ldr	r3, [r4, #24]
 8009c16:	b11b      	cbz	r3, 8009c20 <__sinit+0x14>
 8009c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1c:	f7ff bff0 	b.w	8009c00 <__sinit_lock_release>
 8009c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c24:	6523      	str	r3, [r4, #80]	; 0x50
 8009c26:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <__sinit+0x68>)
 8009c28:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <__sinit+0x6c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	bf04      	itt	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	61a3      	streq	r3, [r4, #24]
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 f820 	bl	8009c7c <__sfp>
 8009c3c:	6060      	str	r0, [r4, #4]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 f81c 	bl	8009c7c <__sfp>
 8009c44:	60a0      	str	r0, [r4, #8]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 f818 	bl	8009c7c <__sfp>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60e0      	str	r0, [r4, #12]
 8009c50:	2104      	movs	r1, #4
 8009c52:	6860      	ldr	r0, [r4, #4]
 8009c54:	f7ff ff82 	bl	8009b5c <std>
 8009c58:	68a0      	ldr	r0, [r4, #8]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	2109      	movs	r1, #9
 8009c5e:	f7ff ff7d 	bl	8009b5c <std>
 8009c62:	68e0      	ldr	r0, [r4, #12]
 8009c64:	2202      	movs	r2, #2
 8009c66:	2112      	movs	r1, #18
 8009c68:	f7ff ff78 	bl	8009b5c <std>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61a3      	str	r3, [r4, #24]
 8009c70:	e7d2      	b.n	8009c18 <__sinit+0xc>
 8009c72:	bf00      	nop
 8009c74:	0800aadc 	.word	0x0800aadc
 8009c78:	08009ba5 	.word	0x08009ba5

08009c7c <__sfp>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	4607      	mov	r7, r0
 8009c80:	f7ff ffac 	bl	8009bdc <__sfp_lock_acquire>
 8009c84:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <__sfp+0x84>)
 8009c86:	681e      	ldr	r6, [r3, #0]
 8009c88:	69b3      	ldr	r3, [r6, #24]
 8009c8a:	b913      	cbnz	r3, 8009c92 <__sfp+0x16>
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff ffbd 	bl	8009c0c <__sinit>
 8009c92:	3648      	adds	r6, #72	; 0x48
 8009c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	d503      	bpl.n	8009ca4 <__sfp+0x28>
 8009c9c:	6833      	ldr	r3, [r6, #0]
 8009c9e:	b30b      	cbz	r3, 8009ce4 <__sfp+0x68>
 8009ca0:	6836      	ldr	r6, [r6, #0]
 8009ca2:	e7f7      	b.n	8009c94 <__sfp+0x18>
 8009ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ca8:	b9d5      	cbnz	r5, 8009ce0 <__sfp+0x64>
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <__sfp+0x88>)
 8009cac:	60e3      	str	r3, [r4, #12]
 8009cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8009cb4:	f000 f847 	bl	8009d46 <__retarget_lock_init_recursive>
 8009cb8:	f7ff ff96 	bl	8009be8 <__sfp_lock_release>
 8009cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cc4:	6025      	str	r5, [r4, #0]
 8009cc6:	61a5      	str	r5, [r4, #24]
 8009cc8:	2208      	movs	r2, #8
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cd0:	f7ff f96c 	bl	8008fac <memset>
 8009cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cdc:	4620      	mov	r0, r4
 8009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce0:	3468      	adds	r4, #104	; 0x68
 8009ce2:	e7d9      	b.n	8009c98 <__sfp+0x1c>
 8009ce4:	2104      	movs	r1, #4
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7ff ff62 	bl	8009bb0 <__sfmoreglue>
 8009cec:	4604      	mov	r4, r0
 8009cee:	6030      	str	r0, [r6, #0]
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d1d5      	bne.n	8009ca0 <__sfp+0x24>
 8009cf4:	f7ff ff78 	bl	8009be8 <__sfp_lock_release>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	e7ee      	b.n	8009cdc <__sfp+0x60>
 8009cfe:	bf00      	nop
 8009d00:	0800aadc 	.word	0x0800aadc
 8009d04:	ffff0001 	.word	0xffff0001

08009d08 <_fwalk_reent>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	4688      	mov	r8, r1
 8009d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d14:	2700      	movs	r7, #0
 8009d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1e:	d505      	bpl.n	8009d2c <_fwalk_reent+0x24>
 8009d20:	6824      	ldr	r4, [r4, #0]
 8009d22:	2c00      	cmp	r4, #0
 8009d24:	d1f7      	bne.n	8009d16 <_fwalk_reent+0xe>
 8009d26:	4638      	mov	r0, r7
 8009d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2c:	89ab      	ldrh	r3, [r5, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d907      	bls.n	8009d42 <_fwalk_reent+0x3a>
 8009d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d36:	3301      	adds	r3, #1
 8009d38:	d003      	beq.n	8009d42 <_fwalk_reent+0x3a>
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	47c0      	blx	r8
 8009d40:	4307      	orrs	r7, r0
 8009d42:	3568      	adds	r5, #104	; 0x68
 8009d44:	e7e9      	b.n	8009d1a <_fwalk_reent+0x12>

08009d46 <__retarget_lock_init_recursive>:
 8009d46:	4770      	bx	lr

08009d48 <__retarget_lock_acquire_recursive>:
 8009d48:	4770      	bx	lr

08009d4a <__retarget_lock_release_recursive>:
 8009d4a:	4770      	bx	lr

08009d4c <_lseek_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_lseek_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f7 f926 	bl	8000fac <_lseek>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_lseek_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_lseek_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20000300 	.word	0x20000300

08009d70 <__swhatbuf_r>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	b096      	sub	sp, #88	; 0x58
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	461d      	mov	r5, r3
 8009d80:	da08      	bge.n	8009d94 <__swhatbuf_r+0x24>
 8009d82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	602a      	str	r2, [r5, #0]
 8009d8a:	061a      	lsls	r2, r3, #24
 8009d8c:	d410      	bmi.n	8009db0 <__swhatbuf_r+0x40>
 8009d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d92:	e00e      	b.n	8009db2 <__swhatbuf_r+0x42>
 8009d94:	466a      	mov	r2, sp
 8009d96:	f000 f8f7 	bl	8009f88 <_fstat_r>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	dbf1      	blt.n	8009d82 <__swhatbuf_r+0x12>
 8009d9e:	9a01      	ldr	r2, [sp, #4]
 8009da0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009da4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009da8:	425a      	negs	r2, r3
 8009daa:	415a      	adcs	r2, r3
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	e7ee      	b.n	8009d8e <__swhatbuf_r+0x1e>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	2000      	movs	r0, #0
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	b016      	add	sp, #88	; 0x58
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009dbc <__smakebuf_r>:
 8009dbc:	898b      	ldrh	r3, [r1, #12]
 8009dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dc0:	079d      	lsls	r5, r3, #30
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	d507      	bpl.n	8009dd8 <__smakebuf_r+0x1c>
 8009dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	6123      	str	r3, [r4, #16]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	6163      	str	r3, [r4, #20]
 8009dd4:	b002      	add	sp, #8
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	ab01      	add	r3, sp, #4
 8009dda:	466a      	mov	r2, sp
 8009ddc:	f7ff ffc8 	bl	8009d70 <__swhatbuf_r>
 8009de0:	9900      	ldr	r1, [sp, #0]
 8009de2:	4605      	mov	r5, r0
 8009de4:	4630      	mov	r0, r6
 8009de6:	f7ff f955 	bl	8009094 <_malloc_r>
 8009dea:	b948      	cbnz	r0, 8009e00 <__smakebuf_r+0x44>
 8009dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df0:	059a      	lsls	r2, r3, #22
 8009df2:	d4ef      	bmi.n	8009dd4 <__smakebuf_r+0x18>
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	f043 0302 	orr.w	r3, r3, #2
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	e7e3      	b.n	8009dc8 <__smakebuf_r+0xc>
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <__smakebuf_r+0x7c>)
 8009e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	6020      	str	r0, [r4, #0]
 8009e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0c:	81a3      	strh	r3, [r4, #12]
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	6163      	str	r3, [r4, #20]
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	6120      	str	r0, [r4, #16]
 8009e16:	b15b      	cbz	r3, 8009e30 <__smakebuf_r+0x74>
 8009e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 f8c5 	bl	8009fac <_isatty_r>
 8009e22:	b128      	cbz	r0, 8009e30 <__smakebuf_r+0x74>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f023 0303 	bic.w	r3, r3, #3
 8009e2a:	f043 0301 	orr.w	r3, r3, #1
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	89a0      	ldrh	r0, [r4, #12]
 8009e32:	4305      	orrs	r5, r0
 8009e34:	81a5      	strh	r5, [r4, #12]
 8009e36:	e7cd      	b.n	8009dd4 <__smakebuf_r+0x18>
 8009e38:	08009ba5 	.word	0x08009ba5

08009e3c <__malloc_lock>:
 8009e3c:	4801      	ldr	r0, [pc, #4]	; (8009e44 <__malloc_lock+0x8>)
 8009e3e:	f7ff bf83 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009e42:	bf00      	nop
 8009e44:	200002fc 	.word	0x200002fc

08009e48 <__malloc_unlock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	; (8009e50 <__malloc_unlock+0x8>)
 8009e4a:	f7ff bf7e 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009e4e:	bf00      	nop
 8009e50:	200002fc 	.word	0x200002fc

08009e54 <_read_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	; (8009e74 <_read_r+0x20>)
 8009e58:	4604      	mov	r4, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	602a      	str	r2, [r5, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f7f7 f842 	bl	8000eec <_read>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_read_r+0x1e>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_read_r+0x1e>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20000300 	.word	0x20000300

08009e78 <_raise_r>:
 8009e78:	291f      	cmp	r1, #31
 8009e7a:	b538      	push	{r3, r4, r5, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	d904      	bls.n	8009e8c <_raise_r+0x14>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e8e:	b112      	cbz	r2, 8009e96 <_raise_r+0x1e>
 8009e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e94:	b94b      	cbnz	r3, 8009eaa <_raise_r+0x32>
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 f830 	bl	8009efc <_getpid_r>
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea6:	f000 b817 	b.w	8009ed8 <_kill_r>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d00a      	beq.n	8009ec4 <_raise_r+0x4c>
 8009eae:	1c59      	adds	r1, r3, #1
 8009eb0:	d103      	bne.n	8009eba <_raise_r+0x42>
 8009eb2:	2316      	movs	r3, #22
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	e7e7      	b.n	8009e8a <_raise_r+0x12>
 8009eba:	2400      	movs	r4, #0
 8009ebc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	4798      	blx	r3
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e7e0      	b.n	8009e8a <_raise_r+0x12>

08009ec8 <raise>:
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <raise+0xc>)
 8009eca:	4601      	mov	r1, r0
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f7ff bfd3 	b.w	8009e78 <_raise_r>
 8009ed2:	bf00      	nop
 8009ed4:	2000000c 	.word	0x2000000c

08009ed8 <_kill_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_kill_r+0x20>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f7f6 ffe7 	bl	8000eb8 <_kill>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d102      	bne.n	8009ef4 <_kill_r+0x1c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b103      	cbz	r3, 8009ef4 <_kill_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000300 	.word	0x20000300

08009efc <_getpid_r>:
 8009efc:	f7f6 bfd4 	b.w	8000ea8 <_getpid>

08009f00 <__sread>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	460c      	mov	r4, r1
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	f7ff ffa4 	bl	8009e54 <_read_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	bfab      	itete	ge
 8009f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f12:	89a3      	ldrhlt	r3, [r4, #12]
 8009f14:	181b      	addge	r3, r3, r0
 8009f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f1a:	bfac      	ite	ge
 8009f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f1e:	81a3      	strhlt	r3, [r4, #12]
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <__swrite>:
 8009f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	461f      	mov	r7, r3
 8009f28:	898b      	ldrh	r3, [r1, #12]
 8009f2a:	05db      	lsls	r3, r3, #23
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4616      	mov	r6, r2
 8009f32:	d505      	bpl.n	8009f40 <__swrite+0x1e>
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	2302      	movs	r3, #2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f7ff ff06 	bl	8009d4c <_lseek_r>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	463b      	mov	r3, r7
 8009f50:	4628      	mov	r0, r5
 8009f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	f7ff bca7 	b.w	80098a8 <_write_r>

08009f5a <__sseek>:
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f7ff fef3 	bl	8009d4c <_lseek_r>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	bf15      	itete	ne
 8009f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f76:	81a3      	strheq	r3, [r4, #12]
 8009f78:	bf18      	it	ne
 8009f7a:	81a3      	strhne	r3, [r4, #12]
 8009f7c:	bd10      	pop	{r4, pc}

08009f7e <__sclose>:
 8009f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f82:	f7ff bd19 	b.w	80099b8 <_close_r>
	...

08009f88 <_fstat_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_fstat_r+0x20>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f6 ffee 	bl	8000f76 <_fstat>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_fstat_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_fstat_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000300 	.word	0x20000300

08009fac <_isatty_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d06      	ldr	r5, [pc, #24]	; (8009fc8 <_isatty_r+0x1c>)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	f7f6 ffed 	bl	8000f96 <_isatty>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_isatty_r+0x1a>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_isatty_r+0x1a>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	20000300 	.word	0x20000300

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
