
SAALRO-EVK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab04  0800ab04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab0c  0800ab0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab10  0800ab10  0001ab10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ab14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000294  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001acc  00000000  00000000  0002d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  0002fea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002421c  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce4a  00000000  00000000  00054eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4dcd  00000000  00000000  00061cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136ac3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e24  00000000  00000000  00136b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f64 	.word	0x08009f64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08009f64 	.word	0x08009f64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468e      	mov	lr, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14d      	bne.n	80003a2 <__udivmoddi4+0xaa>
 8000306:	428a      	cmp	r2, r1
 8000308:	4694      	mov	ip, r2
 800030a:	d969      	bls.n	80003e0 <__udivmoddi4+0xe8>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b152      	cbz	r2, 8000328 <__udivmoddi4+0x30>
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	f1c2 0120 	rsb	r1, r2, #32
 800031a:	fa20 f101 	lsr.w	r1, r0, r1
 800031e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000322:	ea41 0e03 	orr.w	lr, r1, r3
 8000326:	4094      	lsls	r4, r2
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	0c21      	lsrs	r1, r4, #16
 800032e:	fbbe f6f8 	udiv	r6, lr, r8
 8000332:	fa1f f78c 	uxth.w	r7, ip
 8000336:	fb08 e316 	mls	r3, r8, r6, lr
 800033a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800033e:	fb06 f107 	mul.w	r1, r6, r7
 8000342:	4299      	cmp	r1, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x64>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800034e:	f080 811f 	bcs.w	8000590 <__udivmoddi4+0x298>
 8000352:	4299      	cmp	r1, r3
 8000354:	f240 811c 	bls.w	8000590 <__udivmoddi4+0x298>
 8000358:	3e02      	subs	r6, #2
 800035a:	4463      	add	r3, ip
 800035c:	1a5b      	subs	r3, r3, r1
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800036c:	fb00 f707 	mul.w	r7, r0, r7
 8000370:	42a7      	cmp	r7, r4
 8000372:	d90a      	bls.n	800038a <__udivmoddi4+0x92>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037c:	f080 810a 	bcs.w	8000594 <__udivmoddi4+0x29c>
 8000380:	42a7      	cmp	r7, r4
 8000382:	f240 8107 	bls.w	8000594 <__udivmoddi4+0x29c>
 8000386:	4464      	add	r4, ip
 8000388:	3802      	subs	r0, #2
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	1be4      	subs	r4, r4, r7
 8000390:	2600      	movs	r6, #0
 8000392:	b11d      	cbz	r5, 800039c <__udivmoddi4+0xa4>
 8000394:	40d4      	lsrs	r4, r2
 8000396:	2300      	movs	r3, #0
 8000398:	e9c5 4300 	strd	r4, r3, [r5]
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0xc2>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80ef 	beq.w	800058a <__udivmoddi4+0x292>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x160>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xd4>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80f9 	bhi.w	80005be <__udivmoddi4+0x2c6>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0303 	sbc.w	r3, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	469e      	mov	lr, r3
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0e0      	beq.n	800039c <__udivmoddi4+0xa4>
 80003da:	e9c5 4e00 	strd	r4, lr, [r5]
 80003de:	e7dd      	b.n	800039c <__udivmoddi4+0xa4>
 80003e0:	b902      	cbnz	r2, 80003e4 <__udivmoddi4+0xec>
 80003e2:	deff      	udf	#255	; 0xff
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	f040 8092 	bne.w	8000512 <__udivmoddi4+0x21a>
 80003ee:	eba1 010c 	sub.w	r1, r1, ip
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2601      	movs	r6, #1
 80003fc:	0c20      	lsrs	r0, r4, #16
 80003fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000402:	fb07 1113 	mls	r1, r7, r3, r1
 8000406:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040a:	fb0e f003 	mul.w	r0, lr, r3
 800040e:	4288      	cmp	r0, r1
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x12c>
 8000412:	eb1c 0101 	adds.w	r1, ip, r1
 8000416:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x12a>
 800041c:	4288      	cmp	r0, r1
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2c0>
 8000422:	4643      	mov	r3, r8
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1110 	mls	r1, r7, r0, r1
 8000430:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x156>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x154>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2ca>
 800044c:	4608      	mov	r0, r1
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	e79c      	b.n	8000392 <__udivmoddi4+0x9a>
 8000458:	f1c6 0720 	rsb	r7, r6, #32
 800045c:	40b3      	lsls	r3, r6
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa20 f407 	lsr.w	r4, r0, r7
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	431c      	orrs	r4, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000476:	fa00 f306 	lsl.w	r3, r0, r6
 800047a:	fbb1 f8f9 	udiv	r8, r1, r9
 800047e:	0c20      	lsrs	r0, r4, #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fb09 1118 	mls	r1, r9, r8, r1
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	4288      	cmp	r0, r1
 8000492:	fa02 f206 	lsl.w	r2, r2, r6
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b8>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2bc>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2bc>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1a09      	subs	r1, r1, r0
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b8:	fb09 1110 	mls	r1, r9, r0, r1
 80004bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	458e      	cmp	lr, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1e2>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2b4>
 80004d2:	458e      	cmp	lr, r1
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2b4>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4461      	add	r1, ip
 80004da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004de:	fba0 9402 	umull	r9, r4, r0, r2
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46a6      	mov	lr, r4
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x2a4>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x2a0>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x212>
 80004f2:	ebb3 0208 	subs.w	r2, r3, r8
 80004f6:	eb61 010e 	sbc.w	r1, r1, lr
 80004fa:	fa01 f707 	lsl.w	r7, r1, r7
 80004fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000502:	40f1      	lsrs	r1, r6
 8000504:	431f      	orrs	r7, r3
 8000506:	e9c5 7100 	strd	r7, r1, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	f1c2 0320 	rsb	r3, r2, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	fa0c fc02 	lsl.w	ip, ip, r2
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
 8000520:	4091      	lsls	r1, r2
 8000522:	4301      	orrs	r1, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3610 	mls	r6, r7, r0, r3
 8000534:	0c0b      	lsrs	r3, r1, #16
 8000536:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053a:	fb00 f60e 	mul.w	r6, r0, lr
 800053e:	429e      	cmp	r6, r3
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x260>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b8>
 8000550:	429e      	cmp	r6, r3
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b8>
 8000554:	3802      	subs	r0, #2
 8000556:	4463      	add	r3, ip
 8000558:	1b9b      	subs	r3, r3, r6
 800055a:	b289      	uxth	r1, r1
 800055c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000560:	fb07 3316 	mls	r3, r7, r6, r3
 8000564:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000568:	fb06 f30e 	mul.w	r3, r6, lr
 800056c:	428b      	cmp	r3, r1
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x28a>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 800057a:	428b      	cmp	r3, r1
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0x104>
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e705      	b.n	800039c <__udivmoddi4+0xa4>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e3      	b.n	800035c <__udivmoddi4+0x64>
 8000594:	4618      	mov	r0, r3
 8000596:	e6f8      	b.n	800038a <__udivmoddi4+0x92>
 8000598:	454b      	cmp	r3, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f8>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f8>
 80005a8:	4646      	mov	r6, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x28a>
 80005ac:	4620      	mov	r0, r4
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1e2>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x260>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b8>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x12c>
 80005be:	4630      	mov	r0, r6
 80005c0:	e709      	b.n	80003d6 <__udivmoddi4+0xde>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x156>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <dev_ext_flsh_enable_write>:
uint8_t txData[260];
uint8_t rxData[260];


uint8_t dev_ext_flsh_enable_write(uint8_t ID, bool enable)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef Hal_Result;

	if(enable)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d003      	beq.n	80005ea <dev_ext_flsh_enable_write+0x1e>
		txData[0] = FLASH_INSTRUCTION_WRITE_ENABLE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 80005e4:	2206      	movs	r2, #6
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e002      	b.n	80005f0 <dev_ext_flsh_enable_write+0x24>
	else
		txData[0] = FLASH_INSTRUCTION_WRITE_DISABLE;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <dev_ext_flsh_enable_write+0x60>)
 80005f6:	f001 f829 	bl	800164c <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, 1, 100);
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	2201      	movs	r2, #1
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <dev_ext_flsh_enable_write+0x5c>)
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <dev_ext_flsh_enable_write+0x64>)
 8000602:	f001 fcea 	bl	8001fda <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <dev_ext_flsh_enable_write+0x48>
		return 1;
 8000610:	2301      	movs	r3, #1
 8000612:	e005      	b.n	8000620 <dev_ext_flsh_enable_write+0x54>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <dev_ext_flsh_enable_write+0x60>)
 800061a:	f001 f817 	bl	800164c <HAL_GPIO_WritePin>

	return 0;
 800061e:	2300      	movs	r3, #0

}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40021400 	.word	0x40021400
 8000630:	20000294 	.word	0x20000294

08000634 <dev_ext_flsh_read_status>:

uint8_t dev_ext_flsh_read_status(uint8_t ID, uint8_t *Status)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af02      	add	r7, sp, #8
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_Result;
	txData[0] = FLASH_INSTRUCTION_READ_STATUS_REGISTER;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <dev_ext_flsh_read_status+0x60>)
 8000642:	2205      	movs	r2, #5
 8000644:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <dev_ext_flsh_read_status+0x64>)
 800064c:	f000 fffe 	bl	800164c <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_TransmitReceive(&hspi5, txData, rxData, 2, 100);
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2302      	movs	r3, #2
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <dev_ext_flsh_read_status+0x68>)
 8000658:	490e      	ldr	r1, [pc, #56]	; (8000694 <dev_ext_flsh_read_status+0x60>)
 800065a:	4811      	ldr	r0, [pc, #68]	; (80006a0 <dev_ext_flsh_read_status+0x6c>)
 800065c:	f001 fdf9 	bl	8002252 <HAL_SPI_TransmitReceive>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <dev_ext_flsh_read_status+0x3a>
		return 1;
 800066a:	2301      	movs	r3, #1
 800066c:	e00d      	b.n	800068a <dev_ext_flsh_read_status+0x56>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <dev_ext_flsh_read_status+0x64>)
 8000674:	f000 ffea 	bl	800164c <HAL_GPIO_WritePin>
	if(Hal_Result == HAL_OK)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d105      	bne.n	800068a <dev_ext_flsh_read_status+0x56>
	{
		*Status = rxData[1];
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <dev_ext_flsh_read_status+0x68>)
 8000680:	785a      	ldrb	r2, [r3, #1]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	701a      	strb	r2, [r3, #0]
		return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e7ff      	b.n	800068a <dev_ext_flsh_read_status+0x56>
	}


}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40021400 	.word	0x40021400
 800069c:	20000190 	.word	0x20000190
 80006a0:	20000294 	.word	0x20000294

080006a4 <dev_ext_flash_read>:

uint8_t dev_ext_flash_read(uint8_t ID, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef Hal_Result;

	txData[0] = FLASH_INSTRUCTION_NORMAL_READ;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <dev_ext_flash_read+0x88>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	701a      	strb	r2, [r3, #0]
	txData[1] = Address >> 16 & 0xff;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <dev_ext_flash_read+0x88>)
 80006c2:	705a      	strb	r2, [r3, #1]
	txData[2] = Address >> 8 & 0xff;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <dev_ext_flash_read+0x88>)
 80006cc:	709a      	strb	r2, [r3, #2]
	txData[3] = Address & 0xff;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <dev_ext_flash_read+0x88>)
 80006d4:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4815      	ldr	r0, [pc, #84]	; (8000730 <dev_ext_flash_read+0x8c>)
 80006dc:	f000 ffb6 	bl	800164c <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_TransmitReceive(&hspi5, txData, rxData, Size + 4, 100);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	3304      	adds	r3, #4
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <dev_ext_flash_read+0x90>)
 80006ee:	490f      	ldr	r1, [pc, #60]	; (800072c <dev_ext_flash_read+0x88>)
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <dev_ext_flash_read+0x94>)
 80006f2:	f001 fdae 	bl	8002252 <HAL_SPI_TransmitReceive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	75fb      	strb	r3, [r7, #23]
	if(Hal_Result != HAL_OK)
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <dev_ext_flash_read+0x60>
		return 1;
 8000700:	2301      	movs	r3, #1
 8000702:	e00e      	b.n	8000722 <dev_ext_flash_read+0x7e>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <dev_ext_flash_read+0x8c>)
 800070a:	f000 ff9f 	bl	800164c <HAL_GPIO_WritePin>
	if(Hal_Result == HAL_OK)
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <dev_ext_flash_read+0x7c>
		memcpy(Data, rxData + 4, Size);
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <dev_ext_flash_read+0x98>)
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f008 fc04 	bl	8008f28 <memcpy>
	return 0;
 8000720:	2300      	movs	r3, #0

}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000008c 	.word	0x2000008c
 8000730:	40021400 	.word	0x40021400
 8000734:	20000190 	.word	0x20000190
 8000738:	20000294 	.word	0x20000294
 800073c:	20000194 	.word	0x20000194

08000740 <dev_ext_flash_write>:

uint8_t dev_ext_flash_write(uint8_t ID, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef Hal_Result;
	uint8_t Memory_Status;

	if(dev_ext_flsh_enable_write(ID, true) != 0)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff39 	bl	80005cc <dev_ext_flsh_enable_write>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <dev_ext_flash_write+0x24>
		return 1;
 8000760:	2301      	movs	r3, #1
 8000762:	e03e      	b.n	80007e2 <dev_ext_flash_write+0xa2>

	txData[0] = FLASH_INSTRUCTION_PAGE_PROGRAM;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <dev_ext_flash_write+0xac>)
 8000766:	2202      	movs	r2, #2
 8000768:	701a      	strb	r2, [r3, #0]
	txData[1] = Address >> 16 & 0xff;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <dev_ext_flash_write+0xac>)
 8000772:	705a      	strb	r2, [r3, #1]
	txData[2] = Address >> 8 & 0xff;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <dev_ext_flash_write+0xac>)
 800077c:	709a      	strb	r2, [r3, #2]
	txData[3] = Address & 0xff;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <dev_ext_flash_write+0xac>)
 8000784:	70da      	strb	r2, [r3, #3]
	memcpy(txData + 4, Data, Size);
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <dev_ext_flash_write+0xb0>)
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fbcb 	bl	8008f28 <memcpy>

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <dev_ext_flash_write+0xb4>)
 8000798:	f000 ff58 	bl	800164c <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, Size + 4, 100);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	3304      	adds	r3, #4
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	4911      	ldr	r1, [pc, #68]	; (80007ec <dev_ext_flash_write+0xac>)
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <dev_ext_flash_write+0xb8>)
 80007aa:	f001 fc16 	bl	8001fda <HAL_SPI_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	75fb      	strb	r3, [r7, #23]
	if(Hal_Result != HAL_OK)
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <dev_ext_flash_write+0x7c>
		return 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e012      	b.n	80007e2 <dev_ext_flash_write+0xa2>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <dev_ext_flash_write+0xb4>)
 80007c2:	f000 ff43 	bl	800164c <HAL_GPIO_WritePin>

	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 80007c6:	e006      	b.n	80007d6 <dev_ext_flash_write+0x96>
	{
		dev_ext_flsh_read_status(ID, &Memory_Status);
 80007c8:	f107 0216 	add.w	r2, r7, #22
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff2f 	bl	8000634 <dev_ext_flsh_read_status>
	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 80007d6:	7dbb      	ldrb	r3, [r7, #22]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f3      	bne.n	80007c8 <dev_ext_flash_write+0x88>
	}

	return 0;
 80007e0:	2300      	movs	r3, #0

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	20000090 	.word	0x20000090
 80007f4:	40021400 	.word	0x40021400
 80007f8:	20000294 	.word	0x20000294

080007fc <dev_ext_flash_erase_sector>:
uint8_t dev_ext_flash_erase_sector(uint8_t ID, uint32_t SectorAddress)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_Result;
	uint8_t Memory_Status;

	if(dev_ext_flsh_enable_write(ID, true) != 0)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fedd 	bl	80005cc <dev_ext_flsh_enable_write>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <dev_ext_flash_erase_sector+0x20>
		return 1;
 8000818:	2301      	movs	r3, #1
 800081a:	e035      	b.n	8000888 <dev_ext_flash_erase_sector+0x8c>
	txData[0] = FLASH_INSTRUCTION_SECTOR_ERASE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800081e:	22d7      	movs	r2, #215	; 0xd7
 8000820:	701a      	strb	r2, [r3, #0]
	txData[1] = SectorAddress >> 16 & 0xff;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	0c1b      	lsrs	r3, r3, #16
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800082a:	705a      	strb	r2, [r3, #1]
	txData[2] = SectorAddress >> 8 & 0xff;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 8000834:	709a      	strb	r2, [r3, #2]
	txData[3] = SectorAddress & 0xff;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800083c:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4814      	ldr	r0, [pc, #80]	; (8000894 <dev_ext_flash_erase_sector+0x98>)
 8000844:	f000 ff02 	bl	800164c <HAL_GPIO_WritePin>
	Hal_Result = HAL_SPI_Transmit(&hspi5, txData, 4, 100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2204      	movs	r2, #4
 800084c:	4910      	ldr	r1, [pc, #64]	; (8000890 <dev_ext_flash_erase_sector+0x94>)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <dev_ext_flash_erase_sector+0x9c>)
 8000850:	f001 fbc3 	bl	8001fda <HAL_SPI_Transmit>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
	if(Hal_Result != HAL_OK)
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <dev_ext_flash_erase_sector+0x66>
		return 1;
 800085e:	2301      	movs	r3, #1
 8000860:	e012      	b.n	8000888 <dev_ext_flash_erase_sector+0x8c>
	HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <dev_ext_flash_erase_sector+0x98>)
 8000868:	f000 fef0 	bl	800164c <HAL_GPIO_WritePin>

	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 800086c:	e006      	b.n	800087c <dev_ext_flash_erase_sector+0x80>
	{
		dev_ext_flsh_read_status(ID, &Memory_Status);
 800086e:	f107 020e 	add.w	r2, r7, #14
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fedc 	bl	8000634 <dev_ext_flsh_read_status>
	while(Memory_Status & FLASH_STATUS_BIT_WIP)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f3      	bne.n	800086e <dev_ext_flash_erase_sector+0x72>
	}
	return 0;
 8000886:	2300      	movs	r3, #0

}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000008c 	.word	0x2000008c
 8000894:	40021400 	.word	0x40021400
 8000898:	20000294 	.word	0x20000294

0800089c <block_device_read>:



int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
	dev_ext_flash_read(0, (block * c->block_size + off), (uint8_t*)buffer, size);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	fb03 f202 	mul.w	r2, r3, r2
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	18d1      	adds	r1, r2, r3
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fef1 	bl	80006a4 <dev_ext_flash_read>
	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
	dev_ext_flash_write(0, (block * c->block_size + off), (uint8_t*)buffer, size);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	18d1      	adds	r1, r2, r3
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ff27 	bl	8000740 <dev_ext_flash_write>
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	dev_ext_flash_erase_sector(0, (block * c->block_size));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	4619      	mov	r1, r3
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff72 	bl	80007fc <dev_ext_flash_erase_sector>
	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <block_device_sync>:
int block_device_sync(const struct lfs_config *c)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0c8      	sub	sp, #288	; 0x120
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fb81 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f8b7 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f957 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI5_Init();
 800094a:	f000 f91f 	bl	8000b8c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  lfs_t Disk;
  lfs_file_t file;

  const struct lfs_config cfg =
 800094e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000952:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000956:	4618      	mov	r0, r3
 8000958:	234c      	movs	r3, #76	; 0x4c
 800095a:	461a      	mov	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f008 faf1 	bl	8008f44 <memset>
 8000962:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800096a:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <main+0x168>)
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000972:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000976:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <main+0x16c>)
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800097e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000982:	4a49      	ldr	r2, [pc, #292]	; (8000aa8 <main+0x170>)
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800098a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800098e:	4a47      	ldr	r2, [pc, #284]	; (8000aac <main+0x174>)
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000996:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800099a:	2210      	movs	r2, #16
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009a6:	2210      	movs	r2, #16
 80009a8:	619a      	str	r2, [r3, #24]
 80009aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	621a      	str	r2, [r3, #32]
 80009c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
 80009d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009da:	2210      	movs	r2, #16
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
 80009de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009e6:	2210      	movs	r2, #16
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  	    .cache_size = 16,
  	    .lookahead_size = 16,
  	    .block_cycles = 500,
  };

  int err = lfs_mount(&Disk, &cfg);
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f008 f8e0 	bl	8008bb8 <lfs_mount>
 80009f8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err) {
 80009fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00d      	beq.n	8000a20 <main+0xe8>
      lfs_format(&Disk, &cfg);
 8000a04:	1d3a      	adds	r2, r7, #4
 8000a06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f008 f8bd 	bl	8008b8c <lfs_format>
      lfs_mount(&Disk, &cfg);
 8000a12:	1d3a      	adds	r2, r7, #4
 8000a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 f8cc 	bl	8008bb8 <lfs_mount>
  }
  // read current count
	uint32_t boot_count = 0;
 8000a20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
	lfs_file_open(&Disk, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000a2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a30:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000a34:	f240 1303 	movw	r3, #259	; 0x103
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <main+0x178>)
 8000a3a:	f008 f8e7 	bl	8008c0c <lfs_file_open>
	lfs_file_read(&Disk, &file, &boot_count, sizeof(boot_count));
 8000a3e:	463a      	mov	r2, r7
 8000a40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a44:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000a48:	2304      	movs	r3, #4
 8000a4a:	f008 f93f 	bl	8008ccc <lfs_file_read>

	// update boot count
	boot_count += 1;
 8000a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a62:	601a      	str	r2, [r3, #0]
	lfs_file_rewind(&Disk, &file);
 8000a64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 f98c 	bl	8008d8c <lfs_file_rewind>
	lfs_file_write(&Disk, &file, &boot_count, sizeof(boot_count));
 8000a74:	463a      	mov	r2, r7
 8000a76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a7a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000a7e:	2304      	movs	r3, #4
 8000a80:	f008 f954 	bl	8008d2c <lfs_file_write>

	// remember the storage is not updated until the file is closed successfully
	lfs_file_close(&Disk, &file);
 8000a84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f8f0 	bl	8008c74 <lfs_file_close>

	// release any resources we were using
	lfs_unmount(&Disk);
 8000a94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 f8a3 	bl	8008be4 <lfs_unmount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x166>
 8000aa0:	0800089d 	.word	0x0800089d
 8000aa4:	080008cd 	.word	0x080008cd
 8000aa8:	080008fd 	.word	0x080008fd
 8000aac:	08000923 	.word	0x08000923
 8000ab0:	08009f7c 	.word	0x08009f7c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 fa3e 	bl	8008f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <SystemClock_Config+0xd0>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <SystemClock_Config+0xd0>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <SystemClock_Config+0xd0>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <SystemClock_Config+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xd4>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fd9f 	bl	8001680 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b48:	f000 f8da 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f800 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b76:	f000 f8c3 	bl	8000d00 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <MX_SPI5_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_SPI5_Init+0x64>)
 8000bde:	f001 f973 	bl	8001ec8 <HAL_SPI_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000be8:	f000 f88a 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000294 	.word	0x20000294
 8000bf4:	40015000 	.word	0x40015000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a37      	ldr	r2, [pc, #220]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a30      	ldr	r2, [pc, #192]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_MEM_CS_GPIO_Port, EXT_MEM_CS_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0x100>)
 8000ca0:	f000 fcd4 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000cac:	f000 fcce 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_MEM_CS_Pin */
  GPIO_InitStruct.Pin = EXT_MEM_CS_Pin;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_GPIO_Init+0x100>)
 8000cc8:	f000 fb14 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PC_Pin */
  GPIO_InitStruct.Pin = LED_PC_Pin;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PC_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000ce6:	f000 fb05 	bl	80012f4 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021400 	.word	0x40021400
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_SPI_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12c      	bne.n	8000dd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = EXT_MEM_SCK_Pin|EXT_MEM_MISO_Pin|EXT_MEM_MOSI_Pin;
 8000db6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000dd4:	f000 fa8e 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40015000 	.word	0x40015000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021400 	.word	0x40021400

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f956 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_kill>:

int _kill(int pid, int sig)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e5a:	f008 f809 	bl	8008e70 <__errno>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2216      	movs	r2, #22
 8000e62:	601a      	str	r2, [r3, #0]
  return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_exit>:

void _exit (int status)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe7 	bl	8000e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e82:	e7fe      	b.n	8000e82 <_exit+0x12>

08000e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e00a      	b.n	8000eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e96:	f3af 8000 	nop.w
 8000e9a:	4601      	mov	r1, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf0      	blt.n	8000e96 <_read+0x12>
  }

  return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e009      	b.n	8000ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf1      	blt.n	8000ed0 <_write+0x12>
  }
  return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_close>:

int _close(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_isatty>:

int _isatty(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f007 ff6e 	bl	8008e70 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20030000 	.word	0x20030000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	200002ec 	.word	0x200002ec
 8000fc8:	20000308 	.word	0x20000308

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800100c:	4c0b      	ldr	r4, [pc, #44]	; (800103c <LoopFillZerobss+0x26>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101a:	f7ff ffd7 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f007 ff3f 	bl	8008ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fc89 	bl	8000938 <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001028:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001034:	0800ab14 	.word	0x0800ab14
  ldr r2, =_sbss
 8001038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800103c:	20000304 	.word	0x20000304

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f90d 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe48 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f917 	bl	80012da <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c4:	f000 f8ed 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200002f0 	.word	0x200002f0

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200002f0 	.word	0x200002f0

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff47 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff5c 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffb0 	bl	8001248 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e177      	b.n	8001600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8166 	bne.w	80015fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80c0 	beq.w	80015fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_GPIO_Init+0x324>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a65      	ldr	r2, [pc, #404]	; (8001618 <HAL_GPIO_Init+0x324>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_GPIO_Init+0x324>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a61      	ldr	r2, [pc, #388]	; (800161c <HAL_GPIO_Init+0x328>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d037      	beq.n	8001532 <HAL_GPIO_Init+0x23e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d031      	beq.n	800152e <HAL_GPIO_Init+0x23a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a56      	ldr	r2, [pc, #344]	; (8001628 <HAL_GPIO_Init+0x334>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d02b      	beq.n	800152a <HAL_GPIO_Init+0x236>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a55      	ldr	r2, [pc, #340]	; (800162c <HAL_GPIO_Init+0x338>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d025      	beq.n	8001526 <HAL_GPIO_Init+0x232>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a54      	ldr	r2, [pc, #336]	; (8001630 <HAL_GPIO_Init+0x33c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01f      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a53      	ldr	r2, [pc, #332]	; (8001634 <HAL_GPIO_Init+0x340>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_Init+0x22a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_GPIO_Init+0x344>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0x226>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a51      	ldr	r2, [pc, #324]	; (800163c <HAL_GPIO_Init+0x348>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_Init+0x222>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a50      	ldr	r2, [pc, #320]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_Init+0x21e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <HAL_GPIO_Init+0x350>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_Init+0x21a>
 800150a:	2309      	movs	r3, #9
 800150c:	e012      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800150e:	230a      	movs	r3, #10
 8001510:	e010      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001512:	2308      	movs	r3, #8
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001516:	2307      	movs	r3, #7
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x328>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_GPIO_Init+0x354>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_GPIO_Init+0x354>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x354>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a29      	ldr	r2, [pc, #164]	; (8001648 <HAL_GPIO_Init+0x354>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x354>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_GPIO_Init+0x354>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x354>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_GPIO_Init+0x354>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae84 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40022000 	.word	0x40022000
 8001644:	40022400 	.word	0x40022400
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e267      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d075      	beq.n	800178a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e242      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x74>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6f      	ldr	r2, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a68      	ldr	r2, [pc, #416]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fcea 	bl	8001110 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fce6 	bl	8001110 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e207      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fcd6 	bl	8001110 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcd2 	bl	8001110 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f3      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0xe8>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c7      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x244>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fc8b 	bl	8001110 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fc87 	bl	8001110 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a8      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x244>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc6a 	bl	8001110 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc66 	bl	8001110 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e187      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d036      	beq.n	80018d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x248>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fc4a 	bl	8001110 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc46 	bl	8001110 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e167      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x200>
 800189e:	e01b      	b.n	80018d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x248>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fc33 	bl	8001110 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e00e      	b.n	80018cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fc2f 	bl	8001110 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d907      	bls.n	80018cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e150      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	42470000 	.word	0x42470000
 80018c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ea      	bne.n	80018ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8097 	beq.w	8001a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ea:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a73      	ldr	r2, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff fbef 	bl	8001110 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff fbeb 	bl	8001110 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e10c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x2ea>
 800195c:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x30c>
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fbb0 	bl	8001110 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fbac 	bl	8001110 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0cb      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ee      	beq.n	80019b4 <HAL_RCC_OscConfig+0x334>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fb9a 	bl	8001110 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff fb96 	bl	8001110 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0b5      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a1 	beq.w	8001b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d05c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d141      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb6a 	bl	8001110 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fb66 	bl	8001110 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e087      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	491b      	ldr	r1, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb3f 	bl	8001110 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb3b 	bl	8001110 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e05c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x416>
 8001ab4:	e054      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb28 	bl	8001110 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb24 	bl	8001110 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e045      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
 8001ae2:	e03d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e038      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d028      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d121      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11a      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d111      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cc      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d90c      	bls.n	8001bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d044      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e067      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4934      	ldr	r1, [pc, #208]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff fa56 	bl	8001110 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff fa52 	bl	8001110 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d20c      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9b6 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	0800a8b0 	.word	0x0800a8b0
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d40:	b090      	sub	sp, #64	; 0x40
 8001d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x40>
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	f200 80a1 	bhi.w	8001ea8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d6e:	e09b      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d74:	e09b      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d7a:	e098      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d028      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001da4:	2100      	movs	r1, #0
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001da8:	fb03 f201 	mul.w	r2, r3, r1
 8001dac:	2300      	movs	r3, #0
 8001dae:	fb00 f303 	mul.w	r3, r0, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	4a43      	ldr	r2, [pc, #268]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001db6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc2:	4413      	add	r3, r2
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	61fa      	str	r2, [r7, #28]
 8001dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dd6:	f7fe fa63 	bl	80002a0 <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4613      	mov	r3, r2
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de2:	e053      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	2200      	movs	r2, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	617a      	str	r2, [r7, #20]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001df6:	f04f 0b00 	mov.w	fp, #0
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	465b      	mov	r3, fp
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0c:	0150      	lsls	r0, r2, #5
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	ebb2 080a 	subs.w	r8, r2, sl
 8001e16:	eb63 090b 	sbc.w	r9, r3, fp
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e32:	eb63 0509 	sbc.w	r5, r3, r9
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	00eb      	lsls	r3, r5, #3
 8001e40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e44:	00e2      	lsls	r2, r4, #3
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	eb14 030a 	adds.w	r3, r4, sl
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	eb45 030b 	adc.w	r3, r5, fp
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e62:	4629      	mov	r1, r5
 8001e64:	028b      	lsls	r3, r1, #10
 8001e66:	4621      	mov	r1, r4
 8001e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	028a      	lsls	r2, r1, #10
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	2200      	movs	r2, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	60fa      	str	r2, [r7, #12]
 8001e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e80:	f7fe fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ea6:	e002      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3740      	adds	r7, #64	; 0x40
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	017d7840 	.word	0x017d7840

08001ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e07b      	b.n	8001fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eea:	d009      	beq.n	8001f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
 8001ef2:	e005      	b.n	8001f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe ff1e 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0104 	and.w	r1, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f003 0210 	and.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_SPI_Transmit+0x22>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e126      	b.n	800224a <HAL_SPI_Transmit+0x270>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002004:	f7ff f884 	bl	8001110 <HAL_GetTick>
 8002008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d002      	beq.n	8002020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800201e:	e10b      	b.n	8002238 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_SPI_Transmit+0x52>
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002030:	e102      	b.n	8002238 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2203      	movs	r2, #3
 8002036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	d10f      	bne.n	800209a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d007      	beq.n	80020b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c0:	d14b      	bne.n	800215a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_SPI_Transmit+0xf6>
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d13e      	bne.n	800214e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	1c9a      	adds	r2, r3, #2
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020f4:	e02b      	b.n	800214e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d112      	bne.n	800212a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	1c9a      	adds	r2, r3, #2
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	86da      	strh	r2, [r3, #54]	; 0x36
 8002128:	e011      	b.n	800214e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800212a:	f7fe fff1 	bl	8001110 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d803      	bhi.n	8002142 <HAL_SPI_Transmit+0x168>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002140:	d102      	bne.n	8002148 <HAL_SPI_Transmit+0x16e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800214c:	e074      	b.n	8002238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ce      	bne.n	80020f6 <HAL_SPI_Transmit+0x11c>
 8002158:	e04c      	b.n	80021f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_SPI_Transmit+0x18e>
 8002162:	8afb      	ldrh	r3, [r7, #22]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d140      	bne.n	80021ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	330c      	adds	r3, #12
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800218e:	e02c      	b.n	80021ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d113      	bne.n	80021c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80021c4:	e011      	b.n	80021ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c6:	f7fe ffa3 	bl	8001110 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d803      	bhi.n	80021de <HAL_SPI_Transmit+0x204>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021dc:	d102      	bne.n	80021e4 <HAL_SPI_Transmit+0x20a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021e8:	e026      	b.n	8002238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1cd      	bne.n	8002190 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	6839      	ldr	r1, [r7, #0]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fa55 	bl	80026a8 <SPI_EndRxTxTransaction>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	77fb      	strb	r3, [r7, #31]
 8002234:	e000      	b.n	8002238 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002248:	7ffb      	ldrb	r3, [r7, #31]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b08c      	sub	sp, #48	; 0x30
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002260:	2301      	movs	r3, #1
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x26>
 8002274:	2302      	movs	r3, #2
 8002276:	e18a      	b.n	800258e <HAL_SPI_TransmitReceive+0x33c>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002280:	f7fe ff46 	bl	8001110 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800229a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d00f      	beq.n	80022c2 <HAL_SPI_TransmitReceive+0x70>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a8:	d107      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x68>
 80022b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
 80022bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022c0:	e15b      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_SPI_TransmitReceive+0x82>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_SPI_TransmitReceive+0x82>
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d103      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022da:	e14e      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d003      	beq.n	80022f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2205      	movs	r2, #5
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b40      	cmp	r3, #64	; 0x40
 8002332:	d007      	beq.n	8002344 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234c:	d178      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_SPI_TransmitReceive+0x10a>
 8002356:	8b7b      	ldrh	r3, [r7, #26]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d166      	bne.n	800242a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	1c9a      	adds	r2, r3, #2
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002380:	e053      	b.n	800242a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d11b      	bne.n	80023c8 <HAL_SPI_TransmitReceive+0x176>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x176>
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d113      	bne.n	80023c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	1c9a      	adds	r2, r3, #2
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d119      	bne.n	800240a <HAL_SPI_TransmitReceive+0x1b8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d014      	beq.n	800240a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	b292      	uxth	r2, r2
 80023ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800240a:	f7fe fe81 	bl	8001110 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002416:	429a      	cmp	r2, r3
 8002418:	d807      	bhi.n	800242a <HAL_SPI_TransmitReceive+0x1d8>
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	d003      	beq.n	800242a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002428:	e0a7      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1a6      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x130>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1a1      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x130>
 800243e:	e07c      	b.n	800253a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_SPI_TransmitReceive+0x1fc>
 8002448:	8b7b      	ldrh	r3, [r7, #26]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d16b      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002474:	e057      	b.n	8002526 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	d11c      	bne.n	80024be <HAL_SPI_TransmitReceive+0x26c>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d017      	beq.n	80024be <HAL_SPI_TransmitReceive+0x26c>
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d114      	bne.n	80024be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	7812      	ldrb	r2, [r2, #0]
 80024a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d119      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x2ae>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002500:	f7fe fe06 	bl	8001110 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250c:	429a      	cmp	r2, r3
 800250e:	d803      	bhi.n	8002518 <HAL_SPI_TransmitReceive+0x2c6>
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002516:	d102      	bne.n	800251e <HAL_SPI_TransmitReceive+0x2cc>
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002524:	e029      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1a2      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x224>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19d      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8b2 	bl	80026a8 <SPI_EndRxTxTransaction>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002556:	e010      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	e000      	b.n	800257a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002578:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800258a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800258e:	4618      	mov	r0, r3
 8002590:	3730      	adds	r7, #48	; 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025a8:	f7fe fdb2 	bl	8001110 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025b8:	f7fe fdaa 	bl	8001110 <HAL_GetTick>
 80025bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	015b      	lsls	r3, r3, #5
 80025c4:	0d1b      	lsrs	r3, r3, #20
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ce:	e054      	b.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d6:	d050      	beq.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025d8:	f7fe fd9a 	bl	8001110 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d902      	bls.n	80025ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d13d      	bne.n	800266a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002606:	d111      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002610:	d004      	beq.n	800261c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d107      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	d10f      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e017      	b.n	800269a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b01      	subs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	429a      	cmp	r2, r3
 8002696:	d19b      	bne.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000

080026a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <SPI_EndRxTxTransaction+0x7c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <SPI_EndRxTxTransaction+0x80>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0d5b      	lsrs	r3, r3, #21
 80026c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d2:	d112      	bne.n	80026fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff5a 	bl	8002598 <SPI_WaitFlagStateUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e00f      	b.n	800271a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3b01      	subs	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d0f2      	beq.n	80026fa <SPI_EndRxTxTransaction+0x52>
 8002714:	e000      	b.n	8002718 <SPI_EndRxTxTransaction+0x70>
        break;
 8002716:	bf00      	nop
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000
 8002728:	165e9f81 	.word	0x165e9f81

0800272c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4293      	cmp	r3, r2
 800273c:	bf38      	it	cc
 800273e:	4613      	movcc	r3, r2
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4293      	cmp	r3, r2
 800275c:	bf28      	it	cs
 800275e:	4613      	movcs	r3, r2
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	fbb3 f2f2 	udiv	r2, r3, r2
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	fb01 f202 	mul.w	r2, r1, r2
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ffde 	bl	800276c <lfs_aligndown>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fd65 	bl	80002d0 <__popcountsi2>
 8002806:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	1ad3      	subs	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8002834:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffee 	bl	800282c <lfs_fromle32>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffed 	bl	800285a <lfs_frombe32>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f006 fb28 	bl	8008ee8 <malloc>
 8002898:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f006 fb24 	bl	8008ef8 <free>
#else
    (void)p;
#endif
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68d8      	ldr	r0, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	461a      	mov	r2, r3
 80028ec:	21ff      	movs	r1, #255	; 0xff
 80028ee:	f006 fb29 	bl	8008f44 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	429a      	cmp	r2, r3
 8002920:	d208      	bcs.n	8002934 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8002922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292c:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800292e:	429a      	cmp	r2, r3
 8002930:	f240 811b 	bls.w	8002b6a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8002934:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002938:	e11c      	b.n	8002b74 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800293a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03f      	beq.n	80029c4 <lfs_bd_read+0xc0>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	429a      	cmp	r2, r3
 800294c:	d13a      	bne.n	80029c4 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8002958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295a:	429a      	cmp	r2, r3
 800295c:	d232      	bcs.n	80029c4 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002964:	429a      	cmp	r2, r3
 8002966:	d324      	bcc.n	80029b2 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	1acb      	subs	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	4619      	mov	r1, r3
 8002978:	69b8      	ldr	r0, [r7, #24]
 800297a:	f7ff fee7 	bl	800274c <lfs_min>
 800297e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800298a:	1acb      	subs	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4619      	mov	r1, r3
 8002992:	69f8      	ldr	r0, [r7, #28]
 8002994:	f006 fac8 	bl	8008f28 <memcpy>

                data += diff;
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4413      	add	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
                off += diff;
 80029a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4413      	add	r3, r2
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80029a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80029b0:	e0db      	b.n	8002b6a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	69b8      	ldr	r0, [r7, #24]
 80029be:	f7ff fec5 	bl	800274c <lfs_min>
 80029c2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d13a      	bne.n	8002a44 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4413      	add	r3, r2
        if (block == rcache->block &&
 80029d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029da:	429a      	cmp	r2, r3
 80029dc:	d232      	bcs.n	8002a44 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d324      	bcc.n	8002a32 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	69b8      	ldr	r0, [r7, #24]
 80029fa:	f7ff fea7 	bl	800274c <lfs_min>
 80029fe:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4619      	mov	r1, r3
 8002a12:	69f8      	ldr	r0, [r7, #28]
 8002a14:	f006 fa88 	bl	8008f28 <memcpy>

                data += diff;
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002a30:	e09b      	b.n	8002b6a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	69b8      	ldr	r0, [r7, #24]
 8002a3e:	f7ff fe85 	bl	800274c <lfs_min>
 8002a42:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d336      	bcc.n	8002aba <lfs_bd_read+0x1b6>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a58:	fb01 f202 	mul.w	r2, r1, r2
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d12b      	bne.n	8002aba <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a66:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d325      	bcc.n	8002aba <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4619      	mov	r1, r3
 8002a76:	69b8      	ldr	r0, [r7, #24]
 8002a78:	f7ff fe78 	bl	800276c <lfs_aligndown>
 8002a7c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a82:	685c      	ldr	r4, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a92:	47a0      	blx	r4
 8002a94:	6178      	str	r0, [r7, #20]
            if (err) {
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <lfs_bd_read+0x19c>
                return err;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	e069      	b.n	8002b74 <lfs_bd_read+0x270>
            }

            data += diff;
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8002ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8002ab8:	e057      	b.n	8002b6a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d305      	bcc.n	8002ad2 <lfs_bd_read+0x1ce>
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <lfs_bd_read+0x278>)
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <lfs_bd_read+0x27c>)
 8002aca:	216b      	movs	r1, #107	; 0x6b
 8002acc:	482d      	ldr	r0, [pc, #180]	; (8002b84 <lfs_bd_read+0x280>)
 8002ace:	f006 f9b1 	bl	8008e34 <__assert_func>
        rcache->block = block;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ae2:	f7ff fe43 	bl	800276c <lfs_aligndown>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8002aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7ff fe4b 	bl	8002796 <lfs_alignup>
 8002b00:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f7ff fe1e 	bl	800274c <lfs_min>
 8002b10:	4602      	mov	r2, r0
                - rcache->off,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8002b16:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7ff fe13 	bl	800274c <lfs_min>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b30:	685c      	ldr	r4, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	462b      	mov	r3, r5
 8002b4a:	47a0      	blx	r4
 8002b4c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dd05      	ble.n	8002b60 <lfs_bd_read+0x25c>
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <lfs_bd_read+0x284>)
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <lfs_bd_read+0x27c>)
 8002b58:	2176      	movs	r1, #118	; 0x76
 8002b5a:	480a      	ldr	r0, [pc, #40]	; (8002b84 <lfs_bd_read+0x280>)
 8002b5c:	f006 f96a 	bl	8008e34 <__assert_func>
        if (err) {
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <lfs_bd_read+0x266>
            return err;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	e004      	b.n	8002b74 <lfs_bd_read+0x270>
    while (size > 0) {
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f aee4 	bne.w	800293a <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7c:	08009f88 	.word	0x08009f88
 8002b80:	0800a8c0 	.word	0x0800a8c0
 8002b84:	08009fa8 	.word	0x08009fa8
 8002b88:	08009fbc 	.word	0x08009fbc

08002b8c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af04      	add	r7, sp, #16
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e039      	b.n	8002c1c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2108      	movs	r1, #8
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fdcb 	bl	800274c <lfs_min>
 8002bb6:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad1      	subs	r1, r2, r3
 8002bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	4413      	add	r3, r2
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	f107 0210 	add.w	r2, r7, #16
 8002bcc:	9202      	str	r2, [sp, #8]
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fe92 	bl	8002904 <lfs_bd_read>
 8002be0:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <lfs_bd_cmp+0x60>
            return res;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	e01c      	b.n	8002c26 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	18d1      	adds	r1, r2, r3
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 f985 	bl	8008f08 <memcmp>
 8002bfe:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da01      	bge.n	8002c10 <lfs_bd_cmp+0x84>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00a      	b.n	8002c26 <lfs_bd_cmp+0x9a>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e008      	b.n	8002c26 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3c1      	bcc.n	8002ba8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d061      	beq.n	8002d0c <lfs_bd_flush+0xdc>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f113 0f02 	cmn.w	r3, #2
 8002c50:	d05c      	beq.n	8002d0c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d305      	bcc.n	8002c6c <lfs_bd_flush+0x3c>
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <lfs_bd_flush+0xe8>)
 8002c62:	4a2e      	ldr	r2, [pc, #184]	; (8002d1c <lfs_bd_flush+0xec>)
 8002c64:	219e      	movs	r1, #158	; 0x9e
 8002c66:	482e      	ldr	r0, [pc, #184]	; (8002d20 <lfs_bd_flush+0xf0>)
 8002c68:	f006 f8e4 	bl	8008e34 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7ff fd8c 	bl	8002796 <lfs_alignup>
 8002c7e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c84:	689c      	ldr	r4, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	47a0      	blx	r4
 8002c9e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	dd05      	ble.n	8002cb2 <lfs_bd_flush+0x82>
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <lfs_bd_flush+0xf4>)
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <lfs_bd_flush+0xec>)
 8002caa:	21a2      	movs	r1, #162	; 0xa2
 8002cac:	481c      	ldr	r0, [pc, #112]	; (8002d20 <lfs_bd_flush+0xf0>)
 8002cae:	f006 f8c1 	bl	8008e34 <__assert_func>
        if (err) {
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <lfs_bd_flush+0x8c>
            return err;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	e028      	b.n	8002d0e <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d020      	beq.n	8002d04 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff fdf7 	bl	80028b8 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	9003      	str	r0, [sp, #12]
 8002cda:	9102      	str	r1, [sp, #8]
 8002cdc:	9201      	str	r2, [sp, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff ff50 	bl	8002b8c <lfs_bd_cmp>
 8002cec:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da01      	bge.n	8002cf8 <lfs_bd_flush+0xc8>
                return res;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	e00a      	b.n	8002d0e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002cfe:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002d02:	e004      	b.n	8002d0e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fde5 	bl	80028d6 <lfs_cache_zero>
    }

    return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08009fc8 	.word	0x08009fc8
 8002d1c:	0800a8cc 	.word	0x0800a8cc
 8002d20:	08009fa8 	.word	0x08009fa8
 8002d24:	08009fbc 	.word	0x08009fbc

08002d28 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fdbd 	bl	80028b8 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff ff73 	bl	8002c30 <lfs_bd_flush>
 8002d4a:	6178      	str	r0, [r7, #20]
    if (err) {
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <lfs_bd_sync+0x2e>
        return err;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	e011      	b.n	8002d7a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d60:	4610      	mov	r0, r2
 8002d62:	4798      	blx	r3
 8002d64:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	dd05      	ble.n	8002d78 <lfs_bd_sync+0x50>
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <lfs_bd_sync+0x5c>)
 8002d6e:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <lfs_bd_sync+0x60>)
 8002d70:	21c8      	movs	r1, #200	; 0xc8
 8002d72:	4806      	ldr	r0, [pc, #24]	; (8002d8c <lfs_bd_sync+0x64>)
 8002d74:	f006 f85e 	bl	8008e34 <__assert_func>
    return err;
 8002d78:	697b      	ldr	r3, [r7, #20]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	08009fbc 	.word	0x08009fbc
 8002d88:	0800a8dc 	.word	0x0800a8dc
 8002d8c:	08009fa8 	.word	0x08009fa8

08002d90 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	f113 0f02 	cmn.w	r3, #2
 8002da8:	d00b      	beq.n	8002dc2 <lfs_bd_prog+0x32>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d305      	bcc.n	8002dc2 <lfs_bd_prog+0x32>
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <lfs_bd_prog+0x144>)
 8002db8:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <lfs_bd_prog+0x148>)
 8002dba:	21d3      	movs	r1, #211	; 0xd3
 8002dbc:	4847      	ldr	r0, [pc, #284]	; (8002edc <lfs_bd_prog+0x14c>)
 8002dbe:	f006 f839 	bl	8008e34 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d977      	bls.n	8002ec2 <lfs_bd_prog+0x132>
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <lfs_bd_prog+0x150>)
 8002dd4:	4a40      	ldr	r2, [pc, #256]	; (8002ed8 <lfs_bd_prog+0x148>)
 8002dd6:	21d4      	movs	r1, #212	; 0xd4
 8002dd8:	4840      	ldr	r0, [pc, #256]	; (8002edc <lfs_bd_prog+0x14c>)
 8002dda:	f006 f82b 	bl	8008e34 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d151      	bne.n	8002e8c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d34c      	bcc.n	8002e8c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	4413      	add	r3, r2
                off >= pcache->off &&
 8002dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d243      	bcs.n	8002e8c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8002e12:	4413      	add	r3, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e18:	f7ff fc98 	bl	800274c <lfs_min>
 8002e1c:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e28:	1acb      	subs	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	69f9      	ldr	r1, [r7, #28]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f006 f879 	bl	8008f28 <memcpy>

            data += diff;
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8002e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6898      	ldr	r0, [r3, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7ff fc66 	bl	800272c <lfs_max>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d126      	bne.n	8002ec2 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fed8 	bl	8002c30 <lfs_bd_flush>
 8002e80:	6178      	str	r0, [r7, #20]
                if (err) {
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01c      	beq.n	8002ec2 <lfs_bd_prog+0x132>
                    return err;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	e01e      	b.n	8002eca <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d005      	beq.n	8002ea2 <lfs_bd_prog+0x112>
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <lfs_bd_prog+0x154>)
 8002e98:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <lfs_bd_prog+0x148>)
 8002e9a:	21f1      	movs	r1, #241	; 0xf1
 8002e9c:	480f      	ldr	r0, [pc, #60]	; (8002edc <lfs_bd_prog+0x14c>)
 8002e9e:	f005 ffc9 	bl	8008e34 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eb2:	f7ff fc5b 	bl	800276c <lfs_aligndown>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d18a      	bne.n	8002dde <lfs_bd_prog+0x4e>
    }

    return 0;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	08009ff0 	.word	0x08009ff0
 8002ed8:	0800a8e8 	.word	0x0800a8e8
 8002edc:	08009fa8 	.word	0x08009fa8
 8002ee0:	0800a02c 	.word	0x0800a02c
 8002ee4:	0800a050 	.word	0x0800a050

08002ee8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d305      	bcc.n	8002f0a <lfs_bd_erase+0x22>
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <lfs_bd_erase+0x54>)
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <lfs_bd_erase+0x58>)
 8002f02:	21ff      	movs	r1, #255	; 0xff
 8002f04:	480f      	ldr	r0, [pc, #60]	; (8002f44 <lfs_bd_erase+0x5c>)
 8002f06:	f005 ff95 	bl	8008e34 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	4610      	mov	r0, r2
 8002f18:	4798      	blx	r3
 8002f1a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dd06      	ble.n	8002f30 <lfs_bd_erase+0x48>
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <lfs_bd_erase+0x60>)
 8002f24:	4a06      	ldr	r2, [pc, #24]	; (8002f40 <lfs_bd_erase+0x58>)
 8002f26:	f240 1101 	movw	r1, #257	; 0x101
 8002f2a:	4806      	ldr	r0, [pc, #24]	; (8002f44 <lfs_bd_erase+0x5c>)
 8002f2c:	f005 ff82 	bl	8008e34 <__assert_func>
    return err;
 8002f30:	68fb      	ldr	r3, [r7, #12]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08009f88 	.word	0x08009f88
 8002f40:	0800a8f4 	.word	0x0800a8f4
 8002f44:	08009fa8 	.word	0x08009fa8
 8002f48:	08009fbc 	.word	0x08009fbc

08002f4c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d005      	beq.n	8002f94 <lfs_pair_isnull+0x1e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f92:	d101      	bne.n	8002f98 <lfs_pair_isnull+0x22>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <lfs_pair_isnull+0x24>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d017      	beq.n	8002ff2 <lfs_pair_cmp+0x46>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d00f      	beq.n	8002ff2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d008      	beq.n	8002ff2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d001      	beq.n	8002ff2 <lfs_pair_cmp+0x46>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <lfs_pair_cmp+0x48>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d107      	bne.n	8003026 <lfs_pair_sync+0x26>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	3304      	adds	r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d00d      	beq.n	8003042 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d108      	bne.n	8003046 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d101      	bne.n	8003046 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <lfs_pair_sync+0x48>
 8003046:	2300      	movs	r3, #0
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800305a:	b590      	push	{r4, r7, lr}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fbe0 	bl	800282c <lfs_fromle32>
 800306c:	4602      	mov	r2, r0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1d1c      	adds	r4, r3, #4
 800307c:	4610      	mov	r0, r2
 800307e:	f7ff fbd5 	bl	800282c <lfs_fromle32>
 8003082:	4603      	mov	r3, r0
 8003084:	6023      	str	r3, [r4, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fbd1 	bl	8002842 <lfs_tole32>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1d1c      	adds	r4, r3, #4
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7ff fbc6 	bl	8002842 <lfs_tole32>
 80030b6:	4603      	mov	r3, r0
 80030b8:	6023      	str	r3, [r4, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}

080030c2 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	0fdb      	lsrs	r3, r3, #31
 80030d0:	b2db      	uxtb	r3, r3
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	059b      	lsls	r3, r3, #22
 80030ea:	159b      	asrs	r3, r3, #22
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0d1b      	lsrs	r3, r3, #20
 8003110:	b29b      	uxth	r3, r3
 8003112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003116:	b29b      	uxth	r3, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0d1b      	lsrs	r3, r3, #20
 8003130:	b29b      	uxth	r3, r3
 8003132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003136:	b29b      	uxth	r3, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0d1b      	lsrs	r3, r3, #20
 8003150:	b2db      	uxtb	r3, r3
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffec 	bl	8003144 <lfs_tag_chunk>
 800316c:	4603      	mov	r3, r0
 800316e:	b25b      	sxtb	r3, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	b29b      	uxth	r3, r3
 8003186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318a:	b29b      	uxth	r3, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff8f 	bl	80030de <lfs_tag_isdelete>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ffe5 	bl	8003198 <lfs_tag_size>
 80031ce:	4603      	mov	r3, r0
 80031d0:	3304      	adds	r3, #4
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e012      	b.n	8003210 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4403      	add	r3, r0
 8003206:	404a      	eors	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b02      	cmp	r3, #2
 8003214:	dde9      	ble.n	80031ea <lfs_gstate_xor+0x10>
    }
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e00b      	b.n	800324a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <lfs_gstate_iszero+0x20>
            return false;
 8003240:	2300      	movs	r3, #0
 8003242:	e006      	b.n	8003252 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b02      	cmp	r3, #2
 800324e:	ddf0      	ble.n	8003232 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8003250:	2301      	movs	r3, #1
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff94 	bl	8003198 <lfs_tag_size>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff81 	bl	8003198 <lfs_tag_size>
 8003296:	4603      	mov	r3, r0
 8003298:	b2db      	uxtb	r3, r3
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff28 	bl	8003104 <lfs_tag_type1>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff14 	bl	8003104 <lfs_tag_type1>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <lfs_gstate_hasmovehere+0x30>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe5f 	bl	8002fac <lfs_pair_cmp>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <lfs_gstate_hasmovehere+0x30>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <lfs_gstate_hasmovehere+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fa89 	bl	800282c <lfs_fromle32>
 800331a:	4602      	mov	r2, r0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fa81 	bl	800282c <lfs_fromle32>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fa79 	bl	800282c <lfs_fromle32>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fa74 	bl	8002842 <lfs_tole32>
 800335a:	4602      	mov	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fa6c 	bl	8002842 <lfs_tole32>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fa64 	bl	8002842 <lfs_tole32>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fa49 	bl	800282c <lfs_fromle32>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fa41 	bl	800282c <lfs_fromle32>
 80033aa:	4602      	mov	r2, r0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	605a      	str	r2, [r3, #4]
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fa3c 	bl	8002842 <lfs_tole32>
 80033ca:	4602      	mov	r2, r0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fa34 	bl	8002842 <lfs_tole32>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fa19 	bl	800282c <lfs_fromle32>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fa11 	bl	800282c <lfs_fromle32>
 800340a:	4602      	mov	r2, r0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fa09 	bl	800282c <lfs_fromle32>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fa01 	bl	800282c <lfs_fromle32>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f9f9 	bl	800282c <lfs_fromle32>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f9f1 	bl	800282c <lfs_fromle32>
 800344a:	4602      	mov	r2, r0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	615a      	str	r2, [r3, #20]
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff f9ec 	bl	8002842 <lfs_tole32>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9e4 	bl	8002842 <lfs_tole32>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f9dc 	bl	8002842 <lfs_tole32>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f9d4 	bl	8002842 <lfs_tole32>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f9cc 	bl	8002842 <lfs_tole32>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f9c4 	bl	8002842 <lfs_tole32>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	615a      	str	r2, [r3, #20]
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e009      	b.n	80034ec <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d101      	bne.n	80034e6 <lfs_mlist_isopen+0x1e>
            return true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e007      	b.n	80034f6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f1      	bne.n	80034d8 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e00d      	b.n	8003530 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d105      	bne.n	800352a <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]
            break;
 8003528:	e007      	b.n	800353a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ed      	bne.n	8003514 <lfs_mlist_remove+0x12>
        }
    }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4413      	add	r3, r2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800358c:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800358e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003592:	fb01 f202 	mul.w	r2, r1, r2
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d212      	bcs.n	80035ca <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	440a      	add	r2, r1
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	f002 021f 	and.w	r2, r2, #31
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffe4 	bl	80035d8 <lfs_alloc_ack>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8003622:	e04f      	b.n	80036c4 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d132      	bne.n	80036c4 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800366a:	6a12      	ldr	r2, [r2, #32]
 800366c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003670:	fb01 f202 	mul.w	r2, r1, r2
 8003674:	1a9a      	subs	r2, r3, r2
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800367a:	e009      	b.n	8003690 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	429a      	cmp	r2, r3
 800369a:	d011      	beq.n	80036c0 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1dd      	bne.n	800367c <lfs_alloc+0x64>
                }

                return 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e050      	b.n	8003766 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1a9      	bne.n	8003624 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	4413      	add	r3, r2
 80036e2:	4a23      	ldr	r2, [pc, #140]	; (8003770 <lfs_alloc+0x158>)
 80036e4:	9200      	str	r2, [sp, #0]
 80036e6:	f240 2247 	movw	r2, #583	; 0x247
 80036ea:	4922      	ldr	r1, [pc, #136]	; (8003774 <lfs_alloc+0x15c>)
 80036ec:	4822      	ldr	r0, [pc, #136]	; (8003778 <lfs_alloc+0x160>)
 80036ee:	f005 ffff 	bl	80096f0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80036f2:	f06f 031b 	mvn.w	r3, #27
 80036f6:	e036      	b.n	8003766 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003706:	6a12      	ldr	r2, [r2, #32]
 8003708:	fbb3 f1f2 	udiv	r1, r3, r2
 800370c:	fb01 f202 	mul.w	r2, r1, r2
 8003710:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	00da      	lsls	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7ff f811 	bl	800274c <lfs_min>
 800372a:	4602      	mov	r2, r0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	461a      	mov	r2, r3
 8003742:	2100      	movs	r1, #0
 8003744:	f005 fbfe 	bl	8008f44 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8003748:	2301      	movs	r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	490b      	ldr	r1, [pc, #44]	; (800377c <lfs_alloc+0x164>)
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f004 fd50 	bl	80081f4 <lfs_fs_rawtraverse>
 8003754:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f43f af62 	beq.w	8003622 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff49 	bl	80035f6 <lfs_alloc_drop>
            return err;
 8003764:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	0800a09c 	.word	0x0800a09c
 8003774:	08009fa8 	.word	0x08009fa8
 8003778:	0800a074 	.word	0x0800a074
 800377c:	0800356b 	.word	0x0800356b

08003780 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b08f      	sub	sp, #60	; 0x3c
 8003784:	af04      	add	r7, sp, #16
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	333c      	adds	r3, #60	; 0x3c
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fd8e 	bl	80032c8 <lfs_gstate_hasmovehere>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80b9 	beq.w	8003926 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fcdf 	bl	8003178 <lfs_tag_id>
 80037ba:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80b2 	beq.w	8003926 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fcd6 	bl	8003178 <lfs_tag_id>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461c      	mov	r4, r3
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	f7ff fcd1 	bl	8003178 <lfs_tag_id>
 80037d6:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80037d8:	429c      	cmp	r4, r3
 80037da:	f200 80a4 	bhi.w	8003926 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80037e4:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80037e6:	e09e      	b.n	8003926 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fce1 	bl	80031b2 <lfs_tag_dsize>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2204      	movs	r2, #4
 8003804:	9203      	str	r2, [sp, #12]
 8003806:	f107 0210 	add.w	r2, r7, #16
 800380a:	9202      	str	r2, [sp, #8]
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	9201      	str	r2, [sp, #4]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2304      	movs	r3, #4
 8003814:	460a      	mov	r2, r1
 8003816:	2100      	movs	r1, #0
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff f873 	bl	8002904 <lfs_bd_read>
 800381e:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <lfs_dir_getslice+0xaa>
            return err;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	e089      	b.n	800393e <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f814 	bl	800285a <lfs_frombe32>
 8003832:	4602      	mov	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4053      	eors	r3, r2
 8003838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800383c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fc9a 	bl	8003178 <lfs_tag_id>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02b      	beq.n	80038a2 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800384a:	69f8      	ldr	r0, [r7, #28]
 800384c:	f7ff fc5a 	bl	8003104 <lfs_tag_type1>
 8003850:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d124      	bne.n	80038a2 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8003858:	69f8      	ldr	r0, [r7, #28]
 800385a:	f7ff fc8d 	bl	8003178 <lfs_tag_id>
 800385e:	4603      	mov	r3, r0
 8003860:	461c      	mov	r4, r3
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fc85 	bl	8003178 <lfs_tag_id>
 800386e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003870:	429c      	cmp	r4, r3
 8003872:	d816      	bhi.n	80038a2 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <lfs_dir_getslice+0x1c8>)
 800387c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800387e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	429a      	cmp	r2, r3
 800388a:	d102      	bne.n	8003892 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800388c:	f06f 0301 	mvn.w	r3, #1
 8003890:	e055      	b.n	800393e <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003892:	69f8      	ldr	r0, [r7, #28]
 8003894:	f7ff fc63 	bl	800315e <lfs_tag_splice>
 8003898:	4603      	mov	r3, r0
 800389a:	029a      	lsls	r2, r3, #10
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	4413      	add	r3, r2
 80038a0:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	405a      	eors	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d138      	bne.n	8003926 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 80038b4:	69f8      	ldr	r0, [r7, #28]
 80038b6:	f7ff fc12 	bl	80030de <lfs_tag_isdelete>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 80038c0:	f06f 0301 	mvn.w	r3, #1
 80038c4:	e03b      	b.n	800393e <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80038c6:	69f8      	ldr	r0, [r7, #28]
 80038c8:	f7ff fc66 	bl	8003198 <lfs_tag_size>
 80038cc:	4603      	mov	r3, r0
 80038ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ff3b 	bl	800274c <lfs_min>
 80038d6:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80038de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e2:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80038e4:	3204      	adds	r2, #4
 80038e6:	6979      	ldr	r1, [r7, #20]
 80038e8:	9103      	str	r1, [sp, #12]
 80038ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ec:	9102      	str	r1, [sp, #8]
 80038ee:	9201      	str	r2, [sp, #4]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4602      	mov	r2, r0
 80038f6:	2100      	movs	r1, #0
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff f803 	bl	8002904 <lfs_bd_read>
 80038fe:	61b8      	str	r0, [r7, #24]
            if (err) {
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <lfs_dir_getslice+0x18a>
                return err;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	e019      	b.n	800393e <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800390a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	18d0      	adds	r0, r2, r3
 8003910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	461a      	mov	r2, r3
 8003918:	2100      	movs	r1, #0
 800391a:	f005 fb13 	bl	8008f44 <memset>

            return tag + gdiff;
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	e00b      	b.n	800393e <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fc42 	bl	80031b2 <lfs_tag_dsize>
 800392e:	4603      	mov	r3, r0
 8003930:	3304      	adds	r3, #4
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	429a      	cmp	r2, r3
 8003936:	f4bf af57 	bcs.w	80037e8 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800393a:	f06f 0301 	mvn.w	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	372c      	adds	r7, #44	; 0x2c
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	000ffc00 	.word	0x000ffc00

0800394c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af04      	add	r7, sp, #16
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	f7ff fc1c 	bl	8003198 <lfs_tag_size>
 8003960:	4603      	mov	r3, r0
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ff04 	bl	8003780 <lfs_dir_getslice>
 8003978:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8003982:	b580      	push	{r7, lr}
 8003984:	b08c      	sub	sp, #48	; 0x30
 8003986:	af04      	add	r7, sp, #16
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8003994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003998:	441a      	add	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f240 80c0 	bls.w	8003b26 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80039a6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80039aa:	e0c1      	b.n	8003b30 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d03f      	beq.n	8003a36 <lfs_dir_getread+0xb4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f113 0f02 	cmn.w	r3, #2
 80039be:	d13a      	bne.n	8003a36 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80039ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d232      	bcs.n	8003a36 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d324      	bcc.n	8003a24 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	1acb      	subs	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f7fe feae 	bl	800274c <lfs_min>
 80039f0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039fc:	1acb      	subs	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4619      	mov	r1, r3
 8003a04:	69f8      	ldr	r0, [r7, #28]
 8003a06:	f005 fa8f 	bl	8008f28 <memcpy>

                data += diff;
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4413      	add	r3, r2
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003a22:	e080      	b.n	8003b26 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	69b8      	ldr	r0, [r7, #24]
 8003a30:	f7fe fe8c 	bl	800274c <lfs_min>
 8003a34:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f113 0f02 	cmn.w	r3, #2
 8003a3e:	d13a      	bne.n	8003ab6 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d232      	bcs.n	8003ab6 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d324      	bcc.n	8003aa4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	1acb      	subs	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	69b8      	ldr	r0, [r7, #24]
 8003a6c:	f7fe fe6e 	bl	800274c <lfs_min>
 8003a70:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a7c:	1acb      	subs	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4619      	mov	r1, r3
 8003a84:	69f8      	ldr	r0, [r7, #28]
 8003a86:	f005 fa4f 	bl	8008f28 <memcpy>

                data += diff;
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	4413      	add	r3, r2
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003a9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003aa2:	e040      	b.n	8003b26 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	4619      	mov	r1, r3
 8003aae:	69b8      	ldr	r0, [r7, #24]
 8003ab0:	f7fe fe4c 	bl	800274c <lfs_min>
 8003ab4:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ac8:	f7fe fe50 	bl	800276c <lfs_aligndown>
 8003acc:	4602      	mov	r2, r0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe fe58 	bl	8002796 <lfs_alignup>
 8003ae6:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe fe2b 	bl	800274c <lfs_min>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	6889      	ldr	r1, [r1, #8]
 8003b08:	9102      	str	r1, [sp, #8]
 8003b0a:	9201      	str	r2, [sp, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff fe33 	bl	8003780 <lfs_dir_getslice>
 8003b1a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da01      	bge.n	8003b26 <lfs_dir_getread+0x1a4>
            return err;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	e004      	b.n	8003b30 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8003b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f af3f 	bne.w	80039ac <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <lfs_dir_traverse_filter+0x1e>
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <lfs_dir_traverse_filter+0xac>)
 8003b54:	e000      	b.n	8003b58 <lfs_dir_traverse_filter+0x20>
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003b58:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	405a      	eors	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fab5 	bl	80030de <lfs_tag_isdelete>
 8003b74:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <lfs_dir_traverse_filter+0xac>)
 8003b7e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <lfs_dir_traverse_filter+0xb4>)
 8003b86:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003b88:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003b8c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d104      	bne.n	8003b9e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
        return true;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01e      	b.n	8003bdc <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003b9e:	68b8      	ldr	r0, [r7, #8]
 8003ba0:	f7ff fab0 	bl	8003104 <lfs_tag_type1>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d116      	bne.n	8003bda <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003bac:	68b8      	ldr	r0, [r7, #8]
 8003bae:	f7ff fae3 	bl	8003178 <lfs_tag_id>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461c      	mov	r4, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fadc 	bl	8003178 <lfs_tag_id>
 8003bc0:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d809      	bhi.n	8003bda <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003bc6:	68b8      	ldr	r0, [r7, #8]
 8003bc8:	f7ff fac9 	bl	800315e <lfs_tag_splice>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	029a      	lsls	r2, r3, #10
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	7ffffc00 	.word	0x7ffffc00
 8003be8:	700ffc00 	.word	0x700ffc00
 8003bec:	000ffc00 	.word	0x000ffc00

08003bf0 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b0c1      	sub	sp, #260	; 0x104
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7ff fad4 	bl	80031b2 <lfs_tag_dsize>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	441a      	add	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d237      	bcs.n	8003c88 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003c18:	6838      	ldr	r0, [r7, #0]
 8003c1a:	f7ff faca 	bl	80031b2 <lfs_tag_dsize>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	9203      	str	r2, [sp, #12]
 8003c30:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c34:	9202      	str	r2, [sp, #8]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	9201      	str	r2, [sp, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	460a      	mov	r2, r1
 8003c40:	2100      	movs	r1, #0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7fe fe5e 	bl	8002904 <lfs_bd_read>
 8003c48:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <lfs_dir_traverse+0x6a>
                    return err;
 8003c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c58:	e3a6      	b.n	80043a8 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fdfc 	bl	800285a <lfs_frombe32>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4053      	eors	r3, r2
 8003c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c6c:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	e01b      	b.n	8003cc0 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	dd13      	ble.n	8003cb8 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003c98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cb6:	e003      	b.n	8003cc0 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003cbe:	e2a2      	b.n	8004206 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003cc0:	4b7e      	ldr	r3, [pc, #504]	; (8003ebc <lfs_dir_traverse+0x2cc>)
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	405a      	eors	r2, r3
 8003cce:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8285 	bne.w	80041ea <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003ce0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003ce4:	f7ff fa48 	bl	8003178 <lfs_tag_id>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80f0 	beq.w	8003ed0 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003cf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d906      	bls.n	8003d06 <lfs_dir_traverse+0x116>
 8003cf8:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <lfs_dir_traverse+0x2d0>)
 8003cfa:	4a72      	ldr	r2, [pc, #456]	; (8003ec4 <lfs_dir_traverse+0x2d4>)
 8003cfc:	f240 314e 	movw	r1, #846	; 0x34e
 8003d00:	4871      	ldr	r0, [pc, #452]	; (8003ec8 <lfs_dir_traverse+0x2d8>)
 8003d02:	f005 f897 	bl	8008e34 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003d06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	33f0      	adds	r3, #240	; 0xf0
 8003d16:	443b      	add	r3, r7
 8003d18:	3b98      	subs	r3, #152	; 0x98
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	33f0      	adds	r3, #240	; 0xf0
 8003d2c:	443b      	add	r3, r7
 8003d2e:	3b94      	subs	r3, #148	; 0x94
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	33f0      	adds	r3, #240	; 0xf0
 8003d42:	443b      	add	r3, r7
 8003d44:	3b90      	subs	r3, #144	; 0x90
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	33f0      	adds	r3, #240	; 0xf0
 8003d58:	443b      	add	r3, r7
 8003d5a:	3b8c      	subs	r3, #140	; 0x8c
 8003d5c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	33f0      	adds	r3, #240	; 0xf0
 8003d70:	443b      	add	r3, r7
 8003d72:	3b88      	subs	r3, #136	; 0x88
 8003d74:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	33f0      	adds	r3, #240	; 0xf0
 8003d88:	443b      	add	r3, r7
 8003d8a:	3b84      	subs	r3, #132	; 0x84
 8003d8c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	33f0      	adds	r3, #240	; 0xf0
 8003da0:	443b      	add	r3, r7
 8003da2:	3b80      	subs	r3, #128	; 0x80
 8003da4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	33f0      	adds	r3, #240	; 0xf0
 8003db8:	443b      	add	r3, r7
 8003dba:	3b7c      	subs	r3, #124	; 0x7c
 8003dbc:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	33f0      	adds	r3, #240	; 0xf0
 8003dd0:	443b      	add	r3, r7
 8003dd2:	3b7a      	subs	r3, #122	; 0x7a
 8003dd4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	33f0      	adds	r3, #240	; 0xf0
 8003de8:	443b      	add	r3, r7
 8003dea:	3b78      	subs	r3, #120	; 0x78
 8003dec:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	33f0      	adds	r3, #240	; 0xf0
 8003e00:	443b      	add	r3, r7
 8003e02:	3b74      	subs	r3, #116	; 0x74
 8003e04:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	33f0      	adds	r3, #240	; 0xf0
 8003e18:	443b      	add	r3, r7
 8003e1a:	3b70      	subs	r3, #112	; 0x70
 8003e1c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	33f0      	adds	r3, #240	; 0xf0
 8003e30:	443b      	add	r3, r7
 8003e32:	3b6c      	subs	r3, #108	; 0x6c
 8003e34:	6019      	str	r1, [r3, #0]
 8003e36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	33f0      	adds	r3, #240	; 0xf0
 8003e44:	443b      	add	r3, r7
 8003e46:	3b68      	subs	r3, #104	; 0x68
 8003e48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	33f0      	adds	r3, #240	; 0xf0
 8003e5c:	443b      	add	r3, r7
 8003e5e:	3b68      	subs	r3, #104	; 0x68
 8003e60:	3304      	adds	r3, #4
 8003e62:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e6a:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003e6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e72:	3301      	adds	r3, #1
 8003e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <lfs_dir_traverse+0x2dc>)
 8003e98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8003e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3328      	adds	r3, #40	; 0x28
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003eb8:	e6a4      	b.n	8003c04 <lfs_dir_traverse+0x14>
 8003eba:	bf00      	nop
 8003ebc:	7ff00000 	.word	0x7ff00000
 8003ec0:	0800a0a0 	.word	0x0800a0a0
 8003ec4:	0800a904 	.word	0x0800a904
 8003ec8:	08009fa8 	.word	0x08009fa8
 8003ecc:	08003b39 	.word	0x08003b39
                continue;
            }
        }

popped:
 8003ed0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8003ed2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003ed6:	f7ff f94f 	bl	8003178 <lfs_tag_id>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f948 	bl	8003178 <lfs_tag_id>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003eec:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f200 817c 	bhi.w	80041ee <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff f93d 	bl	8003178 <lfs_tag_id>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f240 8171 	bls.w	80041ee <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f908 	bl	8003124 <lfs_tag_type3>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f43f ae74 	beq.w	8003c04 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f900 	bl	8003124 <lfs_tag_type3>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	f240 1301 	movw	r3, #257	; 0x101
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f040 80e0 	bne.w	80040f2 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8003f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f36:	4ab1      	ldr	r2, [pc, #708]	; (80041fc <lfs_dir_traverse+0x60c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f000 815a 	beq.w	80041f2 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8003f3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	33f0      	adds	r3, #240	; 0xf0
 8003f4c:	443b      	add	r3, r7
 8003f4e:	3b98      	subs	r3, #152	; 0x98
 8003f50:	4618      	mov	r0, r3
 8003f52:	233c      	movs	r3, #60	; 0x3c
 8003f54:	461a      	mov	r2, r3
 8003f56:	2100      	movs	r1, #0
 8003f58:	f004 fff4 	bl	8008f44 <memset>
 8003f5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	33f0      	adds	r3, #240	; 0xf0
 8003f6a:	443b      	add	r3, r7
 8003f6c:	3b98      	subs	r3, #152	; 0x98
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	33f0      	adds	r3, #240	; 0xf0
 8003f80:	443b      	add	r3, r7
 8003f82:	3b94      	subs	r3, #148	; 0x94
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	33f0      	adds	r3, #240	; 0xf0
 8003f96:	443b      	add	r3, r7
 8003f98:	3b90      	subs	r3, #144	; 0x90
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	33f0      	adds	r3, #240	; 0xf0
 8003fac:	443b      	add	r3, r7
 8003fae:	3b8c      	subs	r3, #140	; 0x8c
 8003fb0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	33f0      	adds	r3, #240	; 0xf0
 8003fc4:	443b      	add	r3, r7
 8003fc6:	3b88      	subs	r3, #136	; 0x88
 8003fc8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	33f0      	adds	r3, #240	; 0xf0
 8003fdc:	443b      	add	r3, r7
 8003fde:	3b84      	subs	r3, #132	; 0x84
 8003fe0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	33f0      	adds	r3, #240	; 0xf0
 8003ff4:	443b      	add	r3, r7
 8003ff6:	3b80      	subs	r3, #128	; 0x80
 8003ff8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	33f0      	adds	r3, #240	; 0xf0
 800400c:	443b      	add	r3, r7
 800400e:	3b7c      	subs	r3, #124	; 0x7c
 8004010:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	33f0      	adds	r3, #240	; 0xf0
 8004024:	443b      	add	r3, r7
 8004026:	3b7a      	subs	r3, #122	; 0x7a
 8004028:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800402c:	801a      	strh	r2, [r3, #0]
 800402e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	33f0      	adds	r3, #240	; 0xf0
 800403c:	443b      	add	r3, r7
 800403e:	3b78      	subs	r3, #120	; 0x78
 8004040:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	33f0      	adds	r3, #240	; 0xf0
 8004054:	443b      	add	r3, r7
 8004056:	3b74      	subs	r3, #116	; 0x74
 8004058:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	33f0      	adds	r3, #240	; 0xf0
 800406c:	443b      	add	r3, r7
 800406e:	3b70      	subs	r3, #112	; 0x70
 8004070:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004074:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8004076:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800407a:	3301      	adds	r3, #1
 800407c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f888 	bl	8003198 <lfs_tag_size>
 8004088:	4603      	mov	r3, r0
 800408a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f871 	bl	8003178 <lfs_tag_id>
 8004096:	4603      	mov	r3, r0
 8004098:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	60bb      	str	r3, [r7, #8]
            off = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040aa:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80040b8:	4b51      	ldr	r3, [pc, #324]	; (8004200 <lfs_dir_traverse+0x610>)
 80040ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80040be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80040c6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80040ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80040ce:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80040d2:	3301      	adds	r3, #1
 80040d4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80040d8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80040dc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80040e8:	4413      	add	r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80040f0:	e588      	b.n	8003c04 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f815 	bl	8003124 <lfs_tag_type3>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004100:	d159      	bne.n	80041b6 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004108:	e04b      	b.n	80041a2 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004112:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	461a      	mov	r2, r3
 8004120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004124:	4413      	add	r3, r2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800412c:	051c      	lsls	r4, r3, #20
 800412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff f821 	bl	8003178 <lfs_tag_id>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800413e:	4413      	add	r3, r2
 8004140:	029b      	lsls	r3, r3, #10
 8004142:	ea44 0103 	orr.w	r1, r4, r3
 8004146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004158:	4413      	add	r3, r2
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800415e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	461a      	mov	r2, r3
 800416c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004170:	4413      	add	r3, r2
 8004172:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004178:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800417c:	4798      	blx	r3
 800417e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8004182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004186:	2b00      	cmp	r3, #0
 8004188:	da02      	bge.n	8004190 <lfs_dir_traverse+0x5a0>
                    return res;
 800418a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800418e:	e10b      	b.n	80043a8 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8004190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d12e      	bne.n	80041f6 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419c:	3301      	adds	r3, #1
 800419e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fff7 	bl	8003198 <lfs_tag_size>
 80041aa:	4602      	mov	r2, r0
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d3aa      	bcc.n	800410a <lfs_dir_traverse+0x51a>
 80041b4:	e526      	b.n	8003c04 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80041b6:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80041ba:	029a      	lsls	r2, r3, #10
 80041bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041be:	18d1      	adds	r1, r2, r3
 80041c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041c8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80041cc:	4798      	blx	r3
 80041ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80041d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da02      	bge.n	80041e0 <lfs_dir_traverse+0x5f0>
                return res;
 80041da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041de:	e0e3      	b.n	80043a8 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80041e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <lfs_dir_traverse+0x614>
 80041e8:	e50c      	b.n	8003c04 <lfs_dir_traverse+0x14>
                continue;
 80041ea:	bf00      	nop
 80041ec:	e50a      	b.n	8003c04 <lfs_dir_traverse+0x14>
            continue;
 80041ee:	bf00      	nop
 80041f0:	e508      	b.n	8003c04 <lfs_dir_traverse+0x14>
                continue;
 80041f2:	bf00      	nop
 80041f4:	e506      	b.n	8003c04 <lfs_dir_traverse+0x14>
                    break;
 80041f6:	bf00      	nop
        {
 80041f8:	e504      	b.n	8003c04 <lfs_dir_traverse+0x14>
 80041fa:	bf00      	nop
 80041fc:	08003b39 	.word	0x08003b39
 8004200:	600ffc00 	.word	0x600ffc00
                break;
 8004204:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8004206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80ca 	beq.w	80043a4 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8004210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	33f0      	adds	r3, #240	; 0xf0
 8004220:	443b      	add	r3, r7
 8004222:	3b98      	subs	r3, #152	; 0x98
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004228:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	33f0      	adds	r3, #240	; 0xf0
 8004238:	443b      	add	r3, r7
 800423a:	3b94      	subs	r3, #148	; 0x94
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8004240:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004244:	1e5a      	subs	r2, r3, #1
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	33f0      	adds	r3, #240	; 0xf0
 8004250:	443b      	add	r3, r7
 8004252:	3b90      	subs	r3, #144	; 0x90
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8004258:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	33f0      	adds	r3, #240	; 0xf0
 8004268:	443b      	add	r3, r7
 800426a:	3b8c      	subs	r3, #140	; 0x8c
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8004272:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	33f0      	adds	r3, #240	; 0xf0
 8004282:	443b      	add	r3, r7
 8004284:	3b88      	subs	r3, #136	; 0x88
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800428c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	33f0      	adds	r3, #240	; 0xf0
 800429c:	443b      	add	r3, r7
 800429e:	3b84      	subs	r3, #132	; 0x84
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80042a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	33f0      	adds	r3, #240	; 0xf0
 80042b6:	443b      	add	r3, r7
 80042b8:	3b80      	subs	r3, #128	; 0x80
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80042c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	33f0      	adds	r3, #240	; 0xf0
 80042d0:	443b      	add	r3, r7
 80042d2:	3b7c      	subs	r3, #124	; 0x7c
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80042da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	33f0      	adds	r3, #240	; 0xf0
 80042ea:	443b      	add	r3, r7
 80042ec:	3b7a      	subs	r3, #122	; 0x7a
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80042f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	33f0      	adds	r3, #240	; 0xf0
 8004304:	443b      	add	r3, r7
 8004306:	3b78      	subs	r3, #120	; 0x78
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800430e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	33f0      	adds	r3, #240	; 0xf0
 800431e:	443b      	add	r3, r7
 8004320:	3b74      	subs	r3, #116	; 0x74
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8004328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800432c:	1e5a      	subs	r2, r3, #1
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	33f0      	adds	r3, #240	; 0xf0
 8004338:	443b      	add	r3, r7
 800433a:	3b70      	subs	r3, #112	; 0x70
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8004342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	33f0      	adds	r3, #240	; 0xf0
 8004352:	443b      	add	r3, r7
 8004354:	3b6c      	subs	r3, #108	; 0x6c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800435a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	4613      	mov	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	33f0      	adds	r3, #240	; 0xf0
 800436a:	443b      	add	r3, r7
 800436c:	3b68      	subs	r3, #104	; 0x68
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8004374:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	33f0      	adds	r3, #240	; 0xf0
 8004384:	443b      	add	r3, r7
 8004386:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800438a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800438e:	3204      	adds	r2, #4
 8004390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004394:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8004398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800439c:	3b01      	subs	r3, #1
 800439e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80043a2:	e596      	b.n	8003ed2 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80043a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	37f4      	adds	r7, #244	; 0xf4
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}

080043b0 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b09f      	sub	sp, #124	; 0x7c
 80043b4:	af04      	add	r7, sp, #16
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d207      	bcs.n	80043e2 <lfs_dir_fetchmatch+0x32>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80043e2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80043e6:	e342      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80043e8:	2300      	movs	r3, #0
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
 80043ec:	2300      	movs	r3, #0
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80043f4:	2300      	movs	r3, #0
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f8:	e052      	b.n	80044a0 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 80043fa:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80043fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8004404:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8004406:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800440a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800440c:	0092      	lsls	r2, r2, #2
 800440e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8004410:	2104      	movs	r1, #4
 8004412:	9103      	str	r1, [sp, #12]
 8004414:	9202      	str	r2, [sp, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	9201      	str	r2, [sp, #4]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2304      	movs	r3, #4
 800441e:	4602      	mov	r2, r0
 8004420:	2100      	movs	r1, #0
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7fe fa6e 	bl	8002904 <lfs_bd_read>
 8004428:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800442a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3368      	adds	r3, #104	; 0x68
 8004430:	443b      	add	r3, r7
 8004432:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f9f8 	bl	800282c <lfs_fromle32>
 800443c:	4602      	mov	r2, r0
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	3368      	adds	r3, #104	; 0x68
 8004444:	443b      	add	r3, r7
 8004446:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <lfs_dir_fetchmatch+0xac>
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004456:	d001      	beq.n	800445c <lfs_dir_fetchmatch+0xac>
            return err;
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	e308      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004462:	d01a      	beq.n	800449a <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	3368      	adds	r3, #104	; 0x68
 800446a:	443b      	add	r3, r7
 800446c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004472:	3301      	adds	r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	bfb8      	it	lt
 800447c:	425b      	neglt	r3, r3
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3368      	adds	r3, #104	; 0x68
 8004482:	443b      	add	r3, r7
 8004484:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7fe f9c0 	bl	8002810 <lfs_scmp>
 8004490:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	dd01      	ble.n	800449a <lfs_dir_fetchmatch+0xea>
            r = i;
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800449a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449c:	3301      	adds	r3, #1
 800449e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	dda9      	ble.n	80043fa <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80044a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	bfb8      	it	lt
 80044b0:	425b      	neglt	r3, r3
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	3301      	adds	r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	bfb8      	it	lt
 80044ca:	425b      	neglt	r3, r3
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80044d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	bfb8      	it	lt
 80044e2:	425b      	neglt	r3, r3
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	3368      	adds	r3, #104	; 0x68
 80044e8:	443b      	add	r3, r7
 80044ea:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80044f8:	2300      	movs	r3, #0
 80044fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80044fc:	e2a3      	b.n	8004a46 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004506:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800450e:	4a96      	ldr	r2, [pc, #600]	; (8004768 <lfs_dir_fetchmatch+0x3b8>)
 8004510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004518:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800451c:	2300      	movs	r3, #0
 800451e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8004522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f989 	bl	8002842 <lfs_tole32>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3308      	adds	r3, #8
 800453a:	2204      	movs	r2, #4
 800453c:	4619      	mov	r1, r3
 800453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004542:	f004 fc39 	bl	8008db8 <lfs_crc>
 8004546:	4603      	mov	r3, r0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f96c 	bl	800282c <lfs_fromle32>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800455a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800455c:	f7fe fe29 	bl	80031b2 <lfs_tag_dsize>
 8004560:	4602      	mov	r2, r0
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	4413      	add	r3, r2
 8004566:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8004568:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800456e:	69d8      	ldr	r0, [r3, #28]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2204      	movs	r2, #4
 8004576:	9203      	str	r2, [sp, #12]
 8004578:	f107 0220 	add.w	r2, r7, #32
 800457c:	9202      	str	r2, [sp, #8]
 800457e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004580:	9201      	str	r2, [sp, #4]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	4603      	mov	r3, r0
 8004586:	460a      	mov	r2, r1
 8004588:	2100      	movs	r1, #0
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7fe f9ba 	bl	8002904 <lfs_bd_read>
 8004590:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8004592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800459e:	d103      	bne.n	80045a8 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	759a      	strb	r2, [r3, #22]
                    break;
 80045a6:	e1d6      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80045a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045aa:	e260      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f107 0120 	add.w	r1, r7, #32
 80045b2:	2204      	movs	r2, #4
 80045b4:	4618      	mov	r0, r3
 80045b6:	f004 fbff 	bl	8008db8 <lfs_crc>
 80045ba:	4603      	mov	r3, r0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe f94a 	bl	800285a <lfs_frombe32>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ca:	4053      	eors	r3, r2
 80045cc:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fd76 	bl	80030c2 <lfs_tag_isvalid>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f083 0301 	eor.w	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01b      	beq.n	800461a <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80045e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80045e4:	f7fe fd8e 	bl	8003104 <lfs_tag_type1>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80045ee:	d10d      	bne.n	800460c <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045f8:	6992      	ldr	r2, [r2, #24]
 80045fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80045fe:	fb01 f202 	mul.w	r2, r1, r2
 8004602:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <lfs_dir_fetchmatch+0x25c>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <lfs_dir_fetchmatch+0x25e>
 800460c:	2300      	movs	r3, #0
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	759a      	strb	r2, [r3, #22]
                break;
 8004618:	e19d      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fdc8 	bl	80031b2 <lfs_tag_dsize>
 8004622:	4602      	mov	r2, r0
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	429a      	cmp	r2, r3
 8004630:	d903      	bls.n	800463a <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	759a      	strb	r2, [r3, #22]
                break;
 8004638:	e18d      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fd5f 	bl	8003104 <lfs_tag_type1>
 8004646:	4603      	mov	r3, r0
 8004648:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800464c:	d164      	bne.n	8004718 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800464e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004654:	69dc      	ldr	r4, [r3, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800465c:	3204      	adds	r2, #4
 800465e:	2104      	movs	r1, #4
 8004660:	9103      	str	r1, [sp, #12]
 8004662:	f107 011c 	add.w	r1, r7, #28
 8004666:	9102      	str	r1, [sp, #8]
 8004668:	9201      	str	r2, [sp, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4623      	mov	r3, r4
 800466e:	4602      	mov	r2, r0
 8004670:	2100      	movs	r1, #0
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7fe f946 	bl	8002904 <lfs_bd_read>
 8004678:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800467a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8004680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004682:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004686:	d103      	bne.n	8004690 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	759a      	strb	r2, [r3, #22]
                        break;
 800468e:	e162      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8004692:	e1ec      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe f8c8 	bl	800282c <lfs_fromle32>
 800469c:	4603      	mov	r3, r0
 800469e:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d003      	beq.n	80046b0 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2200      	movs	r2, #0
 80046ac:	759a      	strb	r2, [r3, #22]
                    break;
 80046ae:	e152      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fd46 	bl	8003144 <lfs_tag_chunk>
 80046b8:	4603      	mov	r3, r0
 80046ba:	07db      	lsls	r3, r3, #31
 80046bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046be:	4053      	eors	r3, r2
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80046ca:	2204      	movs	r2, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f004 fb73 	bl	8008db8 <lfs_crc>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80046d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046da:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fd67 	bl	80031b2 <lfs_tag_dsize>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e8:	441a      	add	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046f2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80046fa:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80046fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8004702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800470e:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	e720      	b.n	800455a <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004718:	2304      	movs	r3, #4
 800471a:	647b      	str	r3, [r7, #68]	; 0x44
 800471c:	e032      	b.n	8004784 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800471e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004724:	69dc      	ldr	r4, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800472c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472e:	440a      	add	r2, r1
 8004730:	2101      	movs	r1, #1
 8004732:	9103      	str	r1, [sp, #12]
 8004734:	f107 011b 	add.w	r1, r7, #27
 8004738:	9102      	str	r1, [sp, #8]
 800473a:	9201      	str	r2, [sp, #4]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4623      	mov	r3, r4
 8004740:	4602      	mov	r2, r0
 8004742:	2100      	movs	r1, #0
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7fe f8dd 	bl	8002904 <lfs_bd_read>
 800474a:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8004752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004754:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004758:	d103      	bne.n	8004762 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	759a      	strb	r2, [r3, #22]
 8004760:	e018      	b.n	8004794 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8004764:	e183      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
 8004766:	bf00      	nop
 8004768:	0800a0e0 	.word	0x0800a0e0
                }

                crc = lfs_crc(crc, &dat, 1);
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f107 011b 	add.w	r1, r7, #27
 8004772:	2201      	movs	r2, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f004 fb1f 	bl	8008db8 <lfs_crc>
 800477a:	4603      	mov	r3, r0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	3301      	adds	r3, #1
 8004782:	647b      	str	r3, [r7, #68]	; 0x44
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fd13 	bl	80031b2 <lfs_tag_dsize>
 800478c:	4602      	mov	r2, r0
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	4293      	cmp	r3, r2
 8004792:	d3c4      	bcc.n	800471e <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fcb4 	bl	8003104 <lfs_tag_type1>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d113      	bne.n	80047ca <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fce7 	bl	8003178 <lfs_tag_id>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f200 8083 	bhi.w	80048be <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fcdc 	bl	8003178 <lfs_tag_id>
 80047c0:	4603      	mov	r3, r0
 80047c2:	3301      	adds	r3, #1
 80047c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047c8:	e079      	b.n	80048be <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fc99 	bl	8003104 <lfs_tag_type1>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d134      	bne.n	8004844 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fcbe 	bl	800315e <lfs_tag_splice>
 80047e2:	4603      	mov	r3, r0
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047ea:	4413      	add	r3, r2
 80047ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80047f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f2:	4ba1      	ldr	r3, [pc, #644]	; (8004a78 <lfs_dir_fetchmatch+0x6c8>)
 80047f4:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80047f6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80047fa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	d104      	bne.n	800480e <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8004804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
 800480c:	e057      	b.n	80048be <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004814:	d053      	beq.n	80048be <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fcad 	bl	8003178 <lfs_tag_id>
 800481e:	4603      	mov	r3, r0
 8004820:	461c      	mov	r4, r3
 8004822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe fca7 	bl	8003178 <lfs_tag_id>
 800482a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800482c:	429c      	cmp	r4, r3
 800482e:	d846      	bhi.n	80048be <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fc93 	bl	800315e <lfs_tag_splice>
 8004838:	4603      	mov	r3, r0
 800483a:	029a      	lsls	r2, r3, #10
 800483c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483e:	4413      	add	r3, r2
 8004840:	64bb      	str	r3, [r7, #72]	; 0x48
 8004842:	e03c      	b.n	80048be <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fc5c 	bl	8003104 <lfs_tag_type1>
 800484c:	4603      	mov	r3, r0
 800484e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004852:	d134      	bne.n	80048be <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fc74 	bl	8003144 <lfs_tag_chunk>
 800485c:	4603      	mov	r3, r0
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800486e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004874:	69dc      	ldr	r4, [r3, #28]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800487c:	3204      	adds	r2, #4
 800487e:	2108      	movs	r1, #8
 8004880:	9103      	str	r1, [sp, #12]
 8004882:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004886:	9102      	str	r1, [sp, #8]
 8004888:	9201      	str	r2, [sp, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4623      	mov	r3, r4
 800488e:	4602      	mov	r2, r0
 8004890:	2100      	movs	r1, #0
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7fe f836 	bl	8002904 <lfs_bd_read>
 8004898:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800489a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80048a6:	d103      	bne.n	80048b0 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	759a      	strb	r2, [r3, #22]
                        break;
 80048ae:	e052      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	e0dc      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 80048b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fbce 	bl	800305a <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	405a      	eors	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f ae46 	bne.w	800455a <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80048ce:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80048d4:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f107 0210 	add.w	r2, r7, #16
 80048e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048e4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80048e8:	4798      	blx	r3
 80048ea:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da09      	bge.n	8004906 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 80048f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80048f8:	d103      	bne.n	8004902 <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	759a      	strb	r2, [r3, #22]
 8004900:	e029      	b.n	8004956 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8004902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8004904:	e0b3      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8004906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004910:	e623      	b.n	800455a <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004916:	405a      	eors	r2, r3
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <lfs_dir_fetchmatch+0x6cc>)
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
 8004926:	e618      	b.n	800455a <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	2b02      	cmp	r3, #2
 800492c:	f47f ae15 	bne.w	800455a <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fc20 	bl	8003178 <lfs_tag_id>
 8004938:	4603      	mov	r3, r0
 800493a:	461c      	mov	r4, r3
 800493c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fc1a 	bl	8003178 <lfs_tag_id>
 8004944:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8004946:	429c      	cmp	r4, r3
 8004948:	f63f ae07 	bhi.w	800455a <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004952:	64bb      	str	r3, [r7, #72]	; 0x48
 8004954:	e601      	b.n	800455a <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d100      	bne.n	8004960 <lfs_dir_fetchmatch+0x5b0>
 800495e:	e05d      	b.n	8004a1c <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	333c      	adds	r3, #60	; 0x3c
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fcad 	bl	80032c8 <lfs_gstate_hasmovehere>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d028      	beq.n	80049c6 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fbfd 	bl	8003178 <lfs_tag_id>
 800497e:	4603      	mov	r3, r0
 8004980:	461c      	mov	r4, r3
 8004982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fbf7 	bl	8003178 <lfs_tag_id>
 800498a:	4603      	mov	r3, r0
 800498c:	429c      	cmp	r4, r3
 800498e:	d104      	bne.n	800499a <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8004990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004996:	667b      	str	r3, [r7, #100]	; 0x64
 8004998:	e015      	b.n	80049c6 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 800499a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a0:	d011      	beq.n	80049c6 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fbe6 	bl	8003178 <lfs_tag_id>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461c      	mov	r4, r3
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fbe0 	bl	8003178 <lfs_tag_id>
 80049b8:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 80049ba:	429c      	cmp	r4, r3
 80049bc:	d203      	bcs.n	80049c6 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80049c4:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80049c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00f      	beq.n	80049ec <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80049cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fbd2 	bl	8003178 <lfs_tag_id>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	8a9b      	ldrh	r3, [r3, #20]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fd feb4 	bl	800274c <lfs_min>
 80049e4:	4603      	mov	r3, r0
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049ea:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fb67 	bl	80030c2 <lfs_tag_isvalid>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <lfs_dir_fetchmatch+0x64e>
                return besttag;
 80049fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fc:	e037      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80049fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fbb9 	bl	8003178 <lfs_tag_id>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	8a9b      	ldrh	r3, [r3, #20]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d202      	bcs.n	8004a18 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8004a12:	f06f 0301 	mvn.w	r3, #1
 8004a16:	e02a      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e028      	b.n	8004a6e <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fa94 	bl	8002f4c <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8004a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a26:	3301      	adds	r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	bfb8      	it	lt
 8004a30:	425b      	neglt	r3, r3
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	3368      	adds	r3, #104	; 0x68
 8004a36:	443b      	add	r3, r7
 8004a38:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8004a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a42:	3301      	adds	r3, #1
 8004a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f77f ad58 	ble.w	80044fe <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	490a      	ldr	r1, [pc, #40]	; (8004a80 <lfs_dir_fetchmatch+0x6d0>)
 8004a58:	9101      	str	r1, [sp, #4]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004a62:	4908      	ldr	r1, [pc, #32]	; (8004a84 <lfs_dir_fetchmatch+0x6d4>)
 8004a64:	4808      	ldr	r0, [pc, #32]	; (8004a88 <lfs_dir_fetchmatch+0x6d8>)
 8004a66:	f004 fe43 	bl	80096f0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8004a6a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	376c      	adds	r7, #108	; 0x6c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	bf00      	nop
 8004a78:	000ffc00 	.word	0x000ffc00
 8004a7c:	7ffffc00 	.word	0x7ffffc00
 8004a80:	0800a09c 	.word	0x0800a09c
 8004a84:	08009fa8 	.word	0x08009fa8
 8004a88:	0800a0a8 	.word	0x0800a0a8

08004a8c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9303      	str	r3, [sp, #12]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fc7c 	bl	80043b0 <lfs_dir_fetchmatch>
 8004ab8:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <lfs_dir_getgstate+0x5c>)
 8004ad8:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <lfs_dir_getgstate+0x60>)
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7fe ff35 	bl	800394c <lfs_dir_get>
 8004ae2:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da05      	bge.n	8004af6 <lfs_dir_getgstate+0x32>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f113 0f02 	cmn.w	r3, #2
 8004af0:	d001      	beq.n	8004af6 <lfs_dir_getgstate+0x32>
        return res;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	e00f      	b.n	8004b16 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f113 0f02 	cmn.w	r3, #2
 8004afc:	d00a      	beq.n	8004b14 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8004afe:	f107 0310 	add.w	r3, r7, #16
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fc00 	bl	8003308 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe fb63 	bl	80031da <lfs_gstate_xor>
    }

    return 0;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	7ff0000c 	.word	0x7ff0000c
 8004b24:	7ff00000 	.word	0x7ff00000

08004b28 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b08f      	sub	sp, #60	; 0x3c
 8004b2c:	af04      	add	r7, sp, #16
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	689c      	ldr	r4, [r3, #8]
 8004b46:	68b8      	ldr	r0, [r7, #8]
 8004b48:	f7fe fb26 	bl	8003198 <lfs_tag_size>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fd fdfb 	bl	800274c <lfs_min>
 8004b56:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004b58:	6a3c      	ldr	r4, [r7, #32]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	6852      	ldr	r2, [r2, #4]
 8004b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b64:	6849      	ldr	r1, [r1, #4]
 8004b66:	69b8      	ldr	r0, [r7, #24]
 8004b68:	9003      	str	r0, [sp, #12]
 8004b6a:	9102      	str	r1, [sp, #8]
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4622      	mov	r2, r4
 8004b74:	2100      	movs	r1, #0
 8004b76:	6a38      	ldr	r0, [r7, #32]
 8004b78:	f7fe f808 	bl	8002b8c <lfs_bd_cmp>
 8004b7c:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <lfs_dir_find_match+0x60>
        return res;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	e014      	b.n	8004bb2 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	689c      	ldr	r4, [r3, #8]
 8004b8c:	68b8      	ldr	r0, [r7, #8]
 8004b8e:	f7fe fb03 	bl	8003198 <lfs_tag_size>
 8004b92:	4603      	mov	r3, r0
 8004b94:	429c      	cmp	r4, r3
 8004b96:	d00b      	beq.n	8004bb0 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	689c      	ldr	r4, [r3, #8]
 8004b9c:	68b8      	ldr	r0, [r7, #8]
 8004b9e:	f7fe fafb 	bl	8003198 <lfs_tag_size>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	d201      	bcs.n	8004bac <lfs_dir_find_match+0x84>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e002      	b.n	8004bb2 <lfs_dir_find_match+0x8a>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e000      	b.n	8004bb2 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	372c      	adds	r7, #44	; 0x2c
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd90      	pop	{r4, r7, pc}
	...

08004bbc <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b093      	sub	sp, #76	; 0x4c
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004bdc:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <lfs_dir_find+0x1dc>)
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004bf2:	496a      	ldr	r1, [pc, #424]	; (8004d9c <lfs_dir_find+0x1e0>)
 8004bf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bf6:	f004 fdc1 	bl	800977c <strspn>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	4413      	add	r3, r2
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004c02:	4966      	ldr	r1, [pc, #408]	; (8004d9c <lfs_dir_find+0x1e0>)
 8004c04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c06:	f004 fda8 	bl	800975a <strcspn>
 8004c0a:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d105      	bne.n	8004c1e <lfs_dir_find+0x62>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	4b62      	ldr	r3, [pc, #392]	; (8004da0 <lfs_dir_find+0x1e4>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d00a      	beq.n	8004c34 <lfs_dir_find+0x78>
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d10c      	bne.n	8004c3e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004c24:	2202      	movs	r2, #2
 8004c26:	495f      	ldr	r1, [pc, #380]	; (8004da4 <lfs_dir_find+0x1e8>)
 8004c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c2a:	f004 f96d 	bl	8008f08 <memcmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <lfs_dir_find+0x82>
            name += namelen;
 8004c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	4413      	add	r3, r2
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004c3c:	e7d9      	b.n	8004bf2 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	4413      	add	r3, r2
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004c4a:	4954      	ldr	r1, [pc, #336]	; (8004d9c <lfs_dir_find+0x1e0>)
 8004c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c4e:	f004 fd95 	bl	800977c <strspn>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	4413      	add	r3, r2
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004c5a:	4950      	ldr	r1, [pc, #320]	; (8004d9c <lfs_dir_find+0x1e0>)
 8004c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c5e:	f004 fd7c 	bl	800975a <strcspn>
 8004c62:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d112      	bne.n	8004c96 <lfs_dir_find+0xda>
 8004c70:	2202      	movs	r2, #2
 8004c72:	494c      	ldr	r1, [pc, #304]	; (8004da4 <lfs_dir_find+0x1e8>)
 8004c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c76:	f004 f947 	bl	8008f08 <memcmp>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <lfs_dir_find+0xda>
                depth -= 1;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	4413      	add	r3, r2
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004c94:	e7ad      	b.n	8004bf2 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	3301      	adds	r3, #1
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004ca4:	e7d1      	b.n	8004c4a <lfs_dir_find+0x8e>
                break;
 8004ca6:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <lfs_dir_find+0xf8>
            return tag;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	e06c      	b.n	8004d8e <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb8:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fa31 	bl	8003124 <lfs_tag_type3>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d002      	beq.n	8004cce <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004cc8:	f06f 0313 	mvn.w	r3, #19
 8004ccc:	e05f      	b.n	8004d8e <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fa51 	bl	8003178 <lfs_tag_id>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d01c      	beq.n	8004d1c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fa47 	bl	8003178 <lfs_tag_id>
 8004cea:	4603      	mov	r3, r0
 8004cec:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004cfa:	9200      	str	r2, [sp, #0]
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <lfs_dir_find+0x1ec>)
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7fe fe23 	bl	800394c <lfs_dir_get>
 8004d06:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <lfs_dir_find+0x156>
                return res;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	e03d      	b.n	8004d8e <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3318      	adds	r3, #24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe f99f 	bl	800305a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004d22:	212f      	movs	r1, #47	; 0x2f
 8004d24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d26:	f004 fd0b 	bl	8009740 <strchr>
 8004d2a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <lfs_dir_find+0x178>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	e000      	b.n	8004d36 <lfs_dir_find+0x17a>
 8004d34:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	613a      	str	r2, [r7, #16]
 8004d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3c:	617a      	str	r2, [r7, #20]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004d42:	f107 0210 	add.w	r2, r7, #16
 8004d46:	9203      	str	r2, [sp, #12]
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <lfs_dir_find+0x1f0>)
 8004d4a:	9202      	str	r2, [sp, #8]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004d56:	4622      	mov	r2, r4
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fb28 	bl	80043b0 <lfs_dir_fetchmatch>
 8004d60:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da01      	bge.n	8004d6c <lfs_dir_find+0x1b0>
                return tag;
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	e010      	b.n	8004d8e <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	4413      	add	r3, r2
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004d7a:	e73a      	b.n	8004bf2 <lfs_dir_find+0x36>
            if (!dir->split) {
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	7ddb      	ldrb	r3, [r3, #23]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0c8      	beq.n	8004d1c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004d8a:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	373c      	adds	r7, #60	; 0x3c
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	002ffc00 	.word	0x002ffc00
 8004d9c:	0800a0e8 	.word	0x0800a0e8
 8004da0:	0800a0ec 	.word	0x0800a0ec
 8004da4:	0800a0f0 	.word	0x0800a0f0
 8004da8:	700ffc00 	.word	0x700ffc00
 8004dac:	08004b29 	.word	0x08004b29

08004db0 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b08b      	sub	sp, #44	; 0x2c
 8004db4:	af04      	add	r7, sp, #16
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f103 0010 	add.w	r0, r3, #16
 8004dc4:	68fc      	ldr	r4, [r7, #12]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	9103      	str	r1, [sp, #12]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	9102      	str	r1, [sp, #8]
 8004dd6:	9201      	str	r2, [sp, #4]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4622      	mov	r2, r4
 8004dde:	4601      	mov	r1, r0
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7fd ffd5 	bl	8002d90 <lfs_bd_prog>
 8004de6:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <lfs_dir_commitprog+0x42>
        return err;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e010      	b.n	8004e14 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 ffdc 	bl	8008db8 <lfs_crc>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	605a      	str	r2, [r3, #4]
    return 0;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}

08004e1c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08f      	sub	sp, #60	; 0x3c
 8004e20:	af04      	add	r7, sp, #16
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe f9c1 	bl	80031b2 <lfs_tag_dsize>
 8004e30:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	441a      	add	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d902      	bls.n	8004e48 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8004e42:	f06f 031b 	mvn.w	r3, #27
 8004e46:	e065      	b.n	8004f14 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4053      	eors	r3, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd fd0c 	bl	8002872 <lfs_tobe32>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004e5e:	f107 0214 	add.w	r2, r7, #20
 8004e62:	2304      	movs	r3, #4
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff ffa2 	bl	8004db0 <lfs_dir_commitprog>
 8004e6c:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <lfs_dir_commitattr+0x5c>
        return err;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	e04d      	b.n	8004f14 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	db0c      	blt.n	8004e98 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	3b04      	subs	r3, #4
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ff92 	bl	8004db0 <lfs_dir_commitprog>
 8004e8c:	61f8      	str	r0, [r7, #28]
        if (err) {
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d039      	beq.n	8004f08 <lfs_dir_commitattr+0xec>
            return err;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	e03d      	b.n	8004f14 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e02d      	b.n	8004efe <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004ea2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004eaa:	1f1c      	subs	r4, r3, #4
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	440a      	add	r2, r1
 8004eb8:	2101      	movs	r1, #1
 8004eba:	9103      	str	r1, [sp, #12]
 8004ebc:	f107 0113 	add.w	r1, r7, #19
 8004ec0:	9102      	str	r1, [sp, #8]
 8004ec2:	9201      	str	r2, [sp, #4]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	4602      	mov	r2, r0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7fd fd19 	bl	8002904 <lfs_bd_read>
 8004ed2:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <lfs_dir_commitattr+0xc2>
                return err;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	e01a      	b.n	8004f14 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004ede:	f107 0213 	add.w	r2, r7, #19
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff62 	bl	8004db0 <lfs_dir_commitprog>
 8004eec:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <lfs_dir_commitattr+0xdc>
                return err;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	e00d      	b.n	8004f14 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	3301      	adds	r3, #1
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d3cc      	bcc.n	8004ea2 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	609a      	str	r2, [r3, #8]
    return 0;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	372c      	adds	r7, #44	; 0x2c
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd90      	pop	{r4, r7, pc}

08004f1c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b097      	sub	sp, #92	; 0x5c
 8004f20:	af04      	add	r7, sp, #16
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7fd fc2d 	bl	8002796 <lfs_alignup>
 8004f3c:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8004f46:	e0a6      	b.n	8005096 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8004f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fbf6 	bl	800274c <lfs_min>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	4413      	add	r3, r2
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8004f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d206      	bcs.n	8004f7e <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	3b08      	subs	r3, #8
 8004f74:	4619      	mov	r1, r3
 8004f76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f78:	f7fd fbe8 	bl	800274c <lfs_min>
 8004f7c:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f82:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	9203      	str	r2, [sp, #12]
 8004f8e:	f107 0214 	add.w	r2, r7, #20
 8004f92:	9202      	str	r2, [sp, #8]
 8004f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f96:	9201      	str	r2, [sp, #4]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fcaf 	bl	8002904 <lfs_bd_read>
 8004fa6:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <lfs_dir_commitcrc+0x9e>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fb4:	d001      	beq.n	8004fba <lfs_dir_commitcrc+0x9e>
            return err;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	e0e8      	b.n	800518c <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd fc4c 	bl	800285a <lfs_frombe32>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	0fdb      	lsrs	r3, r3, #31
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004fd2:	7efb      	ldrb	r3, [r7, #27]
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	051a      	lsls	r2, r3, #20
 8004fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	1acb      	subs	r3, r1, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8004fe6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004fea:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4053      	eors	r3, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd fc3c 	bl	8002872 <lfs_tobe32>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f107 010c 	add.w	r1, r7, #12
 8005006:	2204      	movs	r2, #4
 8005008:	4618      	mov	r0, r3
 800500a:	f003 fed5 	bl	8008db8 <lfs_crc>
 800500e:	4602      	mov	r2, r0
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd fc12 	bl	8002842 <lfs_tole32>
 800501e:	4603      	mov	r3, r0
 8005020:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f103 0010 	add.w	r0, r3, #16
 8005028:	687c      	ldr	r4, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	6852      	ldr	r2, [r2, #4]
 8005032:	2108      	movs	r1, #8
 8005034:	9103      	str	r1, [sp, #12]
 8005036:	f107 010c 	add.w	r1, r7, #12
 800503a:	9102      	str	r1, [sp, #8]
 800503c:	9201      	str	r2, [sp, #4]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2300      	movs	r3, #0
 8005042:	4622      	mov	r2, r4
 8005044:	4601      	mov	r1, r0
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fd fea2 	bl	8002d90 <lfs_bd_prog>
 800504c:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <lfs_dir_commitcrc+0x13c>
            return err;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	e099      	b.n	800518c <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe f892 	bl	8003198 <lfs_tag_size>
 8005074:	4603      	mov	r3, r0
 8005076:	1d1a      	adds	r2, r3, #4
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	441a      	add	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8005082:	7efb      	ldrb	r3, [r7, #27]
 8005084:	07da      	lsls	r2, r3, #31
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	405a      	eors	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005094:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	429a      	cmp	r2, r3
 800509e:	f63f af53 	bhi.w	8004f48 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f103 0110 	add.w	r1, r3, #16
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	2300      	movs	r3, #0
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fd fe3b 	bl	8002d28 <lfs_bd_sync>
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <lfs_dir_commitcrc+0x1a2>
        return err;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	e066      	b.n	800518c <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 80050c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80050c8:	e05b      	b.n	8005182 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 80050ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d4:	e030      	b.n	8005138 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 80050d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	429a      	cmp	r2, r3
 80050dc:	d106      	bne.n	80050ec <lfs_dir_commitcrc+0x1d0>
 80050de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d002      	beq.n	80050ec <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 80050e6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80050ea:	e04f      	b.n	800518c <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80050ec:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 80050ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80050f4:	1d18      	adds	r0, r3, #4
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	9203      	str	r2, [sp, #12]
 80050fe:	f107 020b 	add.w	r2, r7, #11
 8005102:	9202      	str	r2, [sp, #8]
 8005104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005106:	9201      	str	r2, [sp, #4]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	4603      	mov	r3, r0
 800510c:	460a      	mov	r2, r1
 800510e:	2100      	movs	r1, #0
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fd fbf7 	bl	8002904 <lfs_bd_read>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <lfs_dir_commitcrc+0x206>
                return err;
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	e034      	b.n	800518c <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8005122:	f107 030b 	add.w	r3, r7, #11
 8005126:	2201      	movs	r2, #1
 8005128:	4619      	mov	r1, r3
 800512a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512c:	f003 fe44 	bl	8008db8 <lfs_crc>
 8005130:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	3301      	adds	r3, #1
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	3304      	adds	r3, #4
 800513c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513e:	429a      	cmp	r2, r3
 8005140:	d3c9      	bcc.n	80050d6 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8005148:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800514c:	e01e      	b.n	800518c <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800514e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd faf7 	bl	800274c <lfs_min>
 800515e:	4602      	mov	r2, r0
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	4413      	add	r3, r2
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	429a      	cmp	r2, r3
 800516c:	d206      	bcs.n	800517c <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	3b08      	subs	r3, #8
 8005172:	4619      	mov	r1, r3
 8005174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005176:	f7fd fae9 	bl	800274c <lfs_min>
 800517a:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	3304      	adds	r3, #4
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8005182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	429a      	cmp	r2, r3
 8005188:	d39f      	bcc.n	80050ca <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	374c      	adds	r7, #76	; 0x4c
 8005190:	46bd      	mov	sp, r7
 8005192:	bd90      	pop	{r4, r7, pc}

08005194 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af04      	add	r7, sp, #16
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e016      	b.n	80051d2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3301      	adds	r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	bfb8      	it	lt
 80051b0:	425b      	neglt	r3, r3
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	4413      	add	r3, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe fa2c 	bl	8003618 <lfs_alloc>
 80051c0:	60f8      	str	r0, [r7, #12]
        if (err) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <lfs_dir_alloc+0x38>
            return err;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	e058      	b.n	800527e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	dde5      	ble.n	80051a4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80051e8:	2004      	movs	r0, #4
 80051ea:	9003      	str	r0, [sp, #12]
 80051ec:	9202      	str	r2, [sp, #8]
 80051ee:	2200      	movs	r2, #0
 80051f0:	9201      	str	r2, [sp, #4]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2304      	movs	r3, #4
 80051f6:	460a      	mov	r2, r1
 80051f8:	2100      	movs	r1, #0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fd fb82 	bl	8002904 <lfs_bd_read>
 8005200:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd fb10 	bl	800282c <lfs_fromle32>
 800520c:	4602      	mov	r2, r0
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <lfs_dir_alloc+0x90>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800521e:	d001      	beq.n	8005224 <lfs_dir_alloc+0x90>
        return err;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	e02c      	b.n	800527e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd0e      	ble.n	800524c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	3301      	adds	r3, #1
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7fd faa8 	bl	8002796 <lfs_alignup>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005258:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005266:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8005286:	b580      	push	{r7, lr}
 8005288:	b092      	sub	sp, #72	; 0x48
 800528a:	af04      	add	r7, sp, #16
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	4619      	mov	r1, r3
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff ff7a 	bl	8005194 <lfs_dir_alloc>
 80052a0:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <lfs_dir_split+0x26>
        return err;
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	e03c      	b.n	8005326 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	7ddb      	ldrb	r3, [r3, #23]
 80052b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80052c0:	f107 0110 	add.w	r1, r7, #16
 80052c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052c8:	9302      	str	r3, [sp, #8]
 80052ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f879 	bl	80053d0 <lfs_dir_compact>
 80052de:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	da01      	bge.n	80052ea <lfs_dir_split+0x64>
        return res;
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	e01d      	b.n	8005326 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2201      	movs	r2, #1
 80052fa:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3320      	adds	r3, #32
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7fd fe51 	bl	8002fac <lfs_pair_cmp>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <lfs_dir_split+0x9e>
 8005310:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3738      	adds	r7, #56	; 0x38
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800533e:	68b8      	ldr	r0, [r7, #8]
 8005340:	f7fd ff37 	bl	80031b2 <lfs_tag_dsize>
 8005344:	4602      	mov	r2, r0
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	441a      	add	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	601a      	str	r2, [r3, #0]
    return 0;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	f7ff fd51 	bl	8004e1c <lfs_dir_commitattr>
 800537a:	4603      	mov	r3, r0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd11      	ble.n	80053bc <lfs_dir_needsrelocation+0x38>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	3301      	adds	r3, #1
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053a4:	3201      	adds	r2, #1
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ae:	fb01 f202 	mul.w	r2, r1, r2
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <lfs_dir_needsrelocation+0x38>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <lfs_dir_needsrelocation+0x3a>
 80053bc:	2300      	movs	r3, #0
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	b2db      	uxtb	r3, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0a4      	sub	sp, #144	; 0x90
 80053d4:	af0a      	add	r7, sp, #40	; 0x28
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ffcc 	bl	8005384 <lfs_dir_needsrelocation>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80053fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <lfs_dir_compact+0x52>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	657a      	str	r2, [r7, #84]	; 0x54
 800540a:	2201      	movs	r2, #1
 800540c:	65ba      	str	r2, [r7, #88]	; 0x58
 800540e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7fd fdc9 	bl	8002fac <lfs_pair_cmp>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8155 	bne.w	80056cc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	2300      	movs	r3, #0
 800542a:	643b      	str	r3, [r7, #64]	; 0x40
 800542c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005430:	647b      	str	r3, [r7, #68]	; 0x44
 8005432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005436:	64bb      	str	r3, [r7, #72]	; 0x48
 8005438:	2300      	movs	r3, #0
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <lfs_dir_compact+0x80>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	3b08      	subs	r3, #8
 800544e:	e003      	b.n	8005458 <lfs_dir_compact+0x88>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005458:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4619      	mov	r1, r3
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7fd fd41 	bl	8002ee8 <lfs_bd_erase>
 8005466:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800546e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005470:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005474:	f000 812c 	beq.w	80056d0 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8005478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547a:	e187      	b.n	800578c <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fd f9de 	bl	8002842 <lfs_tole32>
 8005486:	4602      	mov	r2, r0
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8005492:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005496:	2304      	movs	r3, #4
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fc89 	bl	8004db0 <lfs_dir_commitprog>
 800549e:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fd f9c1 	bl	800282c <lfs_fromle32>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
            if (err) {
 80054b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80054bc:	f000 810a 	beq.w	80056d4 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80054c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c2:	e163      	b.n	800578c <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80054c4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80054c8:	425b      	negs	r3, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	637a      	str	r2, [r7, #52]	; 0x34
 80054d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80054d6:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80054d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054dc:	9208      	str	r2, [sp, #32]
 80054de:	4aad      	ldr	r2, [pc, #692]	; (8005794 <lfs_dir_compact+0x3c4>)
 80054e0:	9207      	str	r2, [sp, #28]
 80054e2:	9306      	str	r3, [sp, #24]
 80054e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80054e8:	9305      	str	r3, [sp, #20]
 80054ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	4ba8      	ldr	r3, [pc, #672]	; (8005798 <lfs_dir_compact+0x3c8>)
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005504:	2200      	movs	r2, #0
 8005506:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fe fb71 	bl	8003bf0 <lfs_dir_traverse>
 800550e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8005510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8005516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005518:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800551c:	f000 80dc 	beq.w	80056d8 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8005520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005522:	e133      	b.n	800578c <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3318      	adds	r3, #24
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fd24 	bl	8002f76 <lfs_pair_isnull>
 800552e:	4603      	mov	r3, r0
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d022      	beq.n	8005580 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3318      	adds	r3, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd fda5 	bl	800308e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	7ddb      	ldrb	r3, [r3, #23]
 8005548:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800554c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800554e:	4a93      	ldr	r2, [pc, #588]	; (800579c <lfs_dir_compact+0x3cc>)
 8005550:	431a      	orrs	r2, r3
                        dir->tail);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8005556:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fc5e 	bl	8004e1c <lfs_dir_commitattr>
 8005560:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	3318      	adds	r3, #24
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd fd77 	bl	800305a <lfs_pair_fromle32>
                if (err) {
 800556c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8005572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005574:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005578:	f000 80b0 	beq.w	80056dc <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800557c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557e:	e105      	b.n	800578c <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8005580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800558c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005590:	f083 0301 	eor.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d011      	beq.n	80055be <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80055a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd fe17 	bl	80031da <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fd fe0e 	bl	80031da <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80055c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fd fe05 	bl	80031da <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80055dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055e0:	461a      	mov	r2, r3
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fa6d 	bl	8004ac4 <lfs_dir_getgstate>
 80055ea:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80055ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <lfs_dir_compact+0x226>
                return err;
 80055f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f4:	e0ca      	b.n	800578c <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80055f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fe12 	bl	8003224 <lfs_gstate_iszero>
 8005600:	4603      	mov	r3, r0
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800560c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd fe99 	bl	8003348 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8005616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800561a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800561e:	4a60      	ldr	r2, [pc, #384]	; (80057a0 <lfs_dir_compact+0x3d0>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fbfb 	bl	8004e1c <lfs_dir_commitattr>
 8005626:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8005628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800562e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005634:	d054      	beq.n	80056e0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8005636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005638:	e0a8      	b.n	800578c <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800563a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800563e:	4619      	mov	r1, r3
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fc6b 	bl	8004f1c <lfs_dir_commitcrc>
 8005646:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005654:	d046      	beq.n	80056e4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8005656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005658:	e098      	b.n	800578c <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005660:	6992      	ldr	r2, [r2, #24]
 8005662:	fbb3 f1f2 	udiv	r1, r3, r2
 8005666:	fb01 f202 	mul.w	r2, r1, r2
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <lfs_dir_compact+0x2ae>
 8005670:	4b4c      	ldr	r3, [pc, #304]	; (80057a4 <lfs_dir_compact+0x3d4>)
 8005672:	4a4d      	ldr	r2, [pc, #308]	; (80057a8 <lfs_dir_compact+0x3d8>)
 8005674:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8005678:	484c      	ldr	r0, [pc, #304]	; (80057ac <lfs_dir_compact+0x3dc>)
 800567a:	f003 fbdb 	bl	8008e34 <__assert_func>
            lfs_pair_swap(dir->pair);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd fc63 	bl	8002f4c <lfs_pair_swap>
            dir->count = end - begin;
 8005686:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800568a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	b29a      	uxth	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8005696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800569c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3348      	adds	r3, #72	; 0x48
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80056ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056b2:	f083 0301 	eor.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d064      	beq.n	8005786 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	333c      	adds	r3, #60	; 0x3c
 80056c2:	3230      	adds	r2, #48	; 0x30
 80056c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80056c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80056ca:	e05c      	b.n	8005786 <lfs_dir_compact+0x3b6>
        goto relocate;
 80056cc:	bf00      	nop
 80056ce:	e00a      	b.n	80056e6 <lfs_dir_compact+0x316>
                    goto relocate;
 80056d0:	bf00      	nop
 80056d2:	e008      	b.n	80056e6 <lfs_dir_compact+0x316>
                    goto relocate;
 80056d4:	bf00      	nop
 80056d6:	e006      	b.n	80056e6 <lfs_dir_compact+0x316>
                    goto relocate;
 80056d8:	bf00      	nop
 80056da:	e004      	b.n	80056e6 <lfs_dir_compact+0x316>
                        goto relocate;
 80056dc:	bf00      	nop
 80056de:	e002      	b.n	80056e6 <lfs_dir_compact+0x316>
                        goto relocate;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <lfs_dir_compact+0x316>
                    goto relocate;
 80056e4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3310      	adds	r3, #16
 80056f0:	4619      	mov	r1, r3
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7fd f8e0 	bl	80028b8 <lfs_cache_drop>
        if (!tired) {
 80056f8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80056fc:	f083 0301 	eor.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <lfs_dir_compact+0x3e0>)
 800570c:	9200      	str	r2, [sp, #0]
 800570e:	f240 725a 	movw	r2, #1882	; 0x75a
 8005712:	4926      	ldr	r1, [pc, #152]	; (80057ac <lfs_dir_compact+0x3dc>)
 8005714:	4827      	ldr	r0, [pc, #156]	; (80057b4 <lfs_dir_compact+0x3e4>)
 8005716:	f003 ffeb 	bl	80096f0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	617a      	str	r2, [r7, #20]
 8005720:	2201      	movs	r2, #1
 8005722:	61ba      	str	r2, [r7, #24]
 8005724:	f107 0214 	add.w	r2, r7, #20
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fc3e 	bl	8002fac <lfs_pair_cmp>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <lfs_dir_compact+0x3e0>)
 800573c:	9200      	str	r2, [sp, #0]
 800573e:	f240 725f 	movw	r2, #1887	; 0x75f
 8005742:	491a      	ldr	r1, [pc, #104]	; (80057ac <lfs_dir_compact+0x3dc>)
 8005744:	481c      	ldr	r0, [pc, #112]	; (80057b8 <lfs_dir_compact+0x3e8>)
 8005746:	f003 ffd3 	bl	80096f0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800574a:	f06f 031b 	mvn.w	r3, #27
 800574e:	e01d      	b.n	800578c <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7fd ff5e 	bl	8003618 <lfs_alloc>
 800575c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800575e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <lfs_dir_compact+0x3ae>
 8005764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005766:	f113 0f1c 	cmn.w	r3, #28
 800576a:	d106      	bne.n	800577a <lfs_dir_compact+0x3aa>
 800576c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005770:	f083 0301 	eor.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <lfs_dir_compact+0x3ae>
            return err;
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	e006      	b.n	800578c <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8005784:	e64d      	b.n	8005422 <lfs_dir_compact+0x52>
        break;
 8005786:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8005788:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800578c:	4618      	mov	r0, r3
 800578e:	3768      	adds	r7, #104	; 0x68
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	0800535b 	.word	0x0800535b
 8005798:	400ffc00 	.word	0x400ffc00
 800579c:	000ffc08 	.word	0x000ffc08
 80057a0:	7ffffc0c 	.word	0x7ffffc0c
 80057a4:	0800a0f4 	.word	0x0800a0f4
 80057a8:	0800a918 	.word	0x0800a918
 80057ac:	08009fa8 	.word	0x08009fa8
 80057b0:	0800a09c 	.word	0x0800a09c
 80057b4:	0800a11c 	.word	0x0800a11c
 80057b8:	0800a140 	.word	0x0800a140

080057bc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b097      	sub	sp, #92	; 0x5c
 80057c0:	af0a      	add	r7, sp, #40	; 0x28
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80057ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80057d0:	e058      	b.n	8005884 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	b29b      	uxth	r3, r3
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	b292      	uxth	r2, r2
 80057de:	4252      	negs	r2, r2
 80057e0:	b292      	uxth	r2, r2
 80057e2:	b212      	sxth	r2, r2
 80057e4:	f107 0118 	add.w	r1, r7, #24
 80057e8:	9108      	str	r1, [sp, #32]
 80057ea:	4979      	ldr	r1, [pc, #484]	; (80059d0 <lfs_dir_splittingcompact+0x214>)
 80057ec:	9107      	str	r1, [sp, #28]
 80057ee:	9206      	str	r2, [sp, #24]
 80057f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80057f4:	9205      	str	r2, [sp, #20]
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	2300      	movs	r3, #0
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <lfs_dir_splittingcompact+0x218>)
 80057fe:	9302      	str	r3, [sp, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800580c:	2200      	movs	r2, #0
 800580e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7fe f9ed 	bl	8003bf0 <lfs_dir_traverse>
 8005816:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <lfs_dir_splittingcompact+0x66>
                return err;
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	e0d1      	b.n	80059c6 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8005822:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2bfe      	cmp	r3, #254	; 0xfe
 800582c:	d822      	bhi.n	8005874 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	e003      	b.n	8005854 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005850:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005852:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005858:	6992      	ldr	r2, [r2, #24]
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f7fc ff9a 	bl	8002796 <lfs_alignup>
 8005862:	4603      	mov	r3, r0
 8005864:	4619      	mov	r1, r3
 8005866:	4620      	mov	r0, r4
 8005868:	f7fc ff70 	bl	800274c <lfs_min>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	429a      	cmp	r2, r3
 8005872:	d20e      	bcs.n	8005892 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8005874:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	4413      	add	r3, r2
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005884:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d8a0      	bhi.n	80057d2 <lfs_dir_splittingcompact+0x16>
 8005890:	e000      	b.n	8005894 <lfs_dir_splittingcompact+0xd8>
                break;
 8005892:	bf00      	nop
        }

        if (split == begin) {
 8005894:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d02d      	beq.n	80058fa <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80058a6:	9202      	str	r2, [sp, #8]
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fce6 	bl	8005286 <lfs_dir_split>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <lfs_dir_splittingcompact+0x112>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	f113 0f1c 	cmn.w	r3, #28
 80058c8:	d001      	beq.n	80058ce <lfs_dir_splittingcompact+0x112>
            return err;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	e07b      	b.n	80059c6 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	493e      	ldr	r1, [pc, #248]	; (80059d8 <lfs_dir_splittingcompact+0x21c>)
 80058de:	9101      	str	r1, [sp, #4]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80058e8:	493c      	ldr	r1, [pc, #240]	; (80059dc <lfs_dir_splittingcompact+0x220>)
 80058ea:	483d      	ldr	r0, [pc, #244]	; (80059e0 <lfs_dir_splittingcompact+0x224>)
 80058ec:	f003 ff00 	bl	80096f0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80058f0:	e004      	b.n	80058fc <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80058f8:	e767      	b.n	80057ca <lfs_dir_splittingcompact+0xe>
            break;
 80058fa:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff fd40 	bl	8005384 <lfs_dir_needsrelocation>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04e      	beq.n	80059a8 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	613a      	str	r2, [r7, #16]
 8005910:	2201      	movs	r2, #1
 8005912:	617a      	str	r2, [r7, #20]
 8005914:	f107 0210 	add.w	r2, r7, #16
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fb46 	bl	8002fac <lfs_pair_cmp>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d140      	bne.n	80059a8 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f003 f916 	bl	8008b58 <lfs_fs_rawsize>
 800592c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da01      	bge.n	8005938 <lfs_dir_splittingcompact+0x17c>
            return size;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	e046      	b.n	80059c6 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	085a      	lsrs	r2, r3, #1
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	429a      	cmp	r2, r3
 8005944:	d930      	bls.n	80059a8 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	4a23      	ldr	r2, [pc, #140]	; (80059d8 <lfs_dir_splittingcompact+0x21c>)
 800594c:	9200      	str	r2, [sp, #0]
 800594e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005952:	4922      	ldr	r1, [pc, #136]	; (80059dc <lfs_dir_splittingcompact+0x220>)
 8005954:	4823      	ldr	r0, [pc, #140]	; (80059e4 <lfs_dir_splittingcompact+0x228>)
 8005956:	f003 fecb 	bl	80096f0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800595a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800595e:	9302      	str	r3, [sp, #8]
 8005960:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fc88 	bl	8005286 <lfs_dir_split>
 8005976:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <lfs_dir_splittingcompact+0x1ce>
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f113 0f1c 	cmn.w	r3, #28
 8005984:	d001      	beq.n	800598a <lfs_dir_splittingcompact+0x1ce>
                return err;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	e01d      	b.n	80059c6 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <lfs_dir_splittingcompact+0x21c>)
 8005992:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8005996:	4911      	ldr	r1, [pc, #68]	; (80059dc <lfs_dir_splittingcompact+0x220>)
 8005998:	4813      	ldr	r0, [pc, #76]	; (80059e8 <lfs_dir_splittingcompact+0x22c>)
 800599a:	f003 fea9 	bl	80096f0 <iprintf>
 800599e:	e003      	b.n	80059a8 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 80059a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80059a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fd06 	bl	80053d0 <lfs_dir_compact>
 80059c4:	4603      	mov	r3, r0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3734      	adds	r7, #52	; 0x34
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	bf00      	nop
 80059d0:	0800532f 	.word	0x0800532f
 80059d4:	400ffc00 	.word	0x400ffc00
 80059d8:	0800a09c 	.word	0x0800a09c
 80059dc:	08009fa8 	.word	0x08009fa8
 80059e0:	0800a178 	.word	0x0800a178
 80059e4:	0800a1a8 	.word	0x0800a1a8
 80059e8:	0800a1d8 	.word	0x0800a1d8

080059ec <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80059ec:	b5b0      	push	{r4, r5, r7, lr}
 80059ee:	b0a6      	sub	sp, #152	; 0x98
 80059f0:	af0a      	add	r7, sp, #40	; 0x28
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
    int state = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	667b      	str	r3, [r7, #100]	; 0x64
 8005a08:	e06d      	b.n	8005ae6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	4413      	add	r3, r2
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fd fb85 	bl	8003124 <lfs_tag_type3>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f240 4301 	movw	r3, #1025	; 0x401
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d106      	bne.n	8005a34 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	8a9b      	ldrh	r3, [r3, #20]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	829a      	strh	r2, [r3, #20]
 8005a32:	e055      	b.n	8005ae0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd fb70 	bl	8003124 <lfs_tag_type3>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d114      	bne.n	8005a7a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	8a9b      	ldrh	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <lfs_dir_relocatingcommit+0x7a>
 8005a58:	4ba4      	ldr	r3, [pc, #656]	; (8005cec <lfs_dir_relocatingcommit+0x300>)
 8005a5a:	4aa5      	ldr	r2, [pc, #660]	; (8005cf0 <lfs_dir_relocatingcommit+0x304>)
 8005a5c:	f240 71df 	movw	r1, #2015	; 0x7df
 8005a60:	48a4      	ldr	r0, [pc, #656]	; (8005cf4 <lfs_dir_relocatingcommit+0x308>)
 8005a62:	f003 f9e7 	bl	8008e34 <__assert_func>
            dir->count -= 1;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	8a9b      	ldrh	r3, [r3, #20]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005a78:	e032      	b.n	8005ae0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	4413      	add	r3, r2
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fb3d 	bl	8003104 <lfs_tag_type1>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a90:	d126      	bne.n	8005ae0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fd fb41 	bl	8003144 <lfs_tag_chunk>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3318      	adds	r3, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd fabd 	bl	800305a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ae6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aec:	429a      	cmp	r2, r3
 8005aee:	db8c      	blt.n	8005a0a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8005af0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02b      	beq.n	8005b50 <lfs_dir_relocatingcommit+0x164>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	8a9b      	ldrh	r3, [r3, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d127      	bne.n	8005b50 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8005b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <lfs_dir_relocatingcommit+0x12a>
 8005b08:	4b7b      	ldr	r3, [pc, #492]	; (8005cf8 <lfs_dir_relocatingcommit+0x30c>)
 8005b0a:	4a79      	ldr	r2, [pc, #484]	; (8005cf0 <lfs_dir_relocatingcommit+0x304>)
 8005b0c:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8005b10:	4878      	ldr	r0, [pc, #480]	; (8005cf4 <lfs_dir_relocatingcommit+0x308>)
 8005b12:	f003 f98f 	bl	8008e34 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f002 fc8e 	bl	8008440 <lfs_fs_pred>
 8005b24:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <lfs_dir_relocatingcommit+0x14c>
 8005b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2e:	f113 0f02 	cmn.w	r3, #2
 8005b32:	d001      	beq.n	8005b38 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b36:	e203      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3a:	f113 0f02 	cmn.w	r3, #2
 8005b3e:	d007      	beq.n	8005b50 <lfs_dir_relocatingcommit+0x164>
 8005b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b44:	7ddb      	ldrb	r3, [r3, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005b4e:	e121      	b.n	8005d94 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	7d9b      	ldrb	r3, [r3, #22]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80fb 	beq.w	8005d50 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005b5e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005b76:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <lfs_dir_relocatingcommit+0x1a0>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b88:	3b08      	subs	r3, #8
 8005b8a:	e003      	b.n	8005b94 <lfs_dir_relocatingcommit+0x1a8>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fa77 	bl	800308e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bb6:	9308      	str	r3, [sp, #32]
 8005bb8:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <lfs_dir_relocatingcommit+0x310>)
 8005bba:	9307      	str	r3, [sp, #28]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9306      	str	r3, [sp, #24]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9304      	str	r3, [sp, #16]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7fe f806 	bl	8003bf0 <lfs_dir_traverse>
 8005be4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3318      	adds	r3, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd fa35 	bl	800305a <lfs_pair_fromle32>
        if (err) {
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf8:	f113 0f1c 	cmn.w	r3, #28
 8005bfc:	f000 80aa 	beq.w	8005d54 <lfs_dir_relocatingcommit+0x368>
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c06:	f000 80a5 	beq.w	8005d54 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	e198      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005c0e:	f107 031c 	add.w	r3, r7, #28
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c20:	f107 031c 	add.w	r3, r7, #28
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fd fad7 	bl	80031da <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005c32:	f107 031c 	add.w	r3, r7, #28
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fd face 	bl	80031da <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005c44:	f107 031c 	add.w	r3, r7, #28
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fd fac5 	bl	80031da <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005c5c:	f107 031c 	add.w	r3, r7, #28
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fd fadf 	bl	8003224 <lfs_gstate_iszero>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f083 0301 	eor.w	r3, r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d027      	beq.n	8005cc2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005c72:	f107 031c 	add.w	r3, r7, #28
 8005c76:	461a      	mov	r2, r3
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7fe ff22 	bl	8004ac4 <lfs_dir_getgstate>
 8005c80:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8a:	e159      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005c8c:	f107 031c 	add.w	r3, r7, #28
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fd fb59 	bl	8003348 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005c96:	f107 031c 	add.w	r3, r7, #28
 8005c9a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <lfs_dir_relocatingcommit+0x314>)
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff f8bb 	bl	8004e1c <lfs_dir_commitattr>
 8005ca6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb0:	f113 0f1c 	cmn.w	r3, #28
 8005cb4:	d050      	beq.n	8005d58 <lfs_dir_relocatingcommit+0x36c>
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005cbc:	d04c      	beq.n	8005d58 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	e13e      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff f927 	bl	8004f1c <lfs_dir_commitcrc>
 8005cce:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd8:	f113 0f1c 	cmn.w	r3, #28
 8005cdc:	d03e      	beq.n	8005d5c <lfs_dir_relocatingcommit+0x370>
 8005cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ce4:	d03a      	beq.n	8005d5c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce8:	e12a      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
 8005cea:	bf00      	nop
 8005cec:	0800a204 	.word	0x0800a204
 8005cf0:	0800a928 	.word	0x0800a928
 8005cf4:	08009fa8 	.word	0x08009fa8
 8005cf8:	0800a214 	.word	0x0800a214
 8005cfc:	0800535b 	.word	0x0800535b
 8005d00:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d0a:	6992      	ldr	r2, [r2, #24]
 8005d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d10:	fb01 f202 	mul.w	r2, r1, r2
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <lfs_dir_relocatingcommit+0x33c>
 8005d1a:	4b8b      	ldr	r3, [pc, #556]	; (8005f48 <lfs_dir_relocatingcommit+0x55c>)
 8005d1c:	4a8b      	ldr	r2, [pc, #556]	; (8005f4c <lfs_dir_relocatingcommit+0x560>)
 8005d1e:	f640 0136 	movw	r1, #2102	; 0x836
 8005d22:	488b      	ldr	r0, [pc, #556]	; (8005f50 <lfs_dir_relocatingcommit+0x564>)
 8005d24:	f003 f886 	bl	8008e34 <__assert_func>
        dir->off = commit.off;
 8005d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	333c      	adds	r3, #60	; 0x3c
 8005d3a:	3230      	adds	r2, #48	; 0x30
 8005d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3348      	adds	r3, #72	; 0x48
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	e021      	b.n	8005d94 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005d50:	bf00      	nop
 8005d52:	e004      	b.n	8005d5e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005d5c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3310      	adds	r3, #16
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7fc fda7 	bl	80028b8 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	8a9b      	ldrh	r3, [r3, #20]
 8005d6e:	9302      	str	r3, [sp, #8]
 8005d70:	2300      	movs	r3, #0
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fd1b 	bl	80057bc <lfs_dir_splittingcompact>
 8005d86:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da01      	bge.n	8005d92 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	e0d6      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005d92:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	663b      	str	r3, [r7, #96]	; 0x60
 8005da6:	e0c6      	b.n	8005f36 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005daa:	3308      	adds	r3, #8
 8005dac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fd f8fa 	bl	8002fac <lfs_pair_cmp>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f040 80b8 	bne.w	8005f30 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	f103 0408 	add.w	r4, r3, #8
 8005dc8:	4615      	mov	r5, r2
 8005dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd8:	3308      	adds	r3, #8
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f000 809d 	beq.w	8005f1c <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005de2:	2300      	movs	r3, #0
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	e07b      	b.n	8005ee0 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd f996 	bl	8003124 <lfs_tag_type3>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d115      	bne.n	8005e30 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e06:	889c      	ldrh	r4, [r3, #4]
 8005e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fd f9b0 	bl	8003178 <lfs_tag_id>
 8005e18:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	d108      	bne.n	8005e30 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e24:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	e054      	b.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	4413      	add	r3, r2
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd f972 	bl	8003124 <lfs_tag_type3>
 8005e40:	4603      	mov	r3, r0
 8005e42:	461a      	mov	r2, r3
 8005e44:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d11c      	bne.n	8005e86 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4e:	889c      	ldrh	r4, [r3, #4]
 8005e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd f98c 	bl	8003178 <lfs_tag_id>
 8005e60:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005e62:	429c      	cmp	r4, r3
 8005e64:	d90f      	bls.n	8005e86 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8005e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e68:	889b      	ldrh	r3, [r3, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e70:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e74:	799b      	ldrb	r3, [r3, #6]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d12f      	bne.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	1e5a      	subs	r2, r3, #1
 8005e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8005e84:	e029      	b.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fd f947 	bl	8003124 <lfs_tag_type3>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f240 4301 	movw	r3, #1025	; 0x401
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d11b      	bne.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea4:	889c      	ldrh	r4, [r3, #4]
 8005ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fd f961 	bl	8003178 <lfs_tag_id>
 8005eb6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	d30e      	bcc.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebe:	889b      	ldrh	r3, [r3, #4]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec6:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eca:	799b      	ldrb	r3, [r3, #6]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d104      	bne.n	8005eda <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8005ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	3301      	adds	r3, #1
 8005ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	f6ff af7e 	blt.w	8005de8 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8005eec:	e016      	b.n	8005f1c <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	889a      	ldrh	r2, [r3, #4]
 8005ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef4:	8b9b      	ldrh	r3, [r3, #28]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8005efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f00:	f103 0108 	add.w	r1, r3, #8
 8005f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f06:	3320      	adds	r3, #32
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7fe fdbe 	bl	8004a8c <lfs_dir_fetch>
 8005f10:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8005f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <lfs_dir_relocatingcommit+0x530>
                    return err;
 8005f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1a:	e011      	b.n	8005f40 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8005f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1e:	889a      	ldrh	r2, [r3, #4]
 8005f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f22:	8b9b      	ldrh	r3, [r3, #28]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d303      	bcc.n	8005f30 <lfs_dir_relocatingcommit+0x544>
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	7fdb      	ldrb	r3, [r3, #31]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1de      	bne.n	8005eee <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	663b      	str	r3, [r7, #96]	; 0x60
 8005f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f af35 	bne.w	8005da8 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3770      	adds	r7, #112	; 0x70
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bdb0      	pop	{r4, r5, r7, pc}
 8005f48:	0800a0f4 	.word	0x0800a0f4
 8005f4c:	0800a928 	.word	0x0800a928
 8005f50:	08009fa8 	.word	0x08009fa8

08005f54 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005f54:	b5b0      	push	{r4, r5, r7, lr}
 8005f56:	b0bc      	sub	sp, #240	; 0xf0
 8005f58:	af04      	add	r7, sp, #16
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f6a:	e045      	b.n	8005ff8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	3308      	adds	r3, #8
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d03a      	beq.n	8005fee <lfs_dir_orphaningcommit+0x9a>
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fd f812 	bl	8002fac <lfs_pair_cmp>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d12f      	bne.n	8005fee <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f92:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d12a      	bne.n	8005fee <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d023      	beq.n	8005fee <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d91b      	bls.n	8005fee <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8005fb6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fff0 	bl	8006fa0 <lfs_file_outline>
 8005fc0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8005fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fd0:	e2ad      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8005fd2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f001 f804 	bl	8006fe4 <lfs_file_flush>
 8005fdc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <lfs_dir_orphaningcommit+0x9a>
                return err;
 8005fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fec:	e29f      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1b5      	bne.n	8005f6c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006016:	461d      	mov	r5, r3
 8006018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800601a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800601c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800602a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fcd8 	bl	80059ec <lfs_dir_relocatingcommit>
 800603c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8006040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006044:	2b00      	cmp	r3, #0
 8006046:	da02      	bge.n	800604e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8006048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800604c:	e26f      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fc ffa8 	bl	8002fac <lfs_pair_cmp>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	461d      	mov	r5, r3
 8006066:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800606a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800606c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800606e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006072:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8006076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800607a:	2b02      	cmp	r3, #2
 800607c:	d14a      	bne.n	8006114 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3348      	adds	r3, #72	; 0x48
 8006082:	461a      	mov	r2, r3
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7fe fd1c 	bl	8004ac4 <lfs_dir_getgstate>
 800608c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8006090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8006098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800609c:	e247      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80060a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3318      	adds	r3, #24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc ffed 	bl	800308e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	7ddb      	ldrb	r3, [r3, #23]
 80060b8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80060bc:	051a      	lsls	r2, r3, #20
 80060be:	4bc2      	ldr	r3, [pc, #776]	; (80063c8 <lfs_dir_orphaningcommit+0x474>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	667b      	str	r3, [r7, #100]	; 0x64
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3318      	adds	r3, #24
 80060c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060ce:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80060d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80060d6:	2000      	movs	r0, #0
 80060d8:	9001      	str	r0, [sp, #4]
 80060da:	2001      	movs	r0, #1
 80060dc:	9000      	str	r0, [sp, #0]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fc84 	bl	80059ec <lfs_dir_relocatingcommit>
 80060e4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3318      	adds	r3, #24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fc ffb4 	bl	800305a <lfs_pair_fromle32>
        if (state < 0) {
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da02      	bge.n	8006100 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80060fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060fe:	e216      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8006100:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006104:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8006114:	2300      	movs	r3, #0
 8006116:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 800611a:	e1fc      	b.n	8006516 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800611c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006124:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006128:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800612c:	4ca7      	ldr	r4, [pc, #668]	; (80063cc <lfs_dir_orphaningcommit+0x478>)
 800612e:	9403      	str	r4, [sp, #12]
 8006130:	9102      	str	r1, [sp, #8]
 8006132:	9201      	str	r2, [sp, #4]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4603      	mov	r3, r0
 8006138:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 800613c:	49a4      	ldr	r1, [pc, #656]	; (80063d0 <lfs_dir_orphaningcommit+0x47c>)
 800613e:	48a5      	ldr	r0, [pc, #660]	; (80063d4 <lfs_dir_orphaningcommit+0x480>)
 8006140:	f003 fad6 	bl	80096f0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f103 0220 	add.w	r2, r3, #32
 8006150:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7fc ff28 	bl	8002fac <lfs_pair_cmp>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8006162:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800616a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800617a:	e037      	b.n	80061ec <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800617c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7fc ff0e 	bl	8002fac <lfs_pair_cmp>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8006196:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800619a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800619e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80061a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061a8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80061aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061ae:	799b      	ldrb	r3, [r3, #6]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d116      	bne.n	80061e2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80061b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061b8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80061bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fc fef2 	bl	8002fac <lfs_pair_cmp>
 80061c8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80061ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80061d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80061d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80061e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1c3      	bne.n	800617c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80061f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80061f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f002 f9a6 	bl	8008550 <lfs_fs_parent>
 8006204:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800620c:	2b00      	cmp	r3, #0
 800620e:	da07      	bge.n	8006220 <lfs_dir_orphaningcommit+0x2cc>
 8006210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006214:	f113 0f02 	cmn.w	r3, #2
 8006218:	d002      	beq.n	8006220 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800621a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800621e:	e186      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8006220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006224:	f113 0f02 	cmn.w	r3, #2
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8006232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006236:	f113 0f02 	cmn.w	r3, #2
 800623a:	f000 809e 	beq.w	800637a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800623e:	2101      	movs	r1, #1
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f002 f9db 	bl	80085fc <lfs_fs_preporphans>
 8006246:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800624a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <lfs_dir_orphaningcommit+0x304>
                return err;
 8006252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006256:	e16a      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006258:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800625c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3330      	adds	r3, #48	; 0x30
 8006264:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd f82c 	bl	80032c8 <lfs_gstate_hasmovehere>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02d      	beq.n	80062d2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc ff7c 	bl	8003178 <lfs_tag_id>
 8006280:	4603      	mov	r3, r0
 8006282:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8006286:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800628a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800628e:	484f      	ldr	r0, [pc, #316]	; (80063cc <lfs_dir_orphaningcommit+0x478>)
 8006290:	9002      	str	r0, [sp, #8]
 8006292:	9201      	str	r2, [sp, #4]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	460b      	mov	r3, r1
 8006298:	f640 02ed 	movw	r2, #2285	; 0x8ed
 800629c:	494c      	ldr	r1, [pc, #304]	; (80063d0 <lfs_dir_orphaningcommit+0x47c>)
 800629e:	484e      	ldr	r0, [pc, #312]	; (80063d8 <lfs_dir_orphaningcommit+0x484>)
 80062a0:	f003 fa26 	bl	80096f0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80062a4:	2200      	movs	r2, #0
 80062a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f002 f9e0 	bl	8008670 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80062b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fc ff5f 	bl	8003178 <lfs_tag_id>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d205      	bcs.n	80062d2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80062c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80062ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80062d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d4:	657b      	str	r3, [r7, #84]	; 0x54
 80062d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80062da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc fed5 	bl	800308e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80062e4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80062e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <lfs_dir_orphaningcommit+0x3ac>
 80062f0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80062fa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80062fe:	e000      	b.n	8006302 <lfs_dir_orphaningcommit+0x3ae>
 8006300:	2300      	movs	r3, #0
 8006302:	647b      	str	r3, [r7, #68]	; 0x44
 8006304:	2300      	movs	r3, #0
 8006306:	64bb      	str	r3, [r7, #72]	; 0x48
 8006308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006312:	653b      	str	r3, [r7, #80]	; 0x50
 8006314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006318:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800631c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006320:	2000      	movs	r0, #0
 8006322:	9001      	str	r0, [sp, #4]
 8006324:	2002      	movs	r0, #2
 8006326:	9000      	str	r0, [sp, #0]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff fb5f 	bl	80059ec <lfs_dir_relocatingcommit>
 800632e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8006332:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006336:	4618      	mov	r0, r3
 8006338:	f7fc fe8f 	bl	800305a <lfs_pair_fromle32>
            if (state < 0) {
 800633c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006340:	2b00      	cmp	r3, #0
 8006342:	da02      	bge.n	800634a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8006344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006348:	e0f1      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800634a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634e:	2b01      	cmp	r3, #1
 8006350:	d113      	bne.n	800637a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8006352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8006358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800635e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006362:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800636e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006378:	e0cd      	b.n	8006516 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800637a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800637e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006382:	4619      	mov	r1, r3
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f002 f85b 	bl	8008440 <lfs_fs_pred>
 800638a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800638e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <lfs_dir_orphaningcommit+0x452>
 8006396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800639a:	f113 0f02 	cmn.w	r3, #2
 800639e:	d002      	beq.n	80063a6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80063a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063a4:	e0c3      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80063a6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01a      	beq.n	80063e4 <lfs_dir_orphaningcommit+0x490>
 80063ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b2:	f113 0f02 	cmn.w	r3, #2
 80063b6:	d115      	bne.n	80063e4 <lfs_dir_orphaningcommit+0x490>
 80063b8:	4b08      	ldr	r3, [pc, #32]	; (80063dc <lfs_dir_orphaningcommit+0x488>)
 80063ba:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <lfs_dir_orphaningcommit+0x48c>)
 80063bc:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80063c0:	4803      	ldr	r0, [pc, #12]	; (80063d0 <lfs_dir_orphaningcommit+0x47c>)
 80063c2:	f002 fd37 	bl	8008e34 <__assert_func>
 80063c6:	bf00      	nop
 80063c8:	000ffc08 	.word	0x000ffc08
 80063cc:	0800a09c 	.word	0x0800a09c
 80063d0:	08009fa8 	.word	0x08009fa8
 80063d4:	0800a21c 	.word	0x0800a21c
 80063d8:	0800a258 	.word	0x0800a258
 80063dc:	0800a29c 	.word	0x0800a29c
 80063e0:	0800a944 	.word	0x0800a944

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80063e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063e8:	f113 0f02 	cmn.w	r3, #2
 80063ec:	f000 8093 	beq.w	8006516 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3330      	adds	r3, #48	; 0x30
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fc ff32 	bl	800325e <lfs_gstate_hasorphans>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d011      	beq.n	8006424 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8006400:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006404:	425b      	negs	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	b25b      	sxtb	r3, r3
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f002 f8f5 	bl	80085fc <lfs_fs_preporphans>
 8006412:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8006416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800641e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006422:	e084      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006424:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006428:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3330      	adds	r3, #48	; 0x30
 8006430:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc ff46 	bl	80032c8 <lfs_gstate_hasmovehere>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01c      	beq.n	800647c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	4618      	mov	r0, r3
 8006448:	f7fc fe96 	bl	8003178 <lfs_tag_id>
 800644c:	4603      	mov	r3, r0
 800644e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8006452:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006456:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800645a:	4837      	ldr	r0, [pc, #220]	; (8006538 <lfs_dir_orphaningcommit+0x5e4>)
 800645c:	9002      	str	r0, [sp, #8]
 800645e:	9201      	str	r2, [sp, #4]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	460b      	mov	r3, r1
 8006464:	f640 1221 	movw	r2, #2337	; 0x921
 8006468:	4934      	ldr	r1, [pc, #208]	; (800653c <lfs_dir_orphaningcommit+0x5e8>)
 800646a:	4835      	ldr	r0, [pc, #212]	; (8006540 <lfs_dir_orphaningcommit+0x5ec>)
 800646c:	f003 f940 	bl	80096f0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006470:	2200      	movs	r2, #0
 8006472:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f002 f8fa 	bl	8008670 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800647c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8006482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8006488:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800648c:	4618      	mov	r0, r3
 800648e:	f7fc fdfe 	bl	800308e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8006492:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006496:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <lfs_dir_orphaningcommit+0x55a>
 800649e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80064a2:	029b      	lsls	r3, r3, #10
 80064a4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80064a8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80064ac:	e000      	b.n	80064b0 <lfs_dir_orphaningcommit+0x55c>
 80064ae:	2300      	movs	r3, #0
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
 80064b2:	2300      	movs	r3, #0
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80064ba:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80064be:	051a      	lsls	r2, r3, #20
 80064c0:	4b20      	ldr	r3, [pc, #128]	; (8006544 <lfs_dir_orphaningcommit+0x5f0>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80064ca:	633b      	str	r3, [r7, #48]	; 0x30
 80064cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80064d4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80064d8:	2000      	movs	r0, #0
 80064da:	9001      	str	r0, [sp, #4]
 80064dc:	2002      	movs	r0, #2
 80064de:	9000      	str	r0, [sp, #0]
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7ff fa83 	bl	80059ec <lfs_dir_relocatingcommit>
 80064e6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80064ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fc fdb3 	bl	800305a <lfs_pair_fromle32>
            if (state < 0) {
 80064f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da02      	bge.n	8006502 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80064fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006500:	e015      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8006502:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006506:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800650a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800650c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	2b01      	cmp	r3, #1
 800651c:	f43f adfe 	beq.w	800611c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8006520:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <lfs_dir_orphaningcommit+0x5d8>
 8006528:	2303      	movs	r3, #3
 800652a:	e000      	b.n	800652e <lfs_dir_orphaningcommit+0x5da>
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	37e0      	adds	r7, #224	; 0xe0
 8006532:	46bd      	mov	sp, r7
 8006534:	bdb0      	pop	{r4, r5, r7, pc}
 8006536:	bf00      	nop
 8006538:	0800a09c 	.word	0x0800a09c
 800653c:	08009fa8 	.word	0x08009fa8
 8006540:	0800a258 	.word	0x0800a258
 8006544:	000ffc08 	.word	0x000ffc08

08006548 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fcf9 	bl	8005f54 <lfs_dir_orphaningcommit>
 8006562:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da01      	bge.n	800656e <lfs_dir_commit+0x26>
        return orphans;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	e00d      	b.n	800658a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8006574:	2100      	movs	r1, #0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f002 f91a 	bl	80087b0 <lfs_fs_deorphan>
 800657c:	6138      	str	r0, [r7, #16]
        if (err) {
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <lfs_dir_commit+0x40>
            return err;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	e000      	b.n	800658a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8006592:	b590      	push	{r4, r7, lr}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	3b08      	subs	r3, #8
 80065aa:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <lfs_ctz_index+0x2e>
        return 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	e01c      	b.n	80065fa <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fc f917 	bl	80027f8 <lfs_popc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	3302      	adds	r3, #2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	1ad4      	subs	r4, r2, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7fc f905 	bl	80027f8 <lfs_popc>
 80065ee:	4603      	mov	r3, r0
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	1ae2      	subs	r2, r4, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]
    return i;
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd90      	pop	{r4, r7, pc}

08006602 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8006602:	b590      	push	{r4, r7, lr}
 8006604:	b08f      	sub	sp, #60	; 0x3c
 8006606:	af04      	add	r7, sp, #16
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	d108      	bne.n	8006628 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800661c:	601a      	str	r2, [r3, #0]
        *off = 0;
 800661e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
        return 0;
 8006624:	2300      	movs	r3, #0
 8006626:	e053      	b.n	80066d0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	3b01      	subs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ffac 	bl	8006592 <lfs_ctz_index>
 800663a:	4603      	mov	r3, r0
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800663e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ffa4 	bl	8006592 <lfs_ctz_index>
 800664a:	4603      	mov	r3, r0
 800664c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800664e:	e034      	b.n	80066ba <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	3301      	adds	r3, #1
 8006658:	4618      	mov	r0, r3
 800665a:	f7fc f8ae 	bl	80027ba <lfs_npw2>
 800665e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8006660:	1e5c      	subs	r4, r3, #1
 8006662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006664:	f7fc f8b9 	bl	80027da <lfs_ctz>
 8006668:	4603      	mov	r3, r0
 800666a:	4619      	mov	r1, r3
 800666c:	4620      	mov	r0, r4
 800666e:	f7fc f86d 	bl	800274c <lfs_min>
 8006672:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	2104      	movs	r1, #4
 800667c:	9103      	str	r1, [sp, #12]
 800667e:	4639      	mov	r1, r7
 8006680:	9102      	str	r1, [sp, #8]
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2304      	movs	r3, #4
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7fc f939 	bl	8002904 <lfs_bd_read>
 8006692:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7fc f8c8 	bl	800282c <lfs_fromle32>
 800669c:	4603      	mov	r3, r0
 800669e:	603b      	str	r3, [r7, #0]
        if (err) {
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <lfs_ctz_find+0xa8>
            return err;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	e012      	b.n	80066d0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80066aa:	2201      	movs	r2, #1
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d8c6      	bhi.n	8006650 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	601a      	str	r2, [r3, #0]
    *off = pos;
 80066c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066cc:	601a      	str	r2, [r3, #0]
    return 0;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	372c      	adds	r7, #44	; 0x2c
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd90      	pop	{r4, r7, pc}

080066d8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b092      	sub	sp, #72	; 0x48
 80066dc:	af04      	add	r7, sp, #16
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80066e6:	f107 0320 	add.w	r3, r7, #32
 80066ea:	4619      	mov	r1, r3
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7fc ff93 	bl	8003618 <lfs_alloc>
 80066f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <lfs_ctz_extend+0x26>
            return err;
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	e0e9      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	4619      	mov	r1, r3
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7fc fbf0 	bl	8002ee8 <lfs_bd_erase>
 8006708:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d006      	beq.n	800671e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006716:	f000 80cb 	beq.w	80068b0 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	e0d9      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800671e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d107      	bne.n	8006734 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006728:	601a      	str	r2, [r3, #0]
                *off = 0;
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
                return 0;
 8006730:	2300      	movs	r3, #0
 8006732:	e0ce      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8006734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006736:	3b01      	subs	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800673a:	f107 031c 	add.w	r3, r7, #28
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff ff26 	bl	8006592 <lfs_ctz_index>
 8006746:	4603      	mov	r3, r0
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	429a      	cmp	r2, r3
 800675a:	d044      	beq.n	80067e6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800675c:	2300      	movs	r3, #0
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
 8006760:	e035      	b.n	80067ce <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	2301      	movs	r3, #1
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	f107 0317 	add.w	r3, r7, #23
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7fc f8bf 	bl	8002904 <lfs_bd_read>
 8006786:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <lfs_ctz_extend+0xba>
                        return err;
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	e09f      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	2201      	movs	r2, #1
 8006796:	9203      	str	r2, [sp, #12]
 8006798:	f107 0217 	add.w	r2, r7, #23
 800679c:	9202      	str	r2, [sp, #8]
 800679e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067a0:	9201      	str	r2, [sp, #4]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2301      	movs	r3, #1
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7fc faf0 	bl	8002d90 <lfs_bd_prog>
 80067b0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80067be:	d101      	bne.n	80067c4 <lfs_ctz_extend+0xec>
                            goto relocate;
 80067c0:	bf00      	nop
                    goto relocate;
 80067c2:	e075      	b.n	80068b0 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80067c6:	e084      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	3301      	adds	r3, #1
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d3c5      	bcc.n	8006762 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80067d6:	6a3a      	ldr	r2, [r7, #32]
 80067d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067da:	601a      	str	r2, [r3, #0]
                *off = noff;
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	601a      	str	r2, [r3, #0]
                return 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e075      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	3301      	adds	r3, #1
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80067ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ee:	f7fb fff4 	bl	80027da <lfs_ctz>
 80067f2:	4603      	mov	r3, r0
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80067fc:	2300      	movs	r3, #0
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006800:	e049      	b.n	8006896 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	4618      	mov	r0, r3
 8006806:	f7fc f81c 	bl	8002842 <lfs_tole32>
 800680a:	4603      	mov	r3, r0
 800680c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006812:	0092      	lsls	r2, r2, #2
 8006814:	2104      	movs	r1, #4
 8006816:	9103      	str	r1, [sp, #12]
 8006818:	f107 0118 	add.w	r1, r7, #24
 800681c:	9102      	str	r1, [sp, #8]
 800681e:	9201      	str	r2, [sp, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2301      	movs	r3, #1
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7fc fab1 	bl	8002d90 <lfs_bd_prog>
 800682e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	4618      	mov	r0, r3
 8006834:	f7fb fffa 	bl	800282c <lfs_fromle32>
 8006838:	4603      	mov	r3, r0
 800683a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006848:	d034      	beq.n	80068b4 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	e041      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	3b01      	subs	r3, #1
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	429a      	cmp	r2, r3
 8006856:	d01b      	beq.n	8006890 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685c:	0092      	lsls	r2, r2, #2
 800685e:	2104      	movs	r1, #4
 8006860:	9103      	str	r1, [sp, #12]
 8006862:	f107 0118 	add.w	r1, r7, #24
 8006866:	9102      	str	r1, [sp, #8]
 8006868:	9201      	str	r2, [sp, #4]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2304      	movs	r3, #4
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	2100      	movs	r1, #0
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7fc f846 	bl	8002904 <lfs_bd_read>
 8006878:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fb ffd5 	bl	800282c <lfs_fromle32>
 8006882:	4603      	mov	r3, r0
 8006884:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <lfs_ctz_extend+0x1b8>
                        return err;
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	e020      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	3301      	adds	r3, #1
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	429a      	cmp	r2, r3
 800689c:	d3b1      	bcc.n	8006802 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068aa:	601a      	str	r2, [r3, #0]
            return 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e010      	b.n	80068d2 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <lfs_ctz_extend+0x1de>
                        goto relocate;
 80068b4:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <lfs_ctz_extend+0x204>)
 80068ba:	9200      	str	r2, [sp, #0]
 80068bc:	f640 22da 	movw	r2, #2778	; 0xada
 80068c0:	4907      	ldr	r1, [pc, #28]	; (80068e0 <lfs_ctz_extend+0x208>)
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <lfs_ctz_extend+0x20c>)
 80068c4:	f002 ff14 	bl	80096f0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7fb fff4 	bl	80028b8 <lfs_cache_drop>
    while (true) {
 80068d0:	e709      	b.n	80066e6 <lfs_ctz_extend+0xe>
    }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3738      	adds	r7, #56	; 0x38
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	0800a09c 	.word	0x0800a09c
 80068e0:	08009fa8 	.word	0x08009fa8
 80068e4:	0800a11c 	.word	0x0800a11c

080068e8 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b090      	sub	sp, #64	; 0x40
 80068ec:	af04      	add	r7, sp, #16
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <lfs_ctz_traverse+0x18>
        return 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e06b      	b.n	80069d8 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	3b01      	subs	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	f107 031c 	add.w	r3, r7, #28
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff fe40 	bl	8006592 <lfs_ctz_index>
 8006912:	4603      	mov	r3, r0
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800691c:	4798      	blx	r3
 800691e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <lfs_ctz_traverse+0x42>
            return err;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	e056      	b.n	80069d8 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <lfs_ctz_traverse+0x4c>
            return 0;
 8006930:	2300      	movs	r3, #0
 8006932:	e051      	b.n	80069d8 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	f1c3 0302 	rsb	r3, r3, #2
 800693e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8006940:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8006942:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006944:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8006946:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	f107 0314 	add.w	r3, r7, #20
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	2300      	movs	r3, #0
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7fb ffd0 	bl	8002904 <lfs_bd_read>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fb ff5f 	bl	800282c <lfs_fromle32>
 800696e:	4603      	mov	r3, r0
 8006970:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4618      	mov	r0, r3
 8006976:	f7fb ff59 	bl	800282c <lfs_fromle32>
 800697a:	4603      	mov	r3, r0
 800697c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <lfs_ctz_traverse+0xa0>
            return err;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	e027      	b.n	80069d8 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8006988:	2300      	movs	r3, #0
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
 800698c:	e012      	b.n	80069b4 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	3330      	adds	r3, #48	; 0x30
 8006994:	443b      	add	r3, r7
 8006996:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	4611      	mov	r1, r2
 800699e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80069a0:	4798      	blx	r3
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <lfs_ctz_traverse+0xc6>
                return err;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	e014      	b.n	80069d8 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	3301      	adds	r3, #1
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ba:	429a      	cmp	r2, r3
 80069bc:	dbe7      	blt.n	800698e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	3330      	adds	r3, #48	; 0x30
 80069c6:	443b      	add	r3, r7
 80069c8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80069cc:	603b      	str	r3, [r7, #0]
        index -= count;
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 80069d6:	e79e      	b.n	8006916 <lfs_ctz_traverse+0x2e>
    }
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3730      	adds	r7, #48	; 0x30
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80069e0:	b5b0      	push	{r4, r5, r7, lr}
 80069e2:	b09a      	sub	sp, #104	; 0x68
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f002 f87d 	bl	8008af8 <lfs_fs_forceconsistency>
 80069fe:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8006a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <lfs_file_rawopencfg+0x2a>
            return err;
 8006a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a08:	e1b0      	b.n	8006d6c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a0e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f103 0108 	add.w	r1, r3, #8
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3304      	adds	r3, #4
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7fe f8c1 	bl	8004bbc <lfs_dir_find>
 8006a3a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da0c      	bge.n	8006a5c <lfs_file_rawopencfg+0x7c>
 8006a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a44:	f113 0f02 	cmn.w	r3, #2
 8006a48:	d105      	bne.n	8006a56 <lfs_file_rawopencfg+0x76>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	889b      	ldrh	r3, [r3, #4]
 8006a4e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d102      	bne.n	8006a5c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8006a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a58:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006a5a:	e17c      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7fc fd6e 	bl	8003546 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a6c:	f113 0f02 	cmn.w	r3, #2
 8006a70:	d14e      	bne.n	8006b10 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006a7c:	f06f 0301 	mvn.w	r3, #1
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006a82:	e168      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7f9 fbb2 	bl	80001f0 <strlen>
 8006a8c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d903      	bls.n	8006aa0 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8006a98:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006a9e:	e15a      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f103 0108 	add.w	r1, r3, #8
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	889b      	ldrh	r3, [r3, #4]
 8006aaa:	029b      	lsls	r3, r3, #10
 8006aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	889b      	ldrh	r3, [r3, #4]
 8006abe:	029a      	lsls	r2, r3, #10
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	889b      	ldrh	r3, [r3, #4]
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ade:	2300      	movs	r3, #0
 8006ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fd2d 	bl	8006548 <lfs_dir_commit>
 8006aee:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af2:	f113 0f1c 	cmn.w	r3, #28
 8006af6:	d001      	beq.n	8006afc <lfs_file_rawopencfg+0x11c>
 8006af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006afa:	e001      	b.n	8006b00 <lfs_file_rawopencfg+0x120>
 8006afc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006b00:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8006b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 8125 	bne.w	8006d54 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8006b0a:	4b9a      	ldr	r3, [pc, #616]	; (8006d74 <lfs_file_rawopencfg+0x394>)
 8006b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b0e:	e044      	b.n	8006b9a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8006b1a:	f06f 0310 	mvn.w	r3, #16
 8006b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006b20:	e119      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fc fafd 	bl	8003124 <lfs_tag_type3>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d003      	beq.n	8006b38 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8006b30:	f06f 0314 	mvn.w	r3, #20
 8006b34:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006b36:	e10e      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	889b      	ldrh	r3, [r3, #4]
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b50:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b5e:	e01c      	b.n	8006b9a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b70:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006b78:	9200      	str	r2, [sp, #0]
 8006b7a:	4a7f      	ldr	r2, [pc, #508]	; (8006d78 <lfs_file_rawopencfg+0x398>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7fc fee5 	bl	800394c <lfs_dir_get>
 8006b82:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da02      	bge.n	8006b90 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006b8e:	e0e2      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	3328      	adds	r3, #40	; 0x28
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fc fbf7 	bl	8003388 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b9e:	e063      	b.n	8006c68 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d03c      	beq.n	8006c26 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bba:	4613      	mov	r3, r2
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bca:	051a      	lsls	r2, r3, #20
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	889b      	ldrh	r3, [r3, #4]
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	ea42 0103 	orr.w	r1, r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bda:	6858      	ldr	r0, [r3, #4]
 8006bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bde:	4613      	mov	r3, r2
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4403      	add	r3, r0
 8006be8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bea:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4603      	mov	r3, r0
 8006c06:	4a5d      	ldr	r2, [pc, #372]	; (8006d7c <lfs_file_rawopencfg+0x39c>)
 8006c08:	4621      	mov	r1, r4
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7fc fe9e 	bl	800394c <lfs_dir_get>
 8006c10:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da06      	bge.n	8006c26 <lfs_file_rawopencfg+0x246>
 8006c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1a:	f113 0f02 	cmn.w	r3, #2
 8006c1e:	d002      	beq.n	8006c26 <lfs_file_rawopencfg+0x246>
                err = res;
 8006c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c22:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006c24:	e097      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d017      	beq.n	8006c62 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d903      	bls.n	8006c56 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006c4e:	f06f 031b 	mvn.w	r3, #27
 8006c52:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006c54:	e07f      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c64:	3301      	adds	r3, #1
 8006c66:	657b      	str	r3, [r7, #84]	; 0x54
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d395      	bcc.n	8006ba0 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	64da      	str	r2, [r3, #76]	; 0x4c
 8006c88:	e010      	b.n	8006cac <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fb fdfa 	bl	800288a <lfs_malloc>
 8006c96:	4602      	mov	r2, r0
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006ca4:	f06f 030b 	mvn.w	r3, #11
 8006ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006caa:	e054      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3340      	adds	r3, #64	; 0x40
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7fb fe0f 	bl	80028d6 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc fa32 	bl	8003124 <lfs_tag_type3>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f240 2301 	movw	r3, #513	; 0x201
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d141      	bne.n	8006d50 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f06f 0201 	mvn.w	r2, #1
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fc fa5e 	bl	8003198 <lfs_tag_size>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d020      	beq.n	8006d50 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	889b      	ldrh	r3, [r3, #4]
 8006d18:	029c      	lsls	r4, r3, #10
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fb fd12 	bl	800274c <lfs_min>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	4a0f      	ldr	r2, [pc, #60]	; (8006d78 <lfs_file_rawopencfg+0x398>)
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7fc fe05 	bl	800394c <lfs_dir_get>
 8006d42:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da02      	bge.n	8006d50 <lfs_file_rawopencfg+0x370>
                err = res;
 8006d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006d4e:	e002      	b.n	8006d56 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e00b      	b.n	8006d6c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006d54:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f823 	bl	8006db0 <lfs_file_rawclose>
    return err;
 8006d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3760      	adds	r7, #96	; 0x60
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bdb0      	pop	{r4, r5, r7, pc}
 8006d74:	20100000 	.word	0x20100000
 8006d78:	700ffc00 	.word	0x700ffc00
 8006d7c:	7ffffc00 	.word	0x7ffffc00

08006d80 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <lfs_file_rawopen+0x2c>)
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fe21 	bl	80069e0 <lfs_file_rawopencfg>
 8006d9e:	6178      	str	r0, [r7, #20]
    return err;
 8006da0:	697b      	ldr	r3, [r7, #20]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	0800a95c 	.word	0x0800a95c

08006db0 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f9e5 	bl	800718c <lfs_file_rawsync>
 8006dc2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fc fb9b 	bl	8003502 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fb fd61 	bl	80028a2 <lfs_free>
    }

    return err;
 8006de0:	68fb      	ldr	r3, [r7, #12]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b08d      	sub	sp, #52	; 0x34
 8006df0:	af06      	add	r7, sp, #24
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006df6:	f107 030c 	add.w	r3, r7, #12
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fc fc0b 	bl	8003618 <lfs_alloc>
 8006e02:	6138      	str	r0, [r7, #16]
        if (err) {
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <lfs_file_relocate+0x22>
            return err;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	e0bb      	b.n	8006f86 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc f868 	bl	8002ee8 <lfs_bd_erase>
 8006e18:	6138      	str	r0, [r7, #16]
        if (err) {
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006e26:	f000 809b 	beq.w	8006f60 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	e0ab      	b.n	8006f86 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e069      	b.n	8006f08 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d027      	beq.n	8006e90 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f103 0008 	add.w	r0, r3, #8
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	889b      	ldrh	r3, [r3, #4]
 8006e58:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e62:	2101      	movs	r1, #1
 8006e64:	9105      	str	r1, [sp, #20]
 8006e66:	f107 010b 	add.w	r1, r7, #11
 8006e6a:	9104      	str	r1, [sp, #16]
 8006e6c:	6979      	ldr	r1, [r7, #20]
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	4b47      	ldr	r3, [pc, #284]	; (8006f90 <lfs_file_relocate+0x1a4>)
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	9200      	str	r2, [sp, #0]
 8006e78:	4623      	mov	r3, r4
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fc fd7f 	bl	8003982 <lfs_dir_getread>
 8006e84:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01e      	beq.n	8006eca <lfs_file_relocate+0xde>
                    return err;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	e07a      	b.n	8006f86 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8006e96:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1ad4      	subs	r4, r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	9203      	str	r2, [sp, #12]
 8006ea8:	f107 020b 	add.w	r2, r7, #11
 8006eac:	9202      	str	r2, [sp, #8]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	9201      	str	r2, [sp, #4]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fb fd23 	bl	8002904 <lfs_bd_read>
 8006ebe:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <lfs_file_relocate+0xde>
                    return err;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	e05d      	b.n	8006f86 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 0110 	add.w	r1, r3, #16
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	9203      	str	r2, [sp, #12]
 8006ed8:	f107 020b 	add.w	r2, r7, #11
 8006edc:	9202      	str	r2, [sp, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	9201      	str	r2, [sp, #4]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb ff51 	bl	8002d90 <lfs_bd_prog>
 8006eee:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006efc:	d032      	beq.n	8006f64 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	e041      	b.n	8006f86 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3301      	adds	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d390      	bcc.n	8006e34 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69d9      	ldr	r1, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	461a      	mov	r2, r3
 8006f22:	f002 f801 	bl	8008f28 <memcpy>
        file->cache.block = lfs->pcache.block;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695a      	ldr	r2, [r3, #20]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3310      	adds	r3, #16
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7fb fcc6 	bl	80028d6 <lfs_cache_zero>

        file->block = nblock;
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e012      	b.n	8006f86 <lfs_file_relocate+0x19a>
                goto relocate;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <lfs_file_relocate+0x17a>
                    goto relocate;
 8006f64:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <lfs_file_relocate+0x1a8>)
 8006f6a:	9200      	str	r2, [sp, #0]
 8006f6c:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8006f70:	4909      	ldr	r1, [pc, #36]	; (8006f98 <lfs_file_relocate+0x1ac>)
 8006f72:	480a      	ldr	r0, [pc, #40]	; (8006f9c <lfs_file_relocate+0x1b0>)
 8006f74:	f002 fbbc 	bl	80096f0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3310      	adds	r3, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fb fc9a 	bl	80028b8 <lfs_cache_drop>
    while (true) {
 8006f84:	e737      	b.n	8006df6 <lfs_file_relocate+0xa>
    }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	fff7fc00 	.word	0xfff7fc00
 8006f94:	0800a09c 	.word	0x0800a09c
 8006f98:	08009fa8 	.word	0x08009fa8
 8006f9c:	0800a11c 	.word	0x0800a11c

08006fa0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc fb10 	bl	80035d8 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff ff16 	bl	8006dec <lfs_file_relocate>
 8006fc0:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <lfs_file_outline+0x2c>
        return err;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e006      	b.n	8006fda <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b09f      	sub	sp, #124	; 0x7c
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	3340      	adds	r3, #64	; 0x40
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fb fc53 	bl	80028b8 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80a4 	beq.w	8007174 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d176      	bne.n	800712c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	2254      	movs	r2, #84	; 0x54
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 ff7c 	bl	8008f44 <memset>
                .ctz.head = file->ctz.head,
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38
 8007058:	2301      	movs	r3, #1
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8007060:	643b      	str	r3, [r7, #64]	; 0x40
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8007068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800706a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fb fc20 	bl	80028b8 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8007078:	e02b      	b.n	80070d2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800707a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800707e:	f107 010c 	add.w	r1, r7, #12
 8007082:	2301      	movs	r3, #1
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f90d 	bl	80072a4 <lfs_file_flushedread>
 800708a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800708c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708e:	2b00      	cmp	r3, #0
 8007090:	da01      	bge.n	8007096 <lfs_file_flush+0xb2>
                    return res;
 8007092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007094:	e06f      	b.n	8007176 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8007096:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800709a:	2301      	movs	r3, #1
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa08 	bl	80074b4 <lfs_file_flushedwrite>
 80070a4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80070a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da01      	bge.n	80070b0 <lfs_file_flush+0xcc>
                    return res;
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	e062      	b.n	8007176 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b8:	d00b      	beq.n	80070d2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80070ba:	f107 030c 	add.w	r3, r7, #12
 80070be:	3340      	adds	r3, #64	; 0x40
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb fbf8 	bl	80028b8 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fb fbf3 	bl	80028b8 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d3cd      	bcc.n	800707a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	2301      	movs	r3, #1
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fb fda1 	bl	8002c30 <lfs_bd_flush>
 80070ee:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80070f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d026      	beq.n	8007144 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80070f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80070fc:	d001      	beq.n	8007102 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80070fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007100:	e039      	b.n	8007176 <lfs_file_flush+0x192>
                        goto relocate;
 8007102:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <lfs_file_flush+0x19c>)
 800710a:	9200      	str	r2, [sp, #0]
 800710c:	f640 425f 	movw	r2, #3167	; 0xc5f
 8007110:	491c      	ldr	r1, [pc, #112]	; (8007184 <lfs_file_flush+0x1a0>)
 8007112:	481d      	ldr	r0, [pc, #116]	; (8007188 <lfs_file_flush+0x1a4>)
 8007114:	f002 faec 	bl	80096f0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fe66 	bl	8006dec <lfs_file_relocate>
 8007120:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8007122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0da      	beq.n	80070de <lfs_file_flush+0xfa>
                    return err;
 8007128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800712a:	e024      	b.n	8007176 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7fb faf8 	bl	800272c <lfs_max>
 800713c:	4602      	mov	r2, r0
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	635a      	str	r2, [r3, #52]	; 0x34
 8007142:	e000      	b.n	8007146 <lfs_file_flush+0x162>
                break;
 8007144:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3774      	adds	r7, #116	; 0x74
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}
 800717e:	bf00      	nop
 8007180:	0800a09c 	.word	0x0800a09c
 8007184:	08009fa8 	.word	0x08009fa8
 8007188:	0800a11c 	.word	0x0800a11c

0800718c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b090      	sub	sp, #64	; 0x40
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e07a      	b.n	800729c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff ff1b 	bl	8006fe4 <lfs_file_flush>
 80071ae:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	e06a      	b.n	800729c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d063      	beq.n	800729a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fb fecd 	bl	8002f76 <lfs_pair_isnull>
 80071dc:	4603      	mov	r3, r0
 80071de:	f083 0301 	eor.w	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d058      	beq.n	800729a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80071f4:	f240 2301 	movw	r3, #513	; 0x201
 80071f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
 8007206:	e014      	b.n	8007232 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8007208:	f240 2302 	movw	r3, #514	; 0x202
 800720c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007214:	3228      	adds	r2, #40	; 0x28
 8007216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800721a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800721e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007222:	4618      	mov	r0, r3
 8007224:	f7fc f8c8 	bl	80033b8 <lfs_ctz_tole32>
            buffer = &ctz;
 8007228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800722c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800722e:	2308      	movs	r3, #8
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f103 0108 	add.w	r1, r3, #8
 8007238:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800723a:	051a      	lsls	r2, r3, #20
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	889b      	ldrh	r3, [r3, #4]
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	431a      	orrs	r2, r3
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	4313      	orrs	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	889b      	ldrh	r3, [r3, #4]
 8007252:	029a      	lsls	r2, r3, #10
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
 800726a:	f107 0218 	add.w	r2, r7, #24
 800726e:	2302      	movs	r3, #2
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f969 	bl	8006548 <lfs_dir_commit>
 8007276:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	e006      	b.n	800729c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3740      	adds	r7, #64	; 0x40
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80072a4:	b5b0      	push	{r4, r5, r7, lr}
 80072a6:	b090      	sub	sp, #64	; 0x40
 80072a8:	af06      	add	r7, sp, #24
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d301      	bcc.n	80072ca <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e0b7      	b.n	800743a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	f7fb fa38 	bl	800274c <lfs_min>
 80072dc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80072e2:	e0a5      	b.n	8007430 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072f8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d130      	bne.n	8007360 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11c      	bne.n	8007344 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	3138      	adds	r1, #56	; 0x38
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	303c      	adds	r0, #60	; 0x3c
 8007324:	9003      	str	r0, [sp, #12]
 8007326:	9102      	str	r1, [sp, #8]
 8007328:	9201      	str	r2, [sp, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	462b      	mov	r3, r5
 800732e:	4622      	mov	r2, r4
 8007330:	2100      	movs	r1, #0
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff f965 	bl	8006602 <lfs_ctz_find>
 8007338:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <lfs_file_flushedread+0xb0>
                    return err;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	e07a      	b.n	800743a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f06f 0201 	mvn.w	r2, #1
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6a38      	ldr	r0, [r7, #32]
 8007370:	f7fb f9ec 	bl	800274c <lfs_min>
 8007374:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d026      	beq.n	80073d0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f103 0408 	add.w	r4, r3, #8
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8007392:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	889b      	ldrh	r3, [r3, #4]
 8007398:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800739a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800739e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80073a6:	69b8      	ldr	r0, [r7, #24]
 80073a8:	9005      	str	r0, [sp, #20]
 80073aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	9103      	str	r1, [sp, #12]
 80073b0:	9302      	str	r3, [sp, #8]
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <lfs_file_flushedread+0x1a0>)
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	9200      	str	r2, [sp, #0]
 80073b8:	462b      	mov	r3, r5
 80073ba:	2200      	movs	r2, #0
 80073bc:	4621      	mov	r1, r4
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fc fadf 	bl	8003982 <lfs_dir_getread>
 80073c4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01d      	beq.n	8007408 <lfs_file_flushedread+0x164>
                return err;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	e034      	b.n	800743a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80073da:	69dc      	ldr	r4, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073e4:	69b9      	ldr	r1, [r7, #24]
 80073e6:	9103      	str	r1, [sp, #12]
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	9102      	str	r1, [sp, #8]
 80073ec:	9201      	str	r2, [sp, #4]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4623      	mov	r3, r4
 80073f2:	4602      	mov	r2, r0
 80073f4:	2100      	movs	r1, #0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7fb fa84 	bl	8002904 <lfs_bd_read>
 80073fc:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <lfs_file_flushedread+0x164>
                return err;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	e018      	b.n	800743a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	441a      	add	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	441a      	add	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8007420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	4413      	add	r3, r2
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8007428:	6a3a      	ldr	r2, [r7, #32]
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af56 	bne.w	80072e4 <lfs_file_flushedread+0x40>
    }

    return size;
 8007438:	683b      	ldr	r3, [r7, #0]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3728      	adds	r7, #40	; 0x28
 800743e:	46bd      	mov	sp, r7
 8007440:	bdb0      	pop	{r4, r5, r7, pc}
 8007442:	bf00      	nop
 8007444:	fff7fc00 	.word	0xfff7fc00

08007448 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <lfs_file_rawread+0x28>
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <lfs_file_rawread+0x60>)
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <lfs_file_rawread+0x64>)
 8007466:	f640 41ea 	movw	r1, #3306	; 0xcea
 800746a:	4811      	ldr	r0, [pc, #68]	; (80074b0 <lfs_file_rawread+0x68>)
 800746c:	f001 fce2 	bl	8008e34 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff fdb0 	bl	8006fe4 <lfs_file_flush>
 8007484:	6178      	str	r0, [r7, #20]
        if (err) {
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <lfs_file_rawread+0x48>
            return err;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	e006      	b.n	800749e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff ff04 	bl	80072a4 <lfs_file_flushedread>
 800749c:	4603      	mov	r3, r0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0800a2c4 	.word	0x0800a2c4
 80074ac:	0800a968 	.word	0x0800a968
 80074b0:	08009fa8 	.word	0x08009fa8

080074b4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80074b4:	b5b0      	push	{r4, r5, r7, lr}
 80074b6:	b090      	sub	sp, #64	; 0x40
 80074b8:	af04      	add	r7, sp, #16
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 810c 	beq.w	80076f0 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	441a      	add	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fb f920 	bl	800272c <lfs_max>
 80074ec:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80074f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	e003      	b.n	8007510 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800750e:	08db      	lsrs	r3, r3, #3
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f7fb f91a 	bl	800274c <lfs_min>
 8007518:	4603      	mov	r3, r0
 800751a:	4619      	mov	r1, r3
 800751c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007520:	f7fb f914 	bl	800274c <lfs_min>
 8007524:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8007526:	429c      	cmp	r4, r3
 8007528:	f240 80e2 	bls.w	80076f0 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff fd36 	bl	8006fa0 <lfs_file_outline>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80d9 	beq.w	80076f0 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	e0d5      	b.n	80076fa <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d006      	beq.n	8007568 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007562:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d16b      	bne.n	8007640 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d157      	bne.n	8007624 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d12d      	bne.n	80075dc <lfs_file_flushedwrite+0x128>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d029      	beq.n	80075dc <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800759a:	3a01      	subs	r2, #1
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	3138      	adds	r1, #56	; 0x38
 80075a0:	68b8      	ldr	r0, [r7, #8]
 80075a2:	303c      	adds	r0, #60	; 0x3c
 80075a4:	9003      	str	r0, [sp, #12]
 80075a6:	9102      	str	r1, [sp, #8]
 80075a8:	9201      	str	r2, [sp, #4]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	462b      	mov	r3, r5
 80075ae:	4622      	mov	r2, r4
 80075b0:	2100      	movs	r1, #0
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff f825 	bl	8006602 <lfs_ctz_find>
 80075b8:	6238      	str	r0, [r7, #32]
                    if (err) {
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	e094      	b.n	80076fa <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3340      	adds	r3, #64	; 0x40
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7fb f97d 	bl	80028d6 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7fb fffb 	bl	80035d8 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80075e8:	68fc      	ldr	r4, [r7, #12]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	3238      	adds	r2, #56	; 0x38
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	313c      	adds	r1, #60	; 0x3c
 80075fa:	9102      	str	r1, [sp, #8]
 80075fc:	9201      	str	r2, [sp, #4]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	462b      	mov	r3, r5
 8007602:	4622      	mov	r2, r4
 8007604:	4601      	mov	r1, r0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7ff f866 	bl	80066d8 <lfs_ctz_extend>
 800760c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00f      	beq.n	8007634 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	e06a      	b.n	80076fa <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f06f 0201 	mvn.w	r2, #1
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007650:	f7fb f87c 	bl	800274c <lfs_min>
 8007654:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800765c:	68fc      	ldr	r4, [r7, #12]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	9103      	str	r1, [sp, #12]
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	9102      	str	r1, [sp, #8]
 800766e:	9201      	str	r2, [sp, #4]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2301      	movs	r3, #1
 8007674:	4622      	mov	r2, r4
 8007676:	4601      	mov	r1, r0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7fb fb89 	bl	8002d90 <lfs_bd_prog>
 800767e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01c      	beq.n	80076c0 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800768c:	d007      	beq.n	800769e <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	e02d      	b.n	80076fa <lfs_file_flushedwrite+0x246>
                    goto relocate;
 800769e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fba2 	bl	8006dec <lfs_file_relocate>
 80076a8:	6178      	str	r0, [r7, #20]
            if (err) {
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0d2      	beq.n	8007656 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	e01c      	b.n	80076fa <lfs_file_flushedwrite+0x246>
            break;
 80076c0:	bf00      	nop
            }
        }

        file->pos += diff;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	441a      	add	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	441a      	add	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80076da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80076e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7fb ff74 	bl	80035d8 <lfs_alloc_ack>
    while (nsize > 0) {
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f47f af2b 	bne.w	800754e <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80076f8:	683b      	ldr	r3, [r7, #0]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3730      	adds	r7, #48	; 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007704 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <lfs_file_rawwrite+0x28>
 800771e:	4b38      	ldr	r3, [pc, #224]	; (8007800 <lfs_file_rawwrite+0xfc>)
 8007720:	4a38      	ldr	r2, [pc, #224]	; (8007804 <lfs_file_rawwrite+0x100>)
 8007722:	f640 5155 	movw	r1, #3413	; 0xd55
 8007726:	4838      	ldr	r0, [pc, #224]	; (8007808 <lfs_file_rawwrite+0x104>)
 8007728:	f001 fb84 	bl	8008e34 <__assert_func>

    if (file->flags & LFS_F_READING) {
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fc52 	bl	8006fe4 <lfs_file_flush>
 8007740:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <lfs_file_rawwrite+0x48>
            return err;
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	e055      	b.n	80077f8 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <lfs_file_rawwrite+0x68>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d203      	bcs.n	800776c <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	441a      	add	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	429a      	cmp	r2, r3
 800777a:	d902      	bls.n	8007782 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800777c:	f06f 031a 	mvn.w	r3, #26
 8007780:	e03a      	b.n	80077f8 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d121      	bne.n	80077d2 <lfs_file_rawwrite+0xce>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d91b      	bls.n	80077d2 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80077a8:	e00e      	b.n	80077c8 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
 80077ae:	f107 0217 	add.w	r2, r7, #23
 80077b2:	2301      	movs	r3, #1
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fe7c 	bl	80074b4 <lfs_file_flushedwrite>
 80077bc:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da01      	bge.n	80077c8 <lfs_file_rawwrite+0xc4>
                return res;
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	e017      	b.n	80077f8 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	6a3a      	ldr	r2, [r7, #32]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d8eb      	bhi.n	80077aa <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fe6b 	bl	80074b4 <lfs_file_flushedwrite>
 80077de:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da01      	bge.n	80077ea <lfs_file_rawwrite+0xe6>
        return nsize;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	e006      	b.n	80077f8 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80077f6:	69bb      	ldr	r3, [r7, #24]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3728      	adds	r7, #40	; 0x28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	0800a2f4 	.word	0x0800a2f4
 8007804:	0800a97c 	.word	0x0800a97c
 8007808:	08009fa8 	.word	0x08009fa8

0800780c <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <lfs_file_rawseek+0x20>
        npos = off;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782a:	e025      	b.n	8007878 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10f      	bne.n	8007852 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	2b00      	cmp	r3, #0
 800783e:	da02      	bge.n	8007846 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8007840:	f06f 0315 	mvn.w	r3, #21
 8007844:	e067      	b.n	8007916 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007850:	e012      	b.n	8007878 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d10f      	bne.n	8007878 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f875 	bl	800794a <lfs_file_rawsize>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	da02      	bge.n	8007874 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 800786e:	f06f 0315 	mvn.w	r3, #21
 8007872:	e050      	b.n	8007916 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787e:	429a      	cmp	r2, r3
 8007880:	d902      	bls.n	8007888 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8007882:	f06f 0315 	mvn.w	r3, #21
 8007886:	e046      	b.n	8007916 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	429a      	cmp	r2, r3
 8007890:	d101      	bne.n	8007896 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	e03f      	b.n	8007916 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d12b      	bne.n	80078fa <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	f107 0318 	add.w	r3, r7, #24
 80078ac:	4619      	mov	r1, r3
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7fe fe6f 	bl	8006592 <lfs_ctz_index>
 80078b4:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80078ba:	f107 0314 	add.w	r3, r7, #20
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7fe fe66 	bl	8006592 <lfs_ctz_index>
 80078c6:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80078c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d114      	bne.n	80078fa <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d80f      	bhi.n	80078fa <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e2:	441a      	add	r2, r3
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d907      	bls.n	80078fa <lfs_file_rawseek+0xee>
            file->pos = npos;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	e00d      	b.n	8007916 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fb71 	bl	8006fe4 <lfs_file_flush>
 8007902:	61f8      	str	r0, [r7, #28]
    if (err) {
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <lfs_file_rawseek+0x102>
        return err;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	e003      	b.n	8007916 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007912:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007916:	4618      	mov	r0, r3
 8007918:	3730      	adds	r7, #48	; 0x30
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8007928:	2300      	movs	r3, #0
 800792a:	2200      	movs	r2, #0
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff6c 	bl	800780c <lfs_file_rawseek>
 8007934:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	da01      	bge.n	8007940 <lfs_file_rawrewind+0x22>
        return (int)res;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	e000      	b.n	8007942 <lfs_file_rawrewind+0x24>
    }

    return 0;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fa fede 	bl	800272c <lfs_max>
 8007970:	4603      	mov	r3, r0
 8007972:	e001      	b.n	8007978 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	; 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <lfs_init+0x2c>
 800799e:	4b92      	ldr	r3, [pc, #584]	; (8007be8 <lfs_init+0x268>)
 80079a0:	4a92      	ldr	r2, [pc, #584]	; (8007bec <lfs_init+0x26c>)
 80079a2:	f640 7146 	movw	r1, #3910	; 0xf46
 80079a6:	4892      	ldr	r0, [pc, #584]	; (8007bf0 <lfs_init+0x270>)
 80079a8:	f001 fa44 	bl	8008e34 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <lfs_init+0x44>
 80079b6:	4b8f      	ldr	r3, [pc, #572]	; (8007bf4 <lfs_init+0x274>)
 80079b8:	4a8c      	ldr	r2, [pc, #560]	; (8007bec <lfs_init+0x26c>)
 80079ba:	f640 7147 	movw	r1, #3911	; 0xf47
 80079be:	488c      	ldr	r0, [pc, #560]	; (8007bf0 <lfs_init+0x270>)
 80079c0:	f001 fa38 	bl	8008e34 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <lfs_init+0x5c>
 80079ce:	4b8a      	ldr	r3, [pc, #552]	; (8007bf8 <lfs_init+0x278>)
 80079d0:	4a86      	ldr	r2, [pc, #536]	; (8007bec <lfs_init+0x26c>)
 80079d2:	f640 7148 	movw	r1, #3912	; 0xf48
 80079d6:	4886      	ldr	r0, [pc, #536]	; (8007bf0 <lfs_init+0x270>)
 80079d8:	f001 fa2c 	bl	8008e34 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079e6:	6952      	ldr	r2, [r2, #20]
 80079e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ec:	fb01 f202 	mul.w	r2, r1, r2
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d006      	beq.n	8007a04 <lfs_init+0x84>
 80079f6:	4b81      	ldr	r3, [pc, #516]	; (8007bfc <lfs_init+0x27c>)
 80079f8:	4a7c      	ldr	r2, [pc, #496]	; (8007bec <lfs_init+0x26c>)
 80079fa:	f640 714c 	movw	r1, #3916	; 0xf4c
 80079fe:	487c      	ldr	r0, [pc, #496]	; (8007bf0 <lfs_init+0x270>)
 8007a00:	f001 fa18 	bl	8008e34 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a0e:	6992      	ldr	r2, [r2, #24]
 8007a10:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a14:	fb01 f202 	mul.w	r2, r1, r2
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <lfs_init+0xac>
 8007a1e:	4b78      	ldr	r3, [pc, #480]	; (8007c00 <lfs_init+0x280>)
 8007a20:	4a72      	ldr	r2, [pc, #456]	; (8007bec <lfs_init+0x26c>)
 8007a22:	f640 714d 	movw	r1, #3917	; 0xf4d
 8007a26:	4872      	ldr	r0, [pc, #456]	; (8007bf0 <lfs_init+0x270>)
 8007a28:	f001 fa04 	bl	8008e34 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a36:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a3c:	fb01 f202 	mul.w	r2, r1, r2
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <lfs_init+0xd4>
 8007a46:	4b6f      	ldr	r3, [pc, #444]	; (8007c04 <lfs_init+0x284>)
 8007a48:	4a68      	ldr	r2, [pc, #416]	; (8007bec <lfs_init+0x26c>)
 8007a4a:	f640 714e 	movw	r1, #3918	; 0xf4e
 8007a4e:	4868      	ldr	r0, [pc, #416]	; (8007bf0 <lfs_init+0x270>)
 8007a50:	f001 f9f0 	bl	8008e34 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	3b08      	subs	r3, #8
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fa fea8 	bl	80027ba <lfs_npw2>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	009a      	lsls	r2, r3, #2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d906      	bls.n	8007a86 <lfs_init+0x106>
 8007a78:	4b63      	ldr	r3, [pc, #396]	; (8007c08 <lfs_init+0x288>)
 8007a7a:	4a5c      	ldr	r2, [pc, #368]	; (8007bec <lfs_init+0x26c>)
 8007a7c:	f640 7151 	movw	r1, #3921	; 0xf51
 8007a80:	485b      	ldr	r0, [pc, #364]	; (8007bf0 <lfs_init+0x270>)
 8007a82:	f001 f9d7 	bl	8008e34 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d106      	bne.n	8007a9e <lfs_init+0x11e>
 8007a90:	4b5e      	ldr	r3, [pc, #376]	; (8007c0c <lfs_init+0x28c>)
 8007a92:	4a56      	ldr	r2, [pc, #344]	; (8007bec <lfs_init+0x26c>)
 8007a94:	f640 715a 	movw	r1, #3930	; 0xf5a
 8007a98:	4855      	ldr	r0, [pc, #340]	; (8007bf0 <lfs_init+0x270>)
 8007a9a:	f001 f9cb 	bl	8008e34 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	e010      	b.n	8007ad6 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fa fee5 	bl	800288a <lfs_malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d103      	bne.n	8007ad6 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8007ace:	f06f 030b 	mvn.w	r3, #11
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007ad4:	e0fd      	b.n	8007cd2 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	61da      	str	r2, [r3, #28]
 8007aea:	e010      	b.n	8007b0e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fa fec9 	bl	800288a <lfs_malloc>
 8007af8:	4602      	mov	r2, r0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8007b06:	f06f 030b 	mvn.w	r3, #11
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007b0c:	e0e1      	b.n	8007cd2 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fedf 	bl	80028d6 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa fed9 	bl	80028d6 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <lfs_init+0x1bc>
 8007b2e:	4b38      	ldr	r3, [pc, #224]	; (8007c10 <lfs_init+0x290>)
 8007b30:	4a2e      	ldr	r2, [pc, #184]	; (8007bec <lfs_init+0x26c>)
 8007b32:	f640 7178 	movw	r1, #3960	; 0xf78
 8007b36:	482e      	ldr	r0, [pc, #184]	; (8007bf0 <lfs_init+0x270>)
 8007b38:	f001 f97c 	bl	8008e34 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <lfs_init+0x1d8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <lfs_init+0x1e6>
 8007b58:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <lfs_init+0x294>)
 8007b5a:	4a24      	ldr	r2, [pc, #144]	; (8007bec <lfs_init+0x26c>)
 8007b5c:	f640 7179 	movw	r1, #3961	; 0xf79
 8007b60:	4823      	ldr	r0, [pc, #140]	; (8007bf0 <lfs_init+0x270>)
 8007b62:	f001 f967 	bl	8008e34 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	665a      	str	r2, [r3, #100]	; 0x64
 8007b7a:	e010      	b.n	8007b9e <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fa fe81 	bl	800288a <lfs_malloc>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8007b96:	f06f 030b 	mvn.w	r3, #11
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007b9c:	e099      	b.n	8007cd2 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	2bff      	cmp	r3, #255	; 0xff
 8007ba6:	d906      	bls.n	8007bb6 <lfs_init+0x236>
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <lfs_init+0x298>)
 8007baa:	4a10      	ldr	r2, [pc, #64]	; (8007bec <lfs_init+0x26c>)
 8007bac:	f640 7186 	movw	r1, #3974	; 0xf86
 8007bb0:	480f      	ldr	r0, [pc, #60]	; (8007bf0 <lfs_init+0x270>)
 8007bb2:	f001 f93f 	bl	8008e34 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	22ff      	movs	r2, #255	; 0xff
 8007bcc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da23      	bge.n	8007c20 <lfs_init+0x2a0>
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <lfs_init+0x29c>)
 8007bda:	4a04      	ldr	r2, [pc, #16]	; (8007bec <lfs_init+0x26c>)
 8007bdc:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007be0:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <lfs_init+0x270>)
 8007be2:	f001 f927 	bl	8008e34 <__assert_func>
 8007be6:	bf00      	nop
 8007be8:	0800a324 	.word	0x0800a324
 8007bec:	0800a990 	.word	0x0800a990
 8007bf0:	08009fa8 	.word	0x08009fa8
 8007bf4:	0800a340 	.word	0x0800a340
 8007bf8:	0800a35c 	.word	0x0800a35c
 8007bfc:	0800a378 	.word	0x0800a378
 8007c00:	0800a3a8 	.word	0x0800a3a8
 8007c04:	0800a3d8 	.word	0x0800a3d8
 8007c08:	0800a40c 	.word	0x0800a40c
 8007c0c:	0800a458 	.word	0x0800a458
 8007c10:	0800a474 	.word	0x0800a474
 8007c14:	0800a494 	.word	0x0800a494
 8007c18:	0800a4e8 	.word	0x0800a4e8
 8007c1c:	0800a504 	.word	0x0800a504
    lfs->file_max = lfs->cfg->file_max;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007c38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c40:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d906      	bls.n	8007c56 <lfs_init+0x2d6>
 8007c48:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <lfs_init+0x364>)
 8007c4a:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <lfs_init+0x368>)
 8007c4c:	f640 7192 	movw	r1, #3986	; 0xf92
 8007c50:	4826      	ldr	r0, [pc, #152]	; (8007cec <lfs_init+0x36c>)
 8007c52:	f001 f8ef 	bl	8008e34 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007c6e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d906      	bls.n	8007c8e <lfs_init+0x30e>
 8007c80:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <lfs_init+0x370>)
 8007c82:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <lfs_init+0x368>)
 8007c84:	f640 7198 	movw	r1, #3992	; 0xf98
 8007c88:	4818      	ldr	r0, [pc, #96]	; (8007cec <lfs_init+0x36c>)
 8007c8a:	f001 f8d3 	bl	8008e34 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c94:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	333c      	adds	r3, #60	; 0x3c
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
 8007cb4:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3330      	adds	r3, #48	; 0x30
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3348      	adds	r3, #72	; 0x48
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e003      	b.n	8007cda <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f80e 	bl	8007cf4 <lfs_deinit>
    return err;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3730      	adds	r7, #48	; 0x30
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	0800a528 	.word	0x0800a528
 8007ce8:	0800a990 	.word	0x0800a990
 8007cec:	08009fa8 	.word	0x08009fa8
 8007cf0:	0800a544 	.word	0x0800a544

08007cf4 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d104      	bne.n	8007d10 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fa fdc9 	bl	80028a2 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fdbf 	bl	80028a2 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d104      	bne.n	8007d38 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fa fdb5 	bl	80028a2 <lfs_free>
    }

    return 0;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b0a0      	sub	sp, #128	; 0x80
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fe13 	bl	8007980 <lfs_init>
 8007d5a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <lfs_rawformat+0x22>
            return err;
 8007d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d64:	e082      	b.n	8007e6c <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	461a      	mov	r2, r3
 8007d72:	2100      	movs	r1, #0
 8007d74:	f001 f8e6 	bl	8008f44 <memset>
        lfs->free.off = 0;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fa fcdc 	bl	800274c <lfs_min>
 8007d94:	4602      	mov	r2, r0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fb fc19 	bl	80035d8 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fd f9f1 	bl	8005194 <lfs_dir_alloc>
 8007db2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d14f      	bne.n	8007e5a <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dbe:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007dc6:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007dce:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007dd4:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007dda:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007de0:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007de2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fb fb36 	bl	8003458 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007dec:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <lfs_rawformat+0x130>)
 8007dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df0:	2300      	movs	r3, #0
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
 8007df4:	4b20      	ldr	r3, [pc, #128]	; (8007e78 <lfs_rawformat+0x134>)
 8007df6:	657b      	str	r3, [r7, #84]	; 0x54
 8007df8:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <lfs_rawformat+0x138>)
 8007dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <lfs_rawformat+0x13c>)
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e04:	663b      	str	r3, [r7, #96]	; 0x60
 8007e06:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007e0a:	f107 010c 	add.w	r1, r7, #12
 8007e0e:	2303      	movs	r3, #3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe fb99 	bl	8006548 <lfs_dir_commit>
 8007e16:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d11f      	bne.n	8007e5e <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007e24:	f107 010c 	add.w	r1, r7, #12
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fe fb8b 	bl	8006548 <lfs_dir_commit>
 8007e32:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d113      	bne.n	8007e62 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3e:	2301      	movs	r3, #1
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
 8007e42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fc fe1d 	bl	8004a8c <lfs_dir_fetch>
 8007e52:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	e004      	b.n	8007e64 <lfs_rawformat+0x120>
            goto cleanup;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <lfs_rawformat+0x120>
            goto cleanup;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <lfs_rawformat+0x120>
            goto cleanup;
 8007e62:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff ff45 	bl	8007cf4 <lfs_deinit>
    return err;
 8007e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3780      	adds	r7, #128	; 0x80
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40100000 	.word	0x40100000
 8007e78:	0ff00008 	.word	0x0ff00008
 8007e7c:	0800a574 	.word	0x0800a574
 8007e80:	20100018 	.word	0x20100018

08007e84 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b09c      	sub	sp, #112	; 0x70
 8007e88:	af04      	add	r7, sp, #16
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fd75 	bl	8007980 <lfs_init>
 8007e96:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <lfs_rawmount+0x1e>
        return err;
 8007e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ea0:	e192      	b.n	80081c8 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 f84a 	bl	8008f44 <memset>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007eb8:	e10b      	b.n	80080d2 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d303      	bcc.n	8007ed0 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007ec8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007ece:	e177      	b.n	80081c0 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eda:	4b8a      	ldr	r3, [pc, #552]	; (8008104 <lfs_rawmount+0x280>)
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ede:	2308      	movs	r3, #8
 8007ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ee6:	f103 0218 	add.w	r2, r3, #24
 8007eea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	4b84      	ldr	r3, [pc, #528]	; (8008108 <lfs_rawmount+0x284>)
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	4b83      	ldr	r3, [pc, #524]	; (800810c <lfs_rawmount+0x288>)
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4b83      	ldr	r3, [pc, #524]	; (8008110 <lfs_rawmount+0x28c>)
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fc fa54 	bl	80043b0 <lfs_dir_fetchmatch>
 8007f08:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da02      	bge.n	8007f16 <lfs_rawmount+0x92>
            err = tag;
 8007f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f12:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f14:	e154      	b.n	80081c0 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80cd 	beq.w	80080b8 <lfs_rawmount+0x234>
 8007f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fb f8dc 	bl	80030de <lfs_tag_isdelete>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f083 0301 	eor.w	r3, r3, #1
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 80c2 	beq.w	80080b8 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007f40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4b72      	ldr	r3, [pc, #456]	; (8008114 <lfs_rawmount+0x290>)
 8007f4c:	4a70      	ldr	r2, [pc, #448]	; (8008110 <lfs_rawmount+0x28c>)
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fb fcfc 	bl	800394c <lfs_dir_get>
 8007f54:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da02      	bge.n	8007f62 <lfs_rawmount+0xde>
                err = tag;
 8007f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007f60:	e12e      	b.n	80081c0 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fb fa3e 	bl	80033e8 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8007f7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d103      	bne.n	8007f8a <lfs_rawmount+0x106>
 8007f82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d011      	beq.n	8007fae <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8007f8a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8007f8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f92:	4961      	ldr	r1, [pc, #388]	; (8008118 <lfs_rawmount+0x294>)
 8007f94:	9101      	str	r1, [sp, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	f241 0233 	movw	r2, #4147	; 0x1033
 8007f9e:	495f      	ldr	r1, [pc, #380]	; (800811c <lfs_rawmount+0x298>)
 8007fa0:	485f      	ldr	r0, [pc, #380]	; (8008120 <lfs_rawmount+0x29c>)
 8007fa2:	f001 fba5 	bl	80096f0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8007fa6:	f06f 0315 	mvn.w	r3, #21
 8007faa:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007fac:	e083      	b.n	80080b6 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d018      	beq.n	8007fe6 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d910      	bls.n	8007fe0 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc4:	4954      	ldr	r1, [pc, #336]	; (8008118 <lfs_rawmount+0x294>)
 8007fc6:	9101      	str	r1, [sp, #4]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	f241 023c 	movw	r2, #4156	; 0x103c
 8007fd0:	4952      	ldr	r1, [pc, #328]	; (800811c <lfs_rawmount+0x298>)
 8007fd2:	4854      	ldr	r0, [pc, #336]	; (8008124 <lfs_rawmount+0x2a0>)
 8007fd4:	f001 fb8c 	bl	80096f0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8007fd8:	f06f 0315 	mvn.w	r3, #21
 8007fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007fde:	e06a      	b.n	80080b6 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d018      	beq.n	800801e <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d910      	bls.n	8008018 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	4946      	ldr	r1, [pc, #280]	; (8008118 <lfs_rawmount+0x294>)
 8007ffe:	9101      	str	r1, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	f241 0247 	movw	r2, #4167	; 0x1047
 8008008:	4944      	ldr	r1, [pc, #272]	; (800811c <lfs_rawmount+0x298>)
 800800a:	4847      	ldr	r0, [pc, #284]	; (8008128 <lfs_rawmount+0x2a4>)
 800800c:	f001 fb70 	bl	80096f0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8008010:	f06f 0315 	mvn.w	r3, #21
 8008014:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8008016:	e04e      	b.n	80080b6 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d018      	beq.n	8008056 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8008024:	6a3a      	ldr	r2, [r7, #32]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802a:	429a      	cmp	r2, r3
 800802c:	d910      	bls.n	8008050 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800802e:	6a3a      	ldr	r2, [r7, #32]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008034:	4938      	ldr	r1, [pc, #224]	; (8008118 <lfs_rawmount+0x294>)
 8008036:	9101      	str	r1, [sp, #4]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4613      	mov	r3, r2
 800803c:	f241 0252 	movw	r2, #4178	; 0x1052
 8008040:	4936      	ldr	r1, [pc, #216]	; (800811c <lfs_rawmount+0x298>)
 8008042:	483a      	ldr	r0, [pc, #232]	; (800812c <lfs_rawmount+0x2a8>)
 8008044:	f001 fb54 	bl	80096f0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8008048:	f06f 0315 	mvn.w	r3, #21
 800804c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800804e:	e032      	b.n	80080b6 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8008050:	6a3a      	ldr	r2, [r7, #32]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	429a      	cmp	r2, r3
 8008060:	d011      	beq.n	8008086 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	492b      	ldr	r1, [pc, #172]	; (8008118 <lfs_rawmount+0x294>)
 800806c:	9101      	str	r1, [sp, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4613      	mov	r3, r2
 8008072:	f241 025c 	movw	r2, #4188	; 0x105c
 8008076:	4929      	ldr	r1, [pc, #164]	; (800811c <lfs_rawmount+0x298>)
 8008078:	482d      	ldr	r0, [pc, #180]	; (8008130 <lfs_rawmount+0x2ac>)
 800807a:	f001 fb39 	bl	80096f0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800807e:	f06f 0315 	mvn.w	r3, #21
 8008082:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008084:	e017      	b.n	80080b6 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	429a      	cmp	r2, r3
 8008090:	d012      	beq.n	80080b8 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	491f      	ldr	r1, [pc, #124]	; (8008118 <lfs_rawmount+0x294>)
 800809c:	9101      	str	r1, [sp, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	f241 0263 	movw	r2, #4195	; 0x1063
 80080a6:	491d      	ldr	r1, [pc, #116]	; (800811c <lfs_rawmount+0x298>)
 80080a8:	4822      	ldr	r0, [pc, #136]	; (8008134 <lfs_rawmount+0x2b0>)
 80080aa:	f001 fb21 	bl	80096f0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80080ae:	f06f 0315 	mvn.w	r3, #21
 80080b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80080b4:	bf00      	nop
            goto cleanup;
 80080b6:	e083      	b.n	80081c0 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fc fcfd 	bl	8004ac4 <lfs_dir_getgstate>
 80080ca:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80080cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d175      	bne.n	80081be <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 80080d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080d6:	3318      	adds	r3, #24
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fa ff4c 	bl	8002f76 <lfs_pair_isnull>
 80080de:	4603      	mov	r3, r0
 80080e0:	f083 0301 	eor.w	r3, r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f47f aee7 	bne.w	8007eba <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3320      	adds	r3, #32
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fa ff40 	bl	8002f76 <lfs_pair_isnull>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01d      	beq.n	8008138 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 80080fc:	f06f 0315 	mvn.w	r3, #21
 8008100:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008102:	e05d      	b.n	80081c0 <lfs_rawmount+0x33c>
 8008104:	0800a574 	.word	0x0800a574
 8008108:	08004b29 	.word	0x08004b29
 800810c:	0ff00008 	.word	0x0ff00008
 8008110:	7ffffc00 	.word	0x7ffffc00
 8008114:	20100018 	.word	0x20100018
 8008118:	0800a09c 	.word	0x0800a09c
 800811c:	08009fa8 	.word	0x08009fa8
 8008120:	0800a580 	.word	0x0800a580
 8008124:	0800a5ac 	.word	0x0800a5ac
 8008128:	0800a5e0 	.word	0x0800a5e0
 800812c:	0800a614 	.word	0x0800a614
 8008130:	0800a648 	.word	0x0800a648
 8008134:	0800a67c 	.word	0x0800a67c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3330      	adds	r3, #48	; 0x30
 800813c:	4618      	mov	r0, r3
 800813e:	f7fb f871 	bl	8003224 <lfs_gstate_iszero>
 8008142:	4603      	mov	r3, r0
 8008144:	f083 0301 	eor.w	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d010      	beq.n	8008170 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800815a:	481d      	ldr	r0, [pc, #116]	; (80081d0 <lfs_rawmount+0x34c>)
 800815c:	9002      	str	r0, [sp, #8]
 800815e:	9201      	str	r2, [sp, #4]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	460b      	mov	r3, r1
 8008164:	f241 0279 	movw	r2, #4217	; 0x1079
 8008168:	491a      	ldr	r1, [pc, #104]	; (80081d4 <lfs_rawmount+0x350>)
 800816a:	481b      	ldr	r0, [pc, #108]	; (80081d8 <lfs_rawmount+0x354>)
 800816c:	f001 fac0 	bl	80096f0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	4618      	mov	r0, r3
 8008176:	f7fa ffa4 	bl	80030c2 <lfs_tag_isvalid>
 800817a:	4603      	mov	r3, r0
 800817c:	f083 0301 	eor.w	r3, r3, #1
 8008180:	b2db      	uxtb	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	441a      	add	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	333c      	adds	r3, #60	; 0x3c
 8008194:	3230      	adds	r2, #48	; 0x30
 8008196:	ca07      	ldmia	r2, {r0, r1, r2}
 8008198:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081a4:	6a12      	ldr	r2, [r2, #32]
 80081a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081aa:	fb01 f202 	mul.w	r2, r1, r2
 80081ae:	1a9a      	subs	r2, r3, r2
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fb fa1e 	bl	80035f6 <lfs_alloc_drop>

    return 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e004      	b.n	80081c8 <lfs_rawmount+0x344>
            goto cleanup;
 80081be:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f80b 	bl	80081dc <lfs_rawunmount>
    return err;
 80081c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3760      	adds	r7, #96	; 0x60
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	0800a09c 	.word	0x0800a09c
 80081d4:	08009fa8 	.word	0x08009fa8
 80081d8:	0800a6ac 	.word	0x0800a6ac

080081dc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fd85 	bl	8007cf4 <lfs_deinit>
 80081ea:	4603      	mov	r3, r0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b09d      	sub	sp, #116	; 0x74
 80081f8:	af04      	add	r7, sp, #16
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8008202:	f107 0318 	add.w	r3, r7, #24
 8008206:	2220      	movs	r2, #32
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fe9a 	bl	8008f44 <memset>
 8008210:	2301      	movs	r3, #1
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8008218:	e0a7      	b.n	800836a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008224:	429a      	cmp	r2, r3
 8008226:	d302      	bcc.n	800822e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8008228:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800822c:	e102      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800822e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008230:	3301      	adds	r3, #1
 8008232:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8008234:	2300      	movs	r3, #0
 8008236:	65bb      	str	r3, [r7, #88]	; 0x58
 8008238:	e013      	b.n	8008262 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800823a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823c:	3306      	adds	r3, #6
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	3360      	adds	r3, #96	; 0x60
 8008242:	443b      	add	r3, r7
 8008244:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4611      	mov	r1, r2
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
 8008250:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <lfs_fs_rawtraverse+0x68>
                return err;
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e0eb      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800825c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800825e:	3301      	adds	r3, #1
 8008260:	65bb      	str	r3, [r7, #88]	; 0x58
 8008262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008264:	2b01      	cmp	r3, #1
 8008266:	dde8      	ble.n	800823a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8008268:	f107 0318 	add.w	r3, r7, #24
 800826c:	f103 0218 	add.w	r2, r3, #24
 8008270:	f107 0318 	add.w	r3, r7, #24
 8008274:	4619      	mov	r1, r3
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7fc fc08 	bl	8004a8c <lfs_dir_fetch>
 800827c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800827e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <lfs_fs_rawtraverse+0x94>
            return err;
 8008284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008286:	e0d5      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8008288:	2300      	movs	r3, #0
 800828a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800828e:	e067      	b.n	8008360 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8008290:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008294:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8008296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800829a:	f043 0308 	orr.w	r3, r3, #8
 800829e:	f107 0118 	add.w	r1, r7, #24
 80082a2:	f107 0210 	add.w	r2, r7, #16
 80082a6:	9200      	str	r2, [sp, #0]
 80082a8:	4a64      	ldr	r2, [pc, #400]	; (800843c <lfs_fs_rawtraverse+0x248>)
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7fb fb4e 	bl	800394c <lfs_dir_get>
 80082b0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	da05      	bge.n	80082c4 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	f113 0f02 	cmn.w	r3, #2
 80082be:	d049      	beq.n	8008354 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	e0b7      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80082c4:	f107 0310 	add.w	r3, r7, #16
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fb f85d 	bl	8003388 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fa ff27 	bl	8003124 <lfs_tag_type3>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	f240 2302 	movw	r3, #514	; 0x202
 80082de:	429a      	cmp	r2, r3
 80082e0:	d113      	bne.n	800830a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80082e2:	68f9      	ldr	r1, [r7, #12]
 80082e4:	6938      	ldr	r0, [r7, #16]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	9202      	str	r2, [sp, #8]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	9201      	str	r2, [sp, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4603      	mov	r3, r0
 80082f4:	460a      	mov	r2, r1
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7fe faf5 	bl	80068e8 <lfs_ctz_traverse>
 80082fe:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	d027      	beq.n	8008356 <lfs_fs_rawtraverse+0x162>
                    return err;
 8008306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008308:	e094      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d022      	beq.n	8008356 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	4618      	mov	r0, r3
 8008314:	f7fa ff06 	bl	8003124 <lfs_tag_type3>
 8008318:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800831a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831e:	d11a      	bne.n	8008356 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8008320:	2300      	movs	r3, #0
 8008322:	653b      	str	r3, [r7, #80]	; 0x50
 8008324:	e012      	b.n	800834c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8008326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	f107 0210 	add.w	r2, r7, #16
 800832e:	4413      	add	r3, r2
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4611      	mov	r1, r2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
 800833a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <lfs_fs_rawtraverse+0x152>
                        return err;
 8008342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008344:	e076      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8008346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008348:	3301      	adds	r3, #1
 800834a:	653b      	str	r3, [r7, #80]	; 0x50
 800834c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834e:	2b01      	cmp	r3, #1
 8008350:	dde9      	ble.n	8008326 <lfs_fs_rawtraverse+0x132>
 8008352:	e000      	b.n	8008356 <lfs_fs_rawtraverse+0x162>
                    continue;
 8008354:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8008356:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800835a:	3301      	adds	r3, #1
 800835c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008360:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008362:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8008366:	429a      	cmp	r2, r3
 8008368:	d392      	bcc.n	8008290 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800836a:	f107 0318 	add.w	r3, r7, #24
 800836e:	3318      	adds	r3, #24
 8008370:	4618      	mov	r0, r3
 8008372:	f7fa fe00 	bl	8002f76 <lfs_pair_isnull>
 8008376:	4603      	mov	r3, r0
 8008378:	f083 0301 	eor.w	r3, r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	f47f af4b 	bne.w	800821a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838a:	e04f      	b.n	800842c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800838c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838e:	799b      	ldrb	r3, [r3, #6]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d147      	bne.n	8008424 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8008394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01d      	beq.n	80083dc <lfs_fs_rawtraverse+0x1e8>
 80083a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d117      	bne.n	80083dc <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80083ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80083b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	9202      	str	r2, [sp, #8]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	4623      	mov	r3, r4
 80083c8:	4602      	mov	r2, r0
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7fe fa8c 	bl	80068e8 <lfs_ctz_traverse>
 80083d0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80083d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <lfs_fs_rawtraverse+0x1e8>
                return err;
 80083d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083da:	e02b      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80083dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01e      	beq.n	8008426 <lfs_fs_rawtraverse+0x232>
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d118      	bne.n	8008426 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80083f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fe:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	9202      	str	r2, [sp, #8]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	4623      	mov	r3, r4
 8008410:	4602      	mov	r2, r0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7fe fa68 	bl	80068e8 <lfs_ctz_traverse>
 8008418:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800841a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <lfs_fs_rawtraverse+0x232>
                return err;
 8008420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008422:	e007      	b.n	8008434 <lfs_fs_rawtraverse+0x240>
            continue;
 8008424:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800842c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ac      	bne.n	800838c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3764      	adds	r7, #100	; 0x64
 8008438:	46bd      	mov	sp, r7
 800843a:	bd90      	pop	{r4, r7, pc}
 800843c:	700ffc00 	.word	0x700ffc00

08008440 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800845c:	e024      	b.n	80084a8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	085b      	lsrs	r3, r3, #1
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800846c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008470:	e027      	b.n	80084c2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	3301      	adds	r3, #1
 8008476:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3318      	adds	r3, #24
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fa fd94 	bl	8002fac <lfs_pair_cmp>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <lfs_fs_pred+0x4e>
            return 0;
 800848a:	2300      	movs	r3, #0
 800848c:	e019      	b.n	80084c2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3318      	adds	r3, #24
 8008492:	461a      	mov	r2, r3
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7fc faf8 	bl	8004a8c <lfs_dir_fetch>
 800849c:	6138      	str	r0, [r7, #16]
        if (err) {
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <lfs_fs_pred+0x68>
            return err;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	e00c      	b.n	80084c2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3318      	adds	r3, #24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fa fd62 	bl	8002f76 <lfs_pair_isnull>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f083 0301 	eor.w	r3, r3, #1
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1cf      	bne.n	800845e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80084be:	f06f 0301 	mvn.w	r3, #1
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80084ca:	b5b0      	push	{r4, r5, r7, lr}
 80084cc:	b08e      	sub	sp, #56	; 0x38
 80084ce:	af04      	add	r7, sp, #16
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80084ea:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80084f0:	69dd      	ldr	r5, [r3, #28]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	6852      	ldr	r2, [r2, #4]
 80084fa:	2108      	movs	r1, #8
 80084fc:	9103      	str	r1, [sp, #12]
 80084fe:	f107 0110 	add.w	r1, r7, #16
 8008502:	9102      	str	r1, [sp, #8]
 8008504:	9201      	str	r2, [sp, #4]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462b      	mov	r3, r5
 800850a:	4622      	mov	r2, r4
 800850c:	4601      	mov	r1, r0
 800850e:	6a38      	ldr	r0, [r7, #32]
 8008510:	f7fa f9f8 	bl	8002904 <lfs_bd_read>
 8008514:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <lfs_fs_parent_match+0x56>
        return err;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	e012      	b.n	8008546 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	4618      	mov	r0, r3
 8008526:	f7fa fd98 	bl	800305a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	f107 0310 	add.w	r3, r7, #16
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7fa fd39 	bl	8002fac <lfs_pair_cmp>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	bf14      	ite	ne
 8008540:	2301      	movne	r3, #1
 8008542:	2300      	moveq	r3, #0
 8008544:	b2db      	uxtb	r3, r3
}
 8008546:	4618      	mov	r0, r3
 8008548:	3728      	adds	r7, #40	; 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008550 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	; 0x38
 8008554:	af04      	add	r7, sp, #16
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800856c:	e02f      	b.n	80085ce <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	085b      	lsrs	r3, r3, #1
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	429a      	cmp	r2, r3
 800857a:	d302      	bcc.n	8008582 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800857c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008580:	e032      	b.n	80085e8 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	3301      	adds	r3, #1
 8008586:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <lfs_fs_parent+0xa0>)
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	2300      	movs	r3, #0
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <lfs_fs_parent+0xa4>)
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <lfs_fs_parent+0xa8>)
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7fb fefb 	bl	80043b0 <lfs_dir_fetchmatch>
 80085ba:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <lfs_fs_parent+0x7e>
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f113 0f02 	cmn.w	r3, #2
 80085c8:	d001      	beq.n	80085ce <lfs_fs_parent+0x7e>
            return tag;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	e00c      	b.n	80085e8 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3318      	adds	r3, #24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fa fccf 	bl	8002f76 <lfs_pair_isnull>
 80085d8:	4603      	mov	r3, r0
 80085da:	f083 0301 	eor.w	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1c4      	bne.n	800856e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80085e4:	f06f 0301 	mvn.w	r3, #1
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3728      	adds	r7, #40	; 0x28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	080084cb 	.word	0x080084cb
 80085f4:	20000008 	.word	0x20000008
 80085f8:	7ff003ff 	.word	0x7ff003ff

080085fc <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	4618      	mov	r0, r3
 800860e:	f7fa fdc3 	bl	8003198 <lfs_tag_size>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <lfs_fs_preporphans+0x32>
 8008618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800861c:	2b00      	cmp	r3, #0
 800861e:	da06      	bge.n	800862e <lfs_fs_preporphans+0x32>
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <lfs_fs_preporphans+0x68>)
 8008622:	4a11      	ldr	r2, [pc, #68]	; (8008668 <lfs_fs_preporphans+0x6c>)
 8008624:	f241 114c 	movw	r1, #4428	; 0x114c
 8008628:	4810      	ldr	r0, [pc, #64]	; (800866c <lfs_fs_preporphans+0x70>)
 800862a:	f000 fc03 	bl	8008e34 <__assert_func>
    lfs->gstate.tag += orphans;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008636:	441a      	add	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3330      	adds	r3, #48	; 0x30
 8008648:	4618      	mov	r0, r3
 800864a:	f7fa fe08 	bl	800325e <lfs_gstate_hasorphans>
 800864e:	4603      	mov	r3, r0
 8008650:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8008652:	ea44 0203 	orr.w	r2, r4, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bd90      	pop	{r4, r7, pc}
 8008664:	0800a6e4 	.word	0x0800a6e4
 8008668:	0800a99c 	.word	0x0800a99c
 800866c:	08009fa8 	.word	0x08009fa8

08008670 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	460b      	mov	r3, r1
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <lfs_fs_prepmove+0x70>)
 8008684:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8008686:	897b      	ldrh	r3, [r7, #10]
 8008688:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800868c:	428b      	cmp	r3, r1
 800868e:	d006      	beq.n	800869e <lfs_fs_prepmove+0x2e>
 8008690:	897b      	ldrh	r3, [r7, #10]
 8008692:	029b      	lsls	r3, r3, #10
 8008694:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008698:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800869c:	e000      	b.n	80086a0 <lfs_fs_prepmove+0x30>
 800869e:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80086a0:	431a      	orrs	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80086a6:	897b      	ldrh	r3, [r7, #10]
 80086a8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d002      	beq.n	80086b6 <lfs_fs_prepmove+0x46>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	e000      	b.n	80086b8 <lfs_fs_prepmove+0x48>
 80086b6:	2300      	movs	r3, #0
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80086bc:	897b      	ldrh	r3, [r7, #10]
 80086be:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <lfs_fs_prepmove+0x5e>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	e000      	b.n	80086d0 <lfs_fs_prepmove+0x60>
 80086ce:	2300      	movs	r3, #0
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	800003ff 	.word	0x800003ff

080086e4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b094      	sub	sp, #80	; 0x50
 80086e8:	af04      	add	r7, sp, #16
 80086ea:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	333c      	adds	r3, #60	; 0x3c
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fa fdd6 	bl	80032a2 <lfs_gstate_hasmove>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f083 0301 	eor.w	r3, r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <lfs_fs_demove+0x22>
        return 0;
 8008702:	2300      	movs	r3, #0
 8008704:	e049      	b.n	800879a <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	4618      	mov	r0, r3
 8008714:	f7fa fd30 	bl	8003178 <lfs_tag_id>
 8008718:	4603      	mov	r3, r0
 800871a:	461a      	mov	r2, r3
 800871c:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <lfs_fs_demove+0xc0>)
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	9201      	str	r2, [sp, #4]
 8008722:	9400      	str	r4, [sp, #0]
 8008724:	462b      	mov	r3, r5
 8008726:	f241 1266 	movw	r2, #4454	; 0x1166
 800872a:	491f      	ldr	r1, [pc, #124]	; (80087a8 <lfs_fs_demove+0xc4>)
 800872c:	481f      	ldr	r0, [pc, #124]	; (80087ac <lfs_fs_demove+0xc8>)
 800872e:	f000 ffdf 	bl	80096f0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008738:	f107 0318 	add.w	r3, r7, #24
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fc f9a4 	bl	8004a8c <lfs_dir_fetch>
 8008744:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8008746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <lfs_fs_demove+0x6c>
        return err;
 800874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874e:	e024      	b.n	800879a <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	4618      	mov	r0, r3
 8008756:	f7fa fd0f 	bl	8003178 <lfs_tag_id>
 800875a:	4603      	mov	r3, r0
 800875c:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800875e:	2200      	movs	r2, #0
 8008760:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ff83 	bl	8008670 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800876a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800876c:	029b      	lsls	r3, r3, #10
 800876e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008772:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	f107 0210 	add.w	r2, r7, #16
 8008780:	f107 0118 	add.w	r1, r7, #24
 8008784:	2301      	movs	r3, #1
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fd fede 	bl	8006548 <lfs_dir_commit>
 800878c:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <lfs_fs_demove+0xb4>
        return err;
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	e000      	b.n	800879a <lfs_fs_demove+0xb6>
    }

    return 0;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3740      	adds	r7, #64	; 0x40
 800879e:	46bd      	mov	sp, r7
 80087a0:	bdb0      	pop	{r4, r5, r7, pc}
 80087a2:	bf00      	nop
 80087a4:	0800a09c 	.word	0x0800a09c
 80087a8:	08009fa8 	.word	0x08009fa8
 80087ac:	0800a718 	.word	0x0800a718

080087b0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b0b2      	sub	sp, #200	; 0xc8
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3330      	adds	r3, #48	; 0x30
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fa fd4c 	bl	800325e <lfs_gstate_hasorphans>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f083 0301 	eor.w	r3, r3, #1
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <lfs_fs_deorphan+0x26>
        return 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e17c      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	2220      	movs	r2, #32
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fbad 	bl	8008f44 <memset>
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f0:	2301      	movs	r3, #1
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80087f4:	e148      	b.n	8008a88 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	f103 0218 	add.w	r2, r3, #24
 80087fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7fc f941 	bl	8004a8c <lfs_dir_fetch>
 800880a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 800880e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <lfs_fs_deorphan+0x6c>
                return err;
 8008816:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800881a:	e159      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800881c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008820:	f083 0301 	eor.w	r3, r3, #1
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8124 	beq.w	8008a74 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800882c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008830:	f107 030c 	add.w	r3, r7, #12
 8008834:	3318      	adds	r3, #24
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fe89 	bl	8008550 <lfs_fs_parent>
 800883e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8008842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008846:	2b00      	cmp	r3, #0
 8008848:	da07      	bge.n	800885a <lfs_fs_deorphan+0xaa>
 800884a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800884e:	f113 0f02 	cmn.w	r3, #2
 8008852:	d002      	beq.n	800885a <lfs_fs_deorphan+0xaa>
                    return tag;
 8008854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008858:	e13a      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 800885a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800885e:	f113 0f02 	cmn.w	r3, #2
 8008862:	d157      	bne.n	8008914 <lfs_fs_deorphan+0x164>
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d054      	beq.n	8008914 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	499a      	ldr	r1, [pc, #616]	; (8008ad8 <lfs_fs_deorphan+0x328>)
 8008870:	9101      	str	r1, [sp, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	f241 12a1 	movw	r2, #4513	; 0x11a1
 800887a:	4998      	ldr	r1, [pc, #608]	; (8008adc <lfs_fs_deorphan+0x32c>)
 800887c:	4898      	ldr	r0, [pc, #608]	; (8008ae0 <lfs_fs_deorphan+0x330>)
 800887e:	f000 ff37 	bl	80096f0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fc f918 	bl	8004ac4 <lfs_dir_getgstate>
 8008894:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8008898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <lfs_fs_deorphan+0xf6>
                        return err;
 80088a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088a4:	e114      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80088a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088aa:	3318      	adds	r3, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fa fbee 	bl	800308e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80088b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088b6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80088ba:	051a      	lsls	r2, r3, #20
 80088bc:	4b89      	ldr	r3, [pc, #548]	; (8008ae4 <lfs_fs_deorphan+0x334>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088c8:	3318      	adds	r3, #24
 80088ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ce:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80088d2:	f107 010c 	add.w	r1, r7, #12
 80088d6:	2301      	movs	r3, #1
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fd fb3b 	bl	8005f54 <lfs_dir_orphaningcommit>
 80088de:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80088e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088e6:	3318      	adds	r3, #24
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fa fbb6 	bl	800305a <lfs_pair_fromle32>
                    if (state < 0) {
 80088ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	da02      	bge.n	80088fc <lfs_fs_deorphan+0x14c>
                        return state;
 80088f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 80088fa:	e0e9      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 80088fc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008900:	3301      	adds	r3, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8008908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800890c:	2b03      	cmp	r3, #3
 800890e:	f040 80af 	bne.w	8008a70 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8008912:	e763      	b.n	80087dc <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8008914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008918:	f113 0f02 	cmn.w	r3, #2
 800891c:	f000 80aa 	beq.w	8008a74 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8008920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008924:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008928:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4613      	mov	r3, r2
 8008930:	4a6d      	ldr	r2, [pc, #436]	; (8008ae8 <lfs_fs_deorphan+0x338>)
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fb f80a 	bl	800394c <lfs_dir_get>
 8008938:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800893c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008940:	2b00      	cmp	r3, #0
 8008942:	da02      	bge.n	800894a <lfs_fs_deorphan+0x19a>
                        return state;
 8008944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008948:	e0c2      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 800894a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800894e:	4618      	mov	r0, r3
 8008950:	f7fa fb83 	bl	800305a <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8008954:	f107 030c 	add.w	r3, r7, #12
 8008958:	f103 0218 	add.w	r2, r3, #24
 800895c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f7fa fb4c 	bl	8003000 <lfs_pair_sync>
 8008968:	4603      	mov	r3, r0
 800896a:	f083 0301 	eor.w	r3, r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d07f      	beq.n	8008a74 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8008974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800897c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008980:	4c55      	ldr	r4, [pc, #340]	; (8008ad8 <lfs_fs_deorphan+0x328>)
 8008982:	9403      	str	r4, [sp, #12]
 8008984:	9102      	str	r1, [sp, #8]
 8008986:	9201      	str	r2, [sp, #4]
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	4603      	mov	r3, r0
 800898c:	f241 12ca 	movw	r2, #4554	; 0x11ca
 8008990:	4952      	ldr	r1, [pc, #328]	; (8008adc <lfs_fs_deorphan+0x32c>)
 8008992:	4856      	ldr	r0, [pc, #344]	; (8008aec <lfs_fs_deorphan+0x33c>)
 8008994:	f000 feac 	bl	80096f0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008998:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800899c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3330      	adds	r3, #48	; 0x30
 80089a4:	f107 020c 	add.w	r2, r7, #12
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fa fc8c 	bl	80032c8 <lfs_gstate_hasmovehere>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01c      	beq.n	80089f0 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fa fbdc 	bl	8003178 <lfs_tag_id>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80089ce:	4842      	ldr	r0, [pc, #264]	; (8008ad8 <lfs_fs_deorphan+0x328>)
 80089d0:	9002      	str	r0, [sp, #8]
 80089d2:	9201      	str	r2, [sp, #4]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	460b      	mov	r3, r1
 80089d8:	f241 12d5 	movw	r2, #4565	; 0x11d5
 80089dc:	493f      	ldr	r1, [pc, #252]	; (8008adc <lfs_fs_deorphan+0x32c>)
 80089de:	4844      	ldr	r0, [pc, #272]	; (8008af0 <lfs_fs_deorphan+0x340>)
 80089e0:	f000 fe86 	bl	80096f0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80089e4:	2200      	movs	r2, #0
 80089e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fe40 	bl	8008670 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80089f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fa fb4a 	bl	800308e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80089fa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80089fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <lfs_fs_deorphan+0x266>
 8008a06:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008a0a:	029b      	lsls	r3, r3, #10
 8008a0c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008a10:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008a14:	e000      	b.n	8008a18 <lfs_fs_deorphan+0x268>
 8008a16:	2300      	movs	r3, #0
 8008a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a20:	4b34      	ldr	r3, [pc, #208]	; (8008af4 <lfs_fs_deorphan+0x344>)
 8008a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a26:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a2e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008a32:	f107 010c 	add.w	r1, r7, #12
 8008a36:	2302      	movs	r3, #2
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7fd fa8b 	bl	8005f54 <lfs_dir_orphaningcommit>
 8008a3e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008a42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fa fb07 	bl	800305a <lfs_pair_fromle32>
                        if (state < 0) {
 8008a4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	da02      	bge.n	8008a5a <lfs_fs_deorphan+0x2aa>
                            return state;
 8008a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8008a58:	e03a      	b.n	8008ad0 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8008a5a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8008a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d10c      	bne.n	8008a88 <lfs_fs_deorphan+0x2d8>
 8008a6e:	e6b5      	b.n	80087dc <lfs_fs_deorphan+0x2c>
                    continue;
 8008a70:	bf00      	nop
 8008a72:	e009      	b.n	8008a88 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8008a74:	f107 040c 	add.w	r4, r7, #12
 8008a78:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8008a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8008a88:	f107 030c 	add.w	r3, r7, #12
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fa fa71 	bl	8002f76 <lfs_pair_isnull>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f083 0301 	eor.w	r3, r3, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f47f aeaa 	bne.w	80087f6 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3330      	adds	r3, #48	; 0x30
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fa fbec 	bl	8003284 <lfs_gstate_getorphans>
 8008aac:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7f9 fe48 	bl	800274c <lfs_min>
 8008abc:	4603      	mov	r3, r0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	425b      	negs	r3, r3
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fd97 	bl	80085fc <lfs_fs_preporphans>
 8008ace:	4603      	mov	r3, r0
            found));
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	37b8      	adds	r7, #184	; 0xb8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad8:	0800a09c 	.word	0x0800a09c
 8008adc:	08009fa8 	.word	0x08009fa8
 8008ae0:	0800a74c 	.word	0x0800a74c
 8008ae4:	000ffc08 	.word	0x000ffc08
 8008ae8:	7ffffc00 	.word	0x7ffffc00
 8008aec:	0800a77c 	.word	0x0800a77c
 8008af0:	0800a7c0 	.word	0x0800a7c0
 8008af4:	600ffc08 	.word	0x600ffc08

08008af8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fdef 	bl	80086e4 <lfs_fs_demove>
 8008b06:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <lfs_fs_forceconsistency+0x1a>
        return err;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	e00a      	b.n	8008b28 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008b12:	2101      	movs	r1, #1
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fe4b 	bl	80087b0 <lfs_fs_deorphan>
 8008b1a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <lfs_fs_forceconsistency+0x2e>
        return err;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	e000      	b.n	8008b28 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]
    return 0;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8008b64:	f107 0208 	add.w	r2, r7, #8
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4907      	ldr	r1, [pc, #28]	; (8008b88 <lfs_fs_rawsize+0x30>)
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff fb41 	bl	80081f4 <lfs_fs_rawtraverse>
 8008b72:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <lfs_fs_rawsize+0x26>
        return err;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	e000      	b.n	8008b80 <lfs_fs_rawsize+0x28>
    }

    return size;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	08008b31 	.word	0x08008b31

08008b8c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <lfs_format+0x18>
        return err;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	e005      	b.n	8008bb0 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff f8cc 	bl	8007d44 <lfs_rawformat>
 8008bac:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <lfs_mount+0x18>
        return err;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	e005      	b.n	8008bdc <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff f956 	bl	8007e84 <lfs_rawmount>
 8008bd8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <lfs_unmount+0x16>
        return err;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	e004      	b.n	8008c04 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff faee 	bl	80081dc <lfs_rawunmount>
 8008c00:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008c02:	68fb      	ldr	r3, [r7, #12]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <lfs_file_open+0x1c>
        return err;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	e01a      	b.n	8008c5e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fa fc4a 	bl	80034c8 <lfs_mlist_isopen>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f083 0301 	eor.w	r3, r3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <lfs_file_open+0x42>
 8008c40:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <lfs_file_open+0x5c>)
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <lfs_file_open+0x60>)
 8008c44:	f241 5166 	movw	r1, #5478	; 0x1566
 8008c48:	4809      	ldr	r0, [pc, #36]	; (8008c70 <lfs_file_open+0x64>)
 8008c4a:	f000 f8f3 	bl	8008e34 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7fe f893 	bl	8006d80 <lfs_file_rawopen>
 8008c5a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008c5c:	697b      	ldr	r3, [r7, #20]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	0800a808 	.word	0x0800a808
 8008c6c:	0800a9b0 	.word	0x0800a9b0
 8008c70:	08009fa8 	.word	0x08009fa8

08008c74 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <lfs_file_close+0x18>
        return err;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	e015      	b.n	8008cb8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fa fc18 	bl	80034c8 <lfs_mlist_isopen>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <lfs_file_close+0x38>
 8008c9e:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <lfs_file_close+0x4c>)
 8008ca0:	4a08      	ldr	r2, [pc, #32]	; (8008cc4 <lfs_file_close+0x50>)
 8008ca2:	f241 518a 	movw	r1, #5514	; 0x158a
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <lfs_file_close+0x54>)
 8008ca8:	f000 f8c4 	bl	8008e34 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fe f87e 	bl	8006db0 <lfs_file_rawclose>
 8008cb4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	0800a840 	.word	0x0800a840
 8008cc4:	0800a9c0 	.word	0x0800a9c0
 8008cc8:	08009fa8 	.word	0x08009fa8

08008ccc <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
    if (err) {
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <lfs_file_read+0x1c>
        return err;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	e017      	b.n	8008d18 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fa fbea 	bl	80034c8 <lfs_mlist_isopen>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <lfs_file_read+0x3c>
 8008cfa:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <lfs_file_read+0x54>)
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <lfs_file_read+0x58>)
 8008cfe:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008d02:	4809      	ldr	r0, [pc, #36]	; (8008d28 <lfs_file_read+0x5c>)
 8008d04:	f000 f896 	bl	8008e34 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7fe fb9a 	bl	8007448 <lfs_file_rawread>
 8008d14:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008d16:	693b      	ldr	r3, [r7, #16]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	0800a840 	.word	0x0800a840
 8008d24:	0800a9d0 	.word	0x0800a9d0
 8008d28:	08009fa8 	.word	0x08009fa8

08008d2c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <lfs_file_write+0x1c>
        return err;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	e017      	b.n	8008d78 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fa fbba 	bl	80034c8 <lfs_mlist_isopen>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <lfs_file_write+0x3c>
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <lfs_file_write+0x54>)
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <lfs_file_write+0x58>)
 8008d5e:	f241 51be 	movw	r1, #5566	; 0x15be
 8008d62:	4809      	ldr	r0, [pc, #36]	; (8008d88 <lfs_file_write+0x5c>)
 8008d64:	f000 f866 	bl	8008e34 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7fe fcc8 	bl	8007704 <lfs_file_rawwrite>
 8008d74:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008d76:	693b      	ldr	r3, [r7, #16]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	0800a840 	.word	0x0800a840
 8008d84:	0800a9e0 	.word	0x0800a9e0
 8008d88:	08009fa8 	.word	0x08009fa8

08008d8c <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <lfs_file_rewind+0x18>
        return err;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	e005      	b.n	8008db0 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7fe fdb9 	bl	800791e <lfs_file_rawrewind>
 8008dac:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008dae:	68fb      	ldr	r3, [r7, #12]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e024      	b.n	8008e18 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	091a      	lsrs	r2, r3, #4
 8008dd2:	6939      	ldr	r1, [r7, #16]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	440b      	add	r3, r1
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	404b      	eors	r3, r1
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	4912      	ldr	r1, [pc, #72]	; (8008e30 <lfs_crc+0x78>)
 8008de6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008dea:	4053      	eors	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	091a      	lsrs	r2, r3, #4
 8008df2:	6939      	ldr	r1, [r7, #16]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	440b      	add	r3, r1
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	404b      	eors	r3, r1
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	4909      	ldr	r1, [pc, #36]	; (8008e30 <lfs_crc+0x78>)
 8008e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e0e:	4053      	eors	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	3301      	adds	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3d6      	bcc.n	8008dce <lfs_crc+0x16>
    }

    return crc;
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	0800a9f0 	.word	0x0800a9f0

08008e34 <__assert_func>:
 8008e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e36:	4614      	mov	r4, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <__assert_func+0x2c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	b14c      	cbz	r4, 8008e58 <__assert_func+0x24>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__assert_func+0x30>)
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <__assert_func+0x34>)
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f000 f814 	bl	8008e7c <fiprintf>
 8008e54:	f000 fd74 	bl	8009940 <abort>
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <__assert_func+0x38>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e7f3      	b.n	8008e46 <__assert_func+0x12>
 8008e5e:	bf00      	nop
 8008e60:	2000000c 	.word	0x2000000c
 8008e64:	0800aa30 	.word	0x0800aa30
 8008e68:	0800aa3d 	.word	0x0800aa3d
 8008e6c:	0800aa6b 	.word	0x0800aa6b

08008e70 <__errno>:
 8008e70:	4b01      	ldr	r3, [pc, #4]	; (8008e78 <__errno+0x8>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	2000000c 	.word	0x2000000c

08008e7c <fiprintf>:
 8008e7c:	b40e      	push	{r1, r2, r3}
 8008e7e:	b503      	push	{r0, r1, lr}
 8008e80:	4601      	mov	r1, r0
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	4805      	ldr	r0, [pc, #20]	; (8008e9c <fiprintf+0x20>)
 8008e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	f000 f96b 	bl	8009168 <_vfiprintf_r>
 8008e92:	b002      	add	sp, #8
 8008e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e98:	b003      	add	sp, #12
 8008e9a:	4770      	bx	lr
 8008e9c:	2000000c 	.word	0x2000000c

08008ea0 <__libc_init_array>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	4d0d      	ldr	r5, [pc, #52]	; (8008ed8 <__libc_init_array+0x38>)
 8008ea4:	4c0d      	ldr	r4, [pc, #52]	; (8008edc <__libc_init_array+0x3c>)
 8008ea6:	1b64      	subs	r4, r4, r5
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	2600      	movs	r6, #0
 8008eac:	42a6      	cmp	r6, r4
 8008eae:	d109      	bne.n	8008ec4 <__libc_init_array+0x24>
 8008eb0:	4d0b      	ldr	r5, [pc, #44]	; (8008ee0 <__libc_init_array+0x40>)
 8008eb2:	4c0c      	ldr	r4, [pc, #48]	; (8008ee4 <__libc_init_array+0x44>)
 8008eb4:	f001 f856 	bl	8009f64 <_init>
 8008eb8:	1b64      	subs	r4, r4, r5
 8008eba:	10a4      	asrs	r4, r4, #2
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	42a6      	cmp	r6, r4
 8008ec0:	d105      	bne.n	8008ece <__libc_init_array+0x2e>
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec8:	4798      	blx	r3
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7ee      	b.n	8008eac <__libc_init_array+0xc>
 8008ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed2:	4798      	blx	r3
 8008ed4:	3601      	adds	r6, #1
 8008ed6:	e7f2      	b.n	8008ebe <__libc_init_array+0x1e>
 8008ed8:	0800ab0c 	.word	0x0800ab0c
 8008edc:	0800ab0c 	.word	0x0800ab0c
 8008ee0:	0800ab0c 	.word	0x0800ab0c
 8008ee4:	0800ab10 	.word	0x0800ab10

08008ee8 <malloc>:
 8008ee8:	4b02      	ldr	r3, [pc, #8]	; (8008ef4 <malloc+0xc>)
 8008eea:	4601      	mov	r1, r0
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f000 b89d 	b.w	800902c <_malloc_r>
 8008ef2:	bf00      	nop
 8008ef4:	2000000c 	.word	0x2000000c

08008ef8 <free>:
 8008ef8:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <free+0xc>)
 8008efa:	4601      	mov	r1, r0
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f000 b829 	b.w	8008f54 <_free_r>
 8008f02:	bf00      	nop
 8008f04:	2000000c 	.word	0x2000000c

08008f08 <memcmp>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	3901      	subs	r1, #1
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	d101      	bne.n	8008f16 <memcmp+0xe>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e005      	b.n	8008f22 <memcmp+0x1a>
 8008f16:	7803      	ldrb	r3, [r0, #0]
 8008f18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d001      	beq.n	8008f24 <memcmp+0x1c>
 8008f20:	1b18      	subs	r0, r3, r4
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	3001      	adds	r0, #1
 8008f26:	e7f2      	b.n	8008f0e <memcmp+0x6>

08008f28 <memcpy>:
 8008f28:	440a      	add	r2, r1
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f30:	d100      	bne.n	8008f34 <memcpy+0xc>
 8008f32:	4770      	bx	lr
 8008f34:	b510      	push	{r4, lr}
 8008f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3e:	4291      	cmp	r1, r2
 8008f40:	d1f9      	bne.n	8008f36 <memcpy+0xe>
 8008f42:	bd10      	pop	{r4, pc}

08008f44 <memset>:
 8008f44:	4402      	add	r2, r0
 8008f46:	4603      	mov	r3, r0
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d100      	bne.n	8008f4e <memset+0xa>
 8008f4c:	4770      	bx	lr
 8008f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f52:	e7f9      	b.n	8008f48 <memset+0x4>

08008f54 <_free_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d044      	beq.n	8008fe4 <_free_r+0x90>
 8008f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5e:	9001      	str	r0, [sp, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f1a1 0404 	sub.w	r4, r1, #4
 8008f66:	bfb8      	it	lt
 8008f68:	18e4      	addlt	r4, r4, r3
 8008f6a:	f000 ff33 	bl	8009dd4 <__malloc_lock>
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <_free_r+0x94>)
 8008f70:	9801      	ldr	r0, [sp, #4]
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	b933      	cbnz	r3, 8008f84 <_free_r+0x30>
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	6014      	str	r4, [r2, #0]
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f80:	f000 bf2e 	b.w	8009de0 <__malloc_unlock>
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d908      	bls.n	8008f9a <_free_r+0x46>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	428b      	cmp	r3, r1
 8008f8e:	bf01      	itttt	eq
 8008f90:	6819      	ldreq	r1, [r3, #0]
 8008f92:	685b      	ldreq	r3, [r3, #4]
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	e7ed      	b.n	8008f76 <_free_r+0x22>
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	b10b      	cbz	r3, 8008fa4 <_free_r+0x50>
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d9fa      	bls.n	8008f9a <_free_r+0x46>
 8008fa4:	6811      	ldr	r1, [r2, #0]
 8008fa6:	1855      	adds	r5, r2, r1
 8008fa8:	42a5      	cmp	r5, r4
 8008faa:	d10b      	bne.n	8008fc4 <_free_r+0x70>
 8008fac:	6824      	ldr	r4, [r4, #0]
 8008fae:	4421      	add	r1, r4
 8008fb0:	1854      	adds	r4, r2, r1
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	6011      	str	r1, [r2, #0]
 8008fb6:	d1e0      	bne.n	8008f7a <_free_r+0x26>
 8008fb8:	681c      	ldr	r4, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	6053      	str	r3, [r2, #4]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	e7da      	b.n	8008f7a <_free_r+0x26>
 8008fc4:	d902      	bls.n	8008fcc <_free_r+0x78>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	6003      	str	r3, [r0, #0]
 8008fca:	e7d6      	b.n	8008f7a <_free_r+0x26>
 8008fcc:	6825      	ldr	r5, [r4, #0]
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf04      	itt	eq
 8008fd4:	6819      	ldreq	r1, [r3, #0]
 8008fd6:	685b      	ldreq	r3, [r3, #4]
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	bf04      	itt	eq
 8008fdc:	1949      	addeq	r1, r1, r5
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	6054      	str	r4, [r2, #4]
 8008fe2:	e7ca      	b.n	8008f7a <_free_r+0x26>
 8008fe4:	b003      	add	sp, #12
 8008fe6:	bd30      	pop	{r4, r5, pc}
 8008fe8:	200002f4 	.word	0x200002f4

08008fec <sbrk_aligned>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	4e0e      	ldr	r6, [pc, #56]	; (8009028 <sbrk_aligned+0x3c>)
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6831      	ldr	r1, [r6, #0]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	b911      	cbnz	r1, 8008ffe <sbrk_aligned+0x12>
 8008ff8:	f000 fb92 	bl	8009720 <_sbrk_r>
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 fb8d 	bl	8009720 <_sbrk_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	d00a      	beq.n	8009020 <sbrk_aligned+0x34>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d007      	beq.n	8009024 <sbrk_aligned+0x38>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4628      	mov	r0, r5
 8009018:	f000 fb82 	bl	8009720 <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d101      	bne.n	8009024 <sbrk_aligned+0x38>
 8009020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	200002f8 	.word	0x200002f8

0800902c <_malloc_r>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4607      	mov	r7, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d905      	bls.n	8009054 <_malloc_r+0x28>
 8009048:	230c      	movs	r3, #12
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	2600      	movs	r6, #0
 800904e:	4630      	mov	r0, r6
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	4e2e      	ldr	r6, [pc, #184]	; (8009110 <_malloc_r+0xe4>)
 8009056:	f000 febd 	bl	8009dd4 <__malloc_lock>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	461c      	mov	r4, r3
 800905e:	bb34      	cbnz	r4, 80090ae <_malloc_r+0x82>
 8009060:	4629      	mov	r1, r5
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff ffc2 	bl	8008fec <sbrk_aligned>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	4604      	mov	r4, r0
 800906c:	d14d      	bne.n	800910a <_malloc_r+0xde>
 800906e:	6834      	ldr	r4, [r6, #0]
 8009070:	4626      	mov	r6, r4
 8009072:	2e00      	cmp	r6, #0
 8009074:	d140      	bne.n	80090f8 <_malloc_r+0xcc>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	4631      	mov	r1, r6
 800907a:	4638      	mov	r0, r7
 800907c:	eb04 0803 	add.w	r8, r4, r3
 8009080:	f000 fb4e 	bl	8009720 <_sbrk_r>
 8009084:	4580      	cmp	r8, r0
 8009086:	d13a      	bne.n	80090fe <_malloc_r+0xd2>
 8009088:	6821      	ldr	r1, [r4, #0]
 800908a:	3503      	adds	r5, #3
 800908c:	1a6d      	subs	r5, r5, r1
 800908e:	f025 0503 	bic.w	r5, r5, #3
 8009092:	3508      	adds	r5, #8
 8009094:	2d0c      	cmp	r5, #12
 8009096:	bf38      	it	cc
 8009098:	250c      	movcc	r5, #12
 800909a:	4629      	mov	r1, r5
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff ffa5 	bl	8008fec <sbrk_aligned>
 80090a2:	3001      	adds	r0, #1
 80090a4:	d02b      	beq.n	80090fe <_malloc_r+0xd2>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	442b      	add	r3, r5
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e00e      	b.n	80090cc <_malloc_r+0xa0>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	1b52      	subs	r2, r2, r5
 80090b2:	d41e      	bmi.n	80090f2 <_malloc_r+0xc6>
 80090b4:	2a0b      	cmp	r2, #11
 80090b6:	d916      	bls.n	80090e6 <_malloc_r+0xba>
 80090b8:	1961      	adds	r1, r4, r5
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	6025      	str	r5, [r4, #0]
 80090be:	bf18      	it	ne
 80090c0:	6059      	strne	r1, [r3, #4]
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	bf08      	it	eq
 80090c6:	6031      	streq	r1, [r6, #0]
 80090c8:	5162      	str	r2, [r4, r5]
 80090ca:	604b      	str	r3, [r1, #4]
 80090cc:	4638      	mov	r0, r7
 80090ce:	f104 060b 	add.w	r6, r4, #11
 80090d2:	f000 fe85 	bl	8009de0 <__malloc_unlock>
 80090d6:	f026 0607 	bic.w	r6, r6, #7
 80090da:	1d23      	adds	r3, r4, #4
 80090dc:	1af2      	subs	r2, r6, r3
 80090de:	d0b6      	beq.n	800904e <_malloc_r+0x22>
 80090e0:	1b9b      	subs	r3, r3, r6
 80090e2:	50a3      	str	r3, [r4, r2]
 80090e4:	e7b3      	b.n	800904e <_malloc_r+0x22>
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	bf0c      	ite	eq
 80090ec:	6032      	streq	r2, [r6, #0]
 80090ee:	605a      	strne	r2, [r3, #4]
 80090f0:	e7ec      	b.n	80090cc <_malloc_r+0xa0>
 80090f2:	4623      	mov	r3, r4
 80090f4:	6864      	ldr	r4, [r4, #4]
 80090f6:	e7b2      	b.n	800905e <_malloc_r+0x32>
 80090f8:	4634      	mov	r4, r6
 80090fa:	6876      	ldr	r6, [r6, #4]
 80090fc:	e7b9      	b.n	8009072 <_malloc_r+0x46>
 80090fe:	230c      	movs	r3, #12
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4638      	mov	r0, r7
 8009104:	f000 fe6c 	bl	8009de0 <__malloc_unlock>
 8009108:	e7a1      	b.n	800904e <_malloc_r+0x22>
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	e7de      	b.n	80090cc <_malloc_r+0xa0>
 800910e:	bf00      	nop
 8009110:	200002f4 	.word	0x200002f4

08009114 <__sfputc_r>:
 8009114:	6893      	ldr	r3, [r2, #8]
 8009116:	3b01      	subs	r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	b410      	push	{r4}
 800911c:	6093      	str	r3, [r2, #8]
 800911e:	da08      	bge.n	8009132 <__sfputc_r+0x1e>
 8009120:	6994      	ldr	r4, [r2, #24]
 8009122:	42a3      	cmp	r3, r4
 8009124:	db01      	blt.n	800912a <__sfputc_r+0x16>
 8009126:	290a      	cmp	r1, #10
 8009128:	d103      	bne.n	8009132 <__sfputc_r+0x1e>
 800912a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912e:	f000 bb35 	b.w	800979c <__swbuf_r>
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	1c58      	adds	r0, r3, #1
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	7019      	strb	r1, [r3, #0]
 800913a:	4608      	mov	r0, r1
 800913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009140:	4770      	bx	lr

08009142 <__sfputs_r>:
 8009142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009144:	4606      	mov	r6, r0
 8009146:	460f      	mov	r7, r1
 8009148:	4614      	mov	r4, r2
 800914a:	18d5      	adds	r5, r2, r3
 800914c:	42ac      	cmp	r4, r5
 800914e:	d101      	bne.n	8009154 <__sfputs_r+0x12>
 8009150:	2000      	movs	r0, #0
 8009152:	e007      	b.n	8009164 <__sfputs_r+0x22>
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	463a      	mov	r2, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ffda 	bl	8009114 <__sfputc_r>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d1f3      	bne.n	800914c <__sfputs_r+0xa>
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009168 <_vfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	b09d      	sub	sp, #116	; 0x74
 8009170:	4614      	mov	r4, r2
 8009172:	4698      	mov	r8, r3
 8009174:	4606      	mov	r6, r0
 8009176:	b118      	cbz	r0, 8009180 <_vfiprintf_r+0x18>
 8009178:	6983      	ldr	r3, [r0, #24]
 800917a:	b90b      	cbnz	r3, 8009180 <_vfiprintf_r+0x18>
 800917c:	f000 fd12 	bl	8009ba4 <__sinit>
 8009180:	4b89      	ldr	r3, [pc, #548]	; (80093a8 <_vfiprintf_r+0x240>)
 8009182:	429d      	cmp	r5, r3
 8009184:	d11b      	bne.n	80091be <_vfiprintf_r+0x56>
 8009186:	6875      	ldr	r5, [r6, #4]
 8009188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800918a:	07d9      	lsls	r1, r3, #31
 800918c:	d405      	bmi.n	800919a <_vfiprintf_r+0x32>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d402      	bmi.n	800919a <_vfiprintf_r+0x32>
 8009194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009196:	f000 fda3 	bl	8009ce0 <__retarget_lock_acquire_recursive>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	071b      	lsls	r3, r3, #28
 800919e:	d501      	bpl.n	80091a4 <_vfiprintf_r+0x3c>
 80091a0:	692b      	ldr	r3, [r5, #16]
 80091a2:	b9eb      	cbnz	r3, 80091e0 <_vfiprintf_r+0x78>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 fb5c 	bl	8009864 <__swsetup_r>
 80091ac:	b1c0      	cbz	r0, 80091e0 <_vfiprintf_r+0x78>
 80091ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091b0:	07dc      	lsls	r4, r3, #31
 80091b2:	d50e      	bpl.n	80091d2 <_vfiprintf_r+0x6a>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b8:	b01d      	add	sp, #116	; 0x74
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	4b7b      	ldr	r3, [pc, #492]	; (80093ac <_vfiprintf_r+0x244>)
 80091c0:	429d      	cmp	r5, r3
 80091c2:	d101      	bne.n	80091c8 <_vfiprintf_r+0x60>
 80091c4:	68b5      	ldr	r5, [r6, #8]
 80091c6:	e7df      	b.n	8009188 <_vfiprintf_r+0x20>
 80091c8:	4b79      	ldr	r3, [pc, #484]	; (80093b0 <_vfiprintf_r+0x248>)
 80091ca:	429d      	cmp	r5, r3
 80091cc:	bf08      	it	eq
 80091ce:	68f5      	ldreq	r5, [r6, #12]
 80091d0:	e7da      	b.n	8009188 <_vfiprintf_r+0x20>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	0598      	lsls	r0, r3, #22
 80091d6:	d4ed      	bmi.n	80091b4 <_vfiprintf_r+0x4c>
 80091d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091da:	f000 fd82 	bl	8009ce2 <__retarget_lock_release_recursive>
 80091de:	e7e9      	b.n	80091b4 <_vfiprintf_r+0x4c>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
 80091e4:	2320      	movs	r3, #32
 80091e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ee:	2330      	movs	r3, #48	; 0x30
 80091f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093b4 <_vfiprintf_r+0x24c>
 80091f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091f8:	f04f 0901 	mov.w	r9, #1
 80091fc:	4623      	mov	r3, r4
 80091fe:	469a      	mov	sl, r3
 8009200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009204:	b10a      	cbz	r2, 800920a <_vfiprintf_r+0xa2>
 8009206:	2a25      	cmp	r2, #37	; 0x25
 8009208:	d1f9      	bne.n	80091fe <_vfiprintf_r+0x96>
 800920a:	ebba 0b04 	subs.w	fp, sl, r4
 800920e:	d00b      	beq.n	8009228 <_vfiprintf_r+0xc0>
 8009210:	465b      	mov	r3, fp
 8009212:	4622      	mov	r2, r4
 8009214:	4629      	mov	r1, r5
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff93 	bl	8009142 <__sfputs_r>
 800921c:	3001      	adds	r0, #1
 800921e:	f000 80aa 	beq.w	8009376 <_vfiprintf_r+0x20e>
 8009222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009224:	445a      	add	r2, fp
 8009226:	9209      	str	r2, [sp, #36]	; 0x24
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80a2 	beq.w	8009376 <_vfiprintf_r+0x20e>
 8009232:	2300      	movs	r3, #0
 8009234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800923c:	f10a 0a01 	add.w	sl, sl, #1
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	9307      	str	r3, [sp, #28]
 8009244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009248:	931a      	str	r3, [sp, #104]	; 0x68
 800924a:	4654      	mov	r4, sl
 800924c:	2205      	movs	r2, #5
 800924e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009252:	4858      	ldr	r0, [pc, #352]	; (80093b4 <_vfiprintf_r+0x24c>)
 8009254:	f7f6 ffd4 	bl	8000200 <memchr>
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	b9d8      	cbnz	r0, 8009294 <_vfiprintf_r+0x12c>
 800925c:	06d1      	lsls	r1, r2, #27
 800925e:	bf44      	itt	mi
 8009260:	2320      	movmi	r3, #32
 8009262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009266:	0713      	lsls	r3, r2, #28
 8009268:	bf44      	itt	mi
 800926a:	232b      	movmi	r3, #43	; 0x2b
 800926c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009270:	f89a 3000 	ldrb.w	r3, [sl]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d015      	beq.n	80092a4 <_vfiprintf_r+0x13c>
 8009278:	9a07      	ldr	r2, [sp, #28]
 800927a:	4654      	mov	r4, sl
 800927c:	2000      	movs	r0, #0
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4621      	mov	r1, r4
 8009284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009288:	3b30      	subs	r3, #48	; 0x30
 800928a:	2b09      	cmp	r3, #9
 800928c:	d94e      	bls.n	800932c <_vfiprintf_r+0x1c4>
 800928e:	b1b0      	cbz	r0, 80092be <_vfiprintf_r+0x156>
 8009290:	9207      	str	r2, [sp, #28]
 8009292:	e014      	b.n	80092be <_vfiprintf_r+0x156>
 8009294:	eba0 0308 	sub.w	r3, r0, r8
 8009298:	fa09 f303 	lsl.w	r3, r9, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	9304      	str	r3, [sp, #16]
 80092a0:	46a2      	mov	sl, r4
 80092a2:	e7d2      	b.n	800924a <_vfiprintf_r+0xe2>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d19      	adds	r1, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9103      	str	r1, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfbb      	ittet	lt
 80092b0:	425b      	neglt	r3, r3
 80092b2:	f042 0202 	orrlt.w	r2, r2, #2
 80092b6:	9307      	strge	r3, [sp, #28]
 80092b8:	9307      	strlt	r3, [sp, #28]
 80092ba:	bfb8      	it	lt
 80092bc:	9204      	strlt	r2, [sp, #16]
 80092be:	7823      	ldrb	r3, [r4, #0]
 80092c0:	2b2e      	cmp	r3, #46	; 0x2e
 80092c2:	d10c      	bne.n	80092de <_vfiprintf_r+0x176>
 80092c4:	7863      	ldrb	r3, [r4, #1]
 80092c6:	2b2a      	cmp	r3, #42	; 0x2a
 80092c8:	d135      	bne.n	8009336 <_vfiprintf_r+0x1ce>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	1d1a      	adds	r2, r3, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	9203      	str	r2, [sp, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfb8      	it	lt
 80092d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092da:	3402      	adds	r4, #2
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093c4 <_vfiprintf_r+0x25c>
 80092e2:	7821      	ldrb	r1, [r4, #0]
 80092e4:	2203      	movs	r2, #3
 80092e6:	4650      	mov	r0, sl
 80092e8:	f7f6 ff8a 	bl	8000200 <memchr>
 80092ec:	b140      	cbz	r0, 8009300 <_vfiprintf_r+0x198>
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	eba0 000a 	sub.w	r0, r0, sl
 80092f4:	fa03 f000 	lsl.w	r0, r3, r0
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	4303      	orrs	r3, r0
 80092fc:	3401      	adds	r4, #1
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009304:	482c      	ldr	r0, [pc, #176]	; (80093b8 <_vfiprintf_r+0x250>)
 8009306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800930a:	2206      	movs	r2, #6
 800930c:	f7f6 ff78 	bl	8000200 <memchr>
 8009310:	2800      	cmp	r0, #0
 8009312:	d03f      	beq.n	8009394 <_vfiprintf_r+0x22c>
 8009314:	4b29      	ldr	r3, [pc, #164]	; (80093bc <_vfiprintf_r+0x254>)
 8009316:	bb1b      	cbnz	r3, 8009360 <_vfiprintf_r+0x1f8>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	3307      	adds	r3, #7
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	3308      	adds	r3, #8
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009326:	443b      	add	r3, r7
 8009328:	9309      	str	r3, [sp, #36]	; 0x24
 800932a:	e767      	b.n	80091fc <_vfiprintf_r+0x94>
 800932c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009330:	460c      	mov	r4, r1
 8009332:	2001      	movs	r0, #1
 8009334:	e7a5      	b.n	8009282 <_vfiprintf_r+0x11a>
 8009336:	2300      	movs	r3, #0
 8009338:	3401      	adds	r4, #1
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	4619      	mov	r1, r3
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009348:	3a30      	subs	r2, #48	; 0x30
 800934a:	2a09      	cmp	r2, #9
 800934c:	d903      	bls.n	8009356 <_vfiprintf_r+0x1ee>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c5      	beq.n	80092de <_vfiprintf_r+0x176>
 8009352:	9105      	str	r1, [sp, #20]
 8009354:	e7c3      	b.n	80092de <_vfiprintf_r+0x176>
 8009356:	fb0c 2101 	mla	r1, ip, r1, r2
 800935a:	4604      	mov	r4, r0
 800935c:	2301      	movs	r3, #1
 800935e:	e7f0      	b.n	8009342 <_vfiprintf_r+0x1da>
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	462a      	mov	r2, r5
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <_vfiprintf_r+0x258>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	4630      	mov	r0, r6
 800936c:	f3af 8000 	nop.w
 8009370:	4607      	mov	r7, r0
 8009372:	1c78      	adds	r0, r7, #1
 8009374:	d1d6      	bne.n	8009324 <_vfiprintf_r+0x1bc>
 8009376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009378:	07d9      	lsls	r1, r3, #31
 800937a:	d405      	bmi.n	8009388 <_vfiprintf_r+0x220>
 800937c:	89ab      	ldrh	r3, [r5, #12]
 800937e:	059a      	lsls	r2, r3, #22
 8009380:	d402      	bmi.n	8009388 <_vfiprintf_r+0x220>
 8009382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009384:	f000 fcad 	bl	8009ce2 <__retarget_lock_release_recursive>
 8009388:	89ab      	ldrh	r3, [r5, #12]
 800938a:	065b      	lsls	r3, r3, #25
 800938c:	f53f af12 	bmi.w	80091b4 <_vfiprintf_r+0x4c>
 8009390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009392:	e711      	b.n	80091b8 <_vfiprintf_r+0x50>
 8009394:	ab03      	add	r3, sp, #12
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	462a      	mov	r2, r5
 800939a:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <_vfiprintf_r+0x258>)
 800939c:	a904      	add	r1, sp, #16
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f880 	bl	80094a4 <_printf_i>
 80093a4:	e7e4      	b.n	8009370 <_vfiprintf_r+0x208>
 80093a6:	bf00      	nop
 80093a8:	0800aac4 	.word	0x0800aac4
 80093ac:	0800aae4 	.word	0x0800aae4
 80093b0:	0800aaa4 	.word	0x0800aaa4
 80093b4:	0800aa70 	.word	0x0800aa70
 80093b8:	0800aa7a 	.word	0x0800aa7a
 80093bc:	00000000 	.word	0x00000000
 80093c0:	08009143 	.word	0x08009143
 80093c4:	0800aa76 	.word	0x0800aa76

080093c8 <_printf_common>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	4616      	mov	r6, r2
 80093ce:	4699      	mov	r9, r3
 80093d0:	688a      	ldr	r2, [r1, #8]
 80093d2:	690b      	ldr	r3, [r1, #16]
 80093d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093d8:	4293      	cmp	r3, r2
 80093da:	bfb8      	it	lt
 80093dc:	4613      	movlt	r3, r2
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093e4:	4607      	mov	r7, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	b10a      	cbz	r2, 80093ee <_printf_common+0x26>
 80093ea:	3301      	adds	r3, #1
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	0699      	lsls	r1, r3, #26
 80093f2:	bf42      	ittt	mi
 80093f4:	6833      	ldrmi	r3, [r6, #0]
 80093f6:	3302      	addmi	r3, #2
 80093f8:	6033      	strmi	r3, [r6, #0]
 80093fa:	6825      	ldr	r5, [r4, #0]
 80093fc:	f015 0506 	ands.w	r5, r5, #6
 8009400:	d106      	bne.n	8009410 <_printf_common+0x48>
 8009402:	f104 0a19 	add.w	sl, r4, #25
 8009406:	68e3      	ldr	r3, [r4, #12]
 8009408:	6832      	ldr	r2, [r6, #0]
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	42ab      	cmp	r3, r5
 800940e:	dc26      	bgt.n	800945e <_printf_common+0x96>
 8009410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009414:	1e13      	subs	r3, r2, #0
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	bf18      	it	ne
 800941a:	2301      	movne	r3, #1
 800941c:	0692      	lsls	r2, r2, #26
 800941e:	d42b      	bmi.n	8009478 <_printf_common+0xb0>
 8009420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009424:	4649      	mov	r1, r9
 8009426:	4638      	mov	r0, r7
 8009428:	47c0      	blx	r8
 800942a:	3001      	adds	r0, #1
 800942c:	d01e      	beq.n	800946c <_printf_common+0xa4>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	68e5      	ldr	r5, [r4, #12]
 8009432:	6832      	ldr	r2, [r6, #0]
 8009434:	f003 0306 	and.w	r3, r3, #6
 8009438:	2b04      	cmp	r3, #4
 800943a:	bf08      	it	eq
 800943c:	1aad      	subeq	r5, r5, r2
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	6922      	ldr	r2, [r4, #16]
 8009442:	bf0c      	ite	eq
 8009444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009448:	2500      	movne	r5, #0
 800944a:	4293      	cmp	r3, r2
 800944c:	bfc4      	itt	gt
 800944e:	1a9b      	subgt	r3, r3, r2
 8009450:	18ed      	addgt	r5, r5, r3
 8009452:	2600      	movs	r6, #0
 8009454:	341a      	adds	r4, #26
 8009456:	42b5      	cmp	r5, r6
 8009458:	d11a      	bne.n	8009490 <_printf_common+0xc8>
 800945a:	2000      	movs	r0, #0
 800945c:	e008      	b.n	8009470 <_printf_common+0xa8>
 800945e:	2301      	movs	r3, #1
 8009460:	4652      	mov	r2, sl
 8009462:	4649      	mov	r1, r9
 8009464:	4638      	mov	r0, r7
 8009466:	47c0      	blx	r8
 8009468:	3001      	adds	r0, #1
 800946a:	d103      	bne.n	8009474 <_printf_common+0xac>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009474:	3501      	adds	r5, #1
 8009476:	e7c6      	b.n	8009406 <_printf_common+0x3e>
 8009478:	18e1      	adds	r1, r4, r3
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	2030      	movs	r0, #48	; 0x30
 800947e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009482:	4422      	add	r2, r4
 8009484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800948c:	3302      	adds	r3, #2
 800948e:	e7c7      	b.n	8009420 <_printf_common+0x58>
 8009490:	2301      	movs	r3, #1
 8009492:	4622      	mov	r2, r4
 8009494:	4649      	mov	r1, r9
 8009496:	4638      	mov	r0, r7
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d0e6      	beq.n	800946c <_printf_common+0xa4>
 800949e:	3601      	adds	r6, #1
 80094a0:	e7d9      	b.n	8009456 <_printf_common+0x8e>
	...

080094a4 <_printf_i>:
 80094a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	7e0f      	ldrb	r7, [r1, #24]
 80094aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094ac:	2f78      	cmp	r7, #120	; 0x78
 80094ae:	4691      	mov	r9, r2
 80094b0:	4680      	mov	r8, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	469a      	mov	sl, r3
 80094b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094ba:	d807      	bhi.n	80094cc <_printf_i+0x28>
 80094bc:	2f62      	cmp	r7, #98	; 0x62
 80094be:	d80a      	bhi.n	80094d6 <_printf_i+0x32>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f000 80d8 	beq.w	8009676 <_printf_i+0x1d2>
 80094c6:	2f58      	cmp	r7, #88	; 0x58
 80094c8:	f000 80a3 	beq.w	8009612 <_printf_i+0x16e>
 80094cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094d4:	e03a      	b.n	800954c <_printf_i+0xa8>
 80094d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094da:	2b15      	cmp	r3, #21
 80094dc:	d8f6      	bhi.n	80094cc <_printf_i+0x28>
 80094de:	a101      	add	r1, pc, #4	; (adr r1, 80094e4 <_printf_i+0x40>)
 80094e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080094cd 	.word	0x080094cd
 80094f0:	080094cd 	.word	0x080094cd
 80094f4:	080094cd 	.word	0x080094cd
 80094f8:	080094cd 	.word	0x080094cd
 80094fc:	08009551 	.word	0x08009551
 8009500:	080094cd 	.word	0x080094cd
 8009504:	080094cd 	.word	0x080094cd
 8009508:	080094cd 	.word	0x080094cd
 800950c:	080094cd 	.word	0x080094cd
 8009510:	0800965d 	.word	0x0800965d
 8009514:	08009581 	.word	0x08009581
 8009518:	0800963f 	.word	0x0800963f
 800951c:	080094cd 	.word	0x080094cd
 8009520:	080094cd 	.word	0x080094cd
 8009524:	0800967f 	.word	0x0800967f
 8009528:	080094cd 	.word	0x080094cd
 800952c:	08009581 	.word	0x08009581
 8009530:	080094cd 	.word	0x080094cd
 8009534:	080094cd 	.word	0x080094cd
 8009538:	08009647 	.word	0x08009647
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	602a      	str	r2, [r5, #0]
 8009544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800954c:	2301      	movs	r3, #1
 800954e:	e0a3      	b.n	8009698 <_printf_i+0x1f4>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	6829      	ldr	r1, [r5, #0]
 8009554:	0606      	lsls	r6, r0, #24
 8009556:	f101 0304 	add.w	r3, r1, #4
 800955a:	d50a      	bpl.n	8009572 <_printf_i+0xce>
 800955c:	680e      	ldr	r6, [r1, #0]
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	2e00      	cmp	r6, #0
 8009562:	da03      	bge.n	800956c <_printf_i+0xc8>
 8009564:	232d      	movs	r3, #45	; 0x2d
 8009566:	4276      	negs	r6, r6
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956c:	485e      	ldr	r0, [pc, #376]	; (80096e8 <_printf_i+0x244>)
 800956e:	230a      	movs	r3, #10
 8009570:	e019      	b.n	80095a6 <_printf_i+0x102>
 8009572:	680e      	ldr	r6, [r1, #0]
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800957a:	bf18      	it	ne
 800957c:	b236      	sxthne	r6, r6
 800957e:	e7ef      	b.n	8009560 <_printf_i+0xbc>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	6029      	str	r1, [r5, #0]
 8009588:	0601      	lsls	r1, r0, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xec>
 800958c:	681e      	ldr	r6, [r3, #0]
 800958e:	e002      	b.n	8009596 <_printf_i+0xf2>
 8009590:	0646      	lsls	r6, r0, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xe8>
 8009594:	881e      	ldrh	r6, [r3, #0]
 8009596:	4854      	ldr	r0, [pc, #336]	; (80096e8 <_printf_i+0x244>)
 8009598:	2f6f      	cmp	r7, #111	; 0x6f
 800959a:	bf0c      	ite	eq
 800959c:	2308      	moveq	r3, #8
 800959e:	230a      	movne	r3, #10
 80095a0:	2100      	movs	r1, #0
 80095a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095a6:	6865      	ldr	r5, [r4, #4]
 80095a8:	60a5      	str	r5, [r4, #8]
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	bfa2      	ittt	ge
 80095ae:	6821      	ldrge	r1, [r4, #0]
 80095b0:	f021 0104 	bicge.w	r1, r1, #4
 80095b4:	6021      	strge	r1, [r4, #0]
 80095b6:	b90e      	cbnz	r6, 80095bc <_printf_i+0x118>
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	d04d      	beq.n	8009658 <_printf_i+0x1b4>
 80095bc:	4615      	mov	r5, r2
 80095be:	fbb6 f1f3 	udiv	r1, r6, r3
 80095c2:	fb03 6711 	mls	r7, r3, r1, r6
 80095c6:	5dc7      	ldrb	r7, [r0, r7]
 80095c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095cc:	4637      	mov	r7, r6
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	460e      	mov	r6, r1
 80095d2:	d9f4      	bls.n	80095be <_printf_i+0x11a>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d10b      	bne.n	80095f0 <_printf_i+0x14c>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	07de      	lsls	r6, r3, #31
 80095dc:	d508      	bpl.n	80095f0 <_printf_i+0x14c>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	bfde      	ittt	le
 80095e6:	2330      	movle	r3, #48	; 0x30
 80095e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095f0:	1b52      	subs	r2, r2, r5
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	464b      	mov	r3, r9
 80095fa:	aa03      	add	r2, sp, #12
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fee2 	bl	80093c8 <_printf_common>
 8009604:	3001      	adds	r0, #1
 8009606:	d14c      	bne.n	80096a2 <_printf_i+0x1fe>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800960c:	b004      	add	sp, #16
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	4835      	ldr	r0, [pc, #212]	; (80096e8 <_printf_i+0x244>)
 8009614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009618:	6829      	ldr	r1, [r5, #0]
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009620:	6029      	str	r1, [r5, #0]
 8009622:	061d      	lsls	r5, r3, #24
 8009624:	d514      	bpl.n	8009650 <_printf_i+0x1ac>
 8009626:	07df      	lsls	r7, r3, #31
 8009628:	bf44      	itt	mi
 800962a:	f043 0320 	orrmi.w	r3, r3, #32
 800962e:	6023      	strmi	r3, [r4, #0]
 8009630:	b91e      	cbnz	r6, 800963a <_printf_i+0x196>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	f023 0320 	bic.w	r3, r3, #32
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2310      	movs	r3, #16
 800963c:	e7b0      	b.n	80095a0 <_printf_i+0xfc>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f043 0320 	orr.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2378      	movs	r3, #120	; 0x78
 8009648:	4828      	ldr	r0, [pc, #160]	; (80096ec <_printf_i+0x248>)
 800964a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800964e:	e7e3      	b.n	8009618 <_printf_i+0x174>
 8009650:	0659      	lsls	r1, r3, #25
 8009652:	bf48      	it	mi
 8009654:	b2b6      	uxthmi	r6, r6
 8009656:	e7e6      	b.n	8009626 <_printf_i+0x182>
 8009658:	4615      	mov	r5, r2
 800965a:	e7bb      	b.n	80095d4 <_printf_i+0x130>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	6826      	ldr	r6, [r4, #0]
 8009660:	6961      	ldr	r1, [r4, #20]
 8009662:	1d18      	adds	r0, r3, #4
 8009664:	6028      	str	r0, [r5, #0]
 8009666:	0635      	lsls	r5, r6, #24
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	d501      	bpl.n	8009670 <_printf_i+0x1cc>
 800966c:	6019      	str	r1, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0x1d2>
 8009670:	0670      	lsls	r0, r6, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0x1c8>
 8009674:	8019      	strh	r1, [r3, #0]
 8009676:	2300      	movs	r3, #0
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	4615      	mov	r5, r2
 800967c:	e7ba      	b.n	80095f4 <_printf_i+0x150>
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	681d      	ldr	r5, [r3, #0]
 8009686:	6862      	ldr	r2, [r4, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	4628      	mov	r0, r5
 800968c:	f7f6 fdb8 	bl	8000200 <memchr>
 8009690:	b108      	cbz	r0, 8009696 <_printf_i+0x1f2>
 8009692:	1b40      	subs	r0, r0, r5
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	2300      	movs	r3, #0
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	e7a8      	b.n	80095f4 <_printf_i+0x150>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4649      	mov	r1, r9
 80096a8:	4640      	mov	r0, r8
 80096aa:	47d0      	blx	sl
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0ab      	beq.n	8009608 <_printf_i+0x164>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	079b      	lsls	r3, r3, #30
 80096b4:	d413      	bmi.n	80096de <_printf_i+0x23a>
 80096b6:	68e0      	ldr	r0, [r4, #12]
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	4298      	cmp	r0, r3
 80096bc:	bfb8      	it	lt
 80096be:	4618      	movlt	r0, r3
 80096c0:	e7a4      	b.n	800960c <_printf_i+0x168>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4632      	mov	r2, r6
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d09b      	beq.n	8009608 <_printf_i+0x164>
 80096d0:	3501      	adds	r5, #1
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dcf2      	bgt.n	80096c2 <_printf_i+0x21e>
 80096dc:	e7eb      	b.n	80096b6 <_printf_i+0x212>
 80096de:	2500      	movs	r5, #0
 80096e0:	f104 0619 	add.w	r6, r4, #25
 80096e4:	e7f5      	b.n	80096d2 <_printf_i+0x22e>
 80096e6:	bf00      	nop
 80096e8:	0800aa81 	.word	0x0800aa81
 80096ec:	0800aa92 	.word	0x0800aa92

080096f0 <iprintf>:
 80096f0:	b40f      	push	{r0, r1, r2, r3}
 80096f2:	4b0a      	ldr	r3, [pc, #40]	; (800971c <iprintf+0x2c>)
 80096f4:	b513      	push	{r0, r1, r4, lr}
 80096f6:	681c      	ldr	r4, [r3, #0]
 80096f8:	b124      	cbz	r4, 8009704 <iprintf+0x14>
 80096fa:	69a3      	ldr	r3, [r4, #24]
 80096fc:	b913      	cbnz	r3, 8009704 <iprintf+0x14>
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 fa50 	bl	8009ba4 <__sinit>
 8009704:	ab05      	add	r3, sp, #20
 8009706:	9a04      	ldr	r2, [sp, #16]
 8009708:	68a1      	ldr	r1, [r4, #8]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff fd2b 	bl	8009168 <_vfiprintf_r>
 8009712:	b002      	add	sp, #8
 8009714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009718:	b004      	add	sp, #16
 800971a:	4770      	bx	lr
 800971c:	2000000c 	.word	0x2000000c

08009720 <_sbrk_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	; (800973c <_sbrk_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f7 fc18 	bl	8000f60 <_sbrk>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_sbrk_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_sbrk_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	20000300 	.word	0x20000300

08009740 <strchr>:
 8009740:	b2c9      	uxtb	r1, r1
 8009742:	4603      	mov	r3, r0
 8009744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009748:	b11a      	cbz	r2, 8009752 <strchr+0x12>
 800974a:	428a      	cmp	r2, r1
 800974c:	d1f9      	bne.n	8009742 <strchr+0x2>
 800974e:	4618      	mov	r0, r3
 8009750:	4770      	bx	lr
 8009752:	2900      	cmp	r1, #0
 8009754:	bf18      	it	ne
 8009756:	2300      	movne	r3, #0
 8009758:	e7f9      	b.n	800974e <strchr+0xe>

0800975a <strcspn>:
 800975a:	b570      	push	{r4, r5, r6, lr}
 800975c:	4603      	mov	r3, r0
 800975e:	461e      	mov	r6, r3
 8009760:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009764:	b144      	cbz	r4, 8009778 <strcspn+0x1e>
 8009766:	1e4a      	subs	r2, r1, #1
 8009768:	e001      	b.n	800976e <strcspn+0x14>
 800976a:	42a5      	cmp	r5, r4
 800976c:	d004      	beq.n	8009778 <strcspn+0x1e>
 800976e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009772:	2d00      	cmp	r5, #0
 8009774:	d1f9      	bne.n	800976a <strcspn+0x10>
 8009776:	e7f2      	b.n	800975e <strcspn+0x4>
 8009778:	1a30      	subs	r0, r6, r0
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <strspn>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4603      	mov	r3, r0
 8009780:	461e      	mov	r6, r3
 8009782:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009786:	b13c      	cbz	r4, 8009798 <strspn+0x1c>
 8009788:	1e4a      	subs	r2, r1, #1
 800978a:	e001      	b.n	8009790 <strspn+0x14>
 800978c:	42a5      	cmp	r5, r4
 800978e:	d0f7      	beq.n	8009780 <strspn+0x4>
 8009790:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009794:	2d00      	cmp	r5, #0
 8009796:	d1f9      	bne.n	800978c <strspn+0x10>
 8009798:	1a30      	subs	r0, r6, r0
 800979a:	bd70      	pop	{r4, r5, r6, pc}

0800979c <__swbuf_r>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	4614      	mov	r4, r2
 80097a2:	4605      	mov	r5, r0
 80097a4:	b118      	cbz	r0, 80097ae <__swbuf_r+0x12>
 80097a6:	6983      	ldr	r3, [r0, #24]
 80097a8:	b90b      	cbnz	r3, 80097ae <__swbuf_r+0x12>
 80097aa:	f000 f9fb 	bl	8009ba4 <__sinit>
 80097ae:	4b21      	ldr	r3, [pc, #132]	; (8009834 <__swbuf_r+0x98>)
 80097b0:	429c      	cmp	r4, r3
 80097b2:	d12b      	bne.n	800980c <__swbuf_r+0x70>
 80097b4:	686c      	ldr	r4, [r5, #4]
 80097b6:	69a3      	ldr	r3, [r4, #24]
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	071a      	lsls	r2, r3, #28
 80097be:	d52f      	bpl.n	8009820 <__swbuf_r+0x84>
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	b36b      	cbz	r3, 8009820 <__swbuf_r+0x84>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	6963      	ldr	r3, [r4, #20]
 80097cc:	b2f6      	uxtb	r6, r6
 80097ce:	4283      	cmp	r3, r0
 80097d0:	4637      	mov	r7, r6
 80097d2:	dc04      	bgt.n	80097de <__swbuf_r+0x42>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 f950 	bl	8009a7c <_fflush_r>
 80097dc:	bb30      	cbnz	r0, 800982c <__swbuf_r+0x90>
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	60a3      	str	r3, [r4, #8]
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	6022      	str	r2, [r4, #0]
 80097ea:	701e      	strb	r6, [r3, #0]
 80097ec:	6963      	ldr	r3, [r4, #20]
 80097ee:	3001      	adds	r0, #1
 80097f0:	4283      	cmp	r3, r0
 80097f2:	d004      	beq.n	80097fe <__swbuf_r+0x62>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	07db      	lsls	r3, r3, #31
 80097f8:	d506      	bpl.n	8009808 <__swbuf_r+0x6c>
 80097fa:	2e0a      	cmp	r6, #10
 80097fc:	d104      	bne.n	8009808 <__swbuf_r+0x6c>
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f000 f93b 	bl	8009a7c <_fflush_r>
 8009806:	b988      	cbnz	r0, 800982c <__swbuf_r+0x90>
 8009808:	4638      	mov	r0, r7
 800980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <__swbuf_r+0x9c>)
 800980e:	429c      	cmp	r4, r3
 8009810:	d101      	bne.n	8009816 <__swbuf_r+0x7a>
 8009812:	68ac      	ldr	r4, [r5, #8]
 8009814:	e7cf      	b.n	80097b6 <__swbuf_r+0x1a>
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <__swbuf_r+0xa0>)
 8009818:	429c      	cmp	r4, r3
 800981a:	bf08      	it	eq
 800981c:	68ec      	ldreq	r4, [r5, #12]
 800981e:	e7ca      	b.n	80097b6 <__swbuf_r+0x1a>
 8009820:	4621      	mov	r1, r4
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f81e 	bl	8009864 <__swsetup_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	d0cb      	beq.n	80097c4 <__swbuf_r+0x28>
 800982c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009830:	e7ea      	b.n	8009808 <__swbuf_r+0x6c>
 8009832:	bf00      	nop
 8009834:	0800aac4 	.word	0x0800aac4
 8009838:	0800aae4 	.word	0x0800aae4
 800983c:	0800aaa4 	.word	0x0800aaa4

08009840 <_write_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <_write_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f7 fb35 	bl	8000ebe <_write>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_write_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_write_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20000300 	.word	0x20000300

08009864 <__swsetup_r>:
 8009864:	4b32      	ldr	r3, [pc, #200]	; (8009930 <__swsetup_r+0xcc>)
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	681d      	ldr	r5, [r3, #0]
 800986a:	4606      	mov	r6, r0
 800986c:	460c      	mov	r4, r1
 800986e:	b125      	cbz	r5, 800987a <__swsetup_r+0x16>
 8009870:	69ab      	ldr	r3, [r5, #24]
 8009872:	b913      	cbnz	r3, 800987a <__swsetup_r+0x16>
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f995 	bl	8009ba4 <__sinit>
 800987a:	4b2e      	ldr	r3, [pc, #184]	; (8009934 <__swsetup_r+0xd0>)
 800987c:	429c      	cmp	r4, r3
 800987e:	d10f      	bne.n	80098a0 <__swsetup_r+0x3c>
 8009880:	686c      	ldr	r4, [r5, #4]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009888:	0719      	lsls	r1, r3, #28
 800988a:	d42c      	bmi.n	80098e6 <__swsetup_r+0x82>
 800988c:	06dd      	lsls	r5, r3, #27
 800988e:	d411      	bmi.n	80098b4 <__swsetup_r+0x50>
 8009890:	2309      	movs	r3, #9
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800989e:	e03e      	b.n	800991e <__swsetup_r+0xba>
 80098a0:	4b25      	ldr	r3, [pc, #148]	; (8009938 <__swsetup_r+0xd4>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <__swsetup_r+0x46>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7eb      	b.n	8009882 <__swsetup_r+0x1e>
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <__swsetup_r+0xd8>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7e6      	b.n	8009882 <__swsetup_r+0x1e>
 80098b4:	0758      	lsls	r0, r3, #29
 80098b6:	d512      	bpl.n	80098de <__swsetup_r+0x7a>
 80098b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ba:	b141      	cbz	r1, 80098ce <__swsetup_r+0x6a>
 80098bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c0:	4299      	cmp	r1, r3
 80098c2:	d002      	beq.n	80098ca <__swsetup_r+0x66>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff fb45 	bl	8008f54 <_free_r>
 80098ca:	2300      	movs	r3, #0
 80098cc:	6363      	str	r3, [r4, #52]	; 0x34
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f043 0308 	orr.w	r3, r3, #8
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	b94b      	cbnz	r3, 80098fe <__swsetup_r+0x9a>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f4:	d003      	beq.n	80098fe <__swsetup_r+0x9a>
 80098f6:	4621      	mov	r1, r4
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 fa2b 	bl	8009d54 <__smakebuf_r>
 80098fe:	89a0      	ldrh	r0, [r4, #12]
 8009900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009904:	f010 0301 	ands.w	r3, r0, #1
 8009908:	d00a      	beq.n	8009920 <__swsetup_r+0xbc>
 800990a:	2300      	movs	r3, #0
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6963      	ldr	r3, [r4, #20]
 8009910:	425b      	negs	r3, r3
 8009912:	61a3      	str	r3, [r4, #24]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	b943      	cbnz	r3, 800992a <__swsetup_r+0xc6>
 8009918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800991c:	d1ba      	bne.n	8009894 <__swsetup_r+0x30>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	0781      	lsls	r1, r0, #30
 8009922:	bf58      	it	pl
 8009924:	6963      	ldrpl	r3, [r4, #20]
 8009926:	60a3      	str	r3, [r4, #8]
 8009928:	e7f4      	b.n	8009914 <__swsetup_r+0xb0>
 800992a:	2000      	movs	r0, #0
 800992c:	e7f7      	b.n	800991e <__swsetup_r+0xba>
 800992e:	bf00      	nop
 8009930:	2000000c 	.word	0x2000000c
 8009934:	0800aac4 	.word	0x0800aac4
 8009938:	0800aae4 	.word	0x0800aae4
 800993c:	0800aaa4 	.word	0x0800aaa4

08009940 <abort>:
 8009940:	b508      	push	{r3, lr}
 8009942:	2006      	movs	r0, #6
 8009944:	f000 fa8c 	bl	8009e60 <raise>
 8009948:	2001      	movs	r0, #1
 800994a:	f7f7 fa91 	bl	8000e70 <_exit>
	...

08009950 <_close_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d06      	ldr	r5, [pc, #24]	; (800996c <_close_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f7 facb 	bl	8000ef6 <_close>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_close_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_close_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000300 	.word	0x20000300

08009970 <__sflush_r>:
 8009970:	898a      	ldrh	r2, [r1, #12]
 8009972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009976:	4605      	mov	r5, r0
 8009978:	0710      	lsls	r0, r2, #28
 800997a:	460c      	mov	r4, r1
 800997c:	d458      	bmi.n	8009a30 <__sflush_r+0xc0>
 800997e:	684b      	ldr	r3, [r1, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	dc05      	bgt.n	8009990 <__sflush_r+0x20>
 8009984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	dc02      	bgt.n	8009990 <__sflush_r+0x20>
 800998a:	2000      	movs	r0, #0
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009992:	2e00      	cmp	r6, #0
 8009994:	d0f9      	beq.n	800998a <__sflush_r+0x1a>
 8009996:	2300      	movs	r3, #0
 8009998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800999c:	682f      	ldr	r7, [r5, #0]
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	d032      	beq.n	8009a08 <__sflush_r+0x98>
 80099a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	075a      	lsls	r2, r3, #29
 80099a8:	d505      	bpl.n	80099b6 <__sflush_r+0x46>
 80099aa:	6863      	ldr	r3, [r4, #4]
 80099ac:	1ac0      	subs	r0, r0, r3
 80099ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b0:	b10b      	cbz	r3, 80099b6 <__sflush_r+0x46>
 80099b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099b4:	1ac0      	subs	r0, r0, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	4602      	mov	r2, r0
 80099ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099bc:	6a21      	ldr	r1, [r4, #32]
 80099be:	4628      	mov	r0, r5
 80099c0:	47b0      	blx	r6
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	d106      	bne.n	80099d6 <__sflush_r+0x66>
 80099c8:	6829      	ldr	r1, [r5, #0]
 80099ca:	291d      	cmp	r1, #29
 80099cc:	d82c      	bhi.n	8009a28 <__sflush_r+0xb8>
 80099ce:	4a2a      	ldr	r2, [pc, #168]	; (8009a78 <__sflush_r+0x108>)
 80099d0:	40ca      	lsrs	r2, r1
 80099d2:	07d6      	lsls	r6, r2, #31
 80099d4:	d528      	bpl.n	8009a28 <__sflush_r+0xb8>
 80099d6:	2200      	movs	r2, #0
 80099d8:	6062      	str	r2, [r4, #4]
 80099da:	04d9      	lsls	r1, r3, #19
 80099dc:	6922      	ldr	r2, [r4, #16]
 80099de:	6022      	str	r2, [r4, #0]
 80099e0:	d504      	bpl.n	80099ec <__sflush_r+0x7c>
 80099e2:	1c42      	adds	r2, r0, #1
 80099e4:	d101      	bne.n	80099ea <__sflush_r+0x7a>
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	b903      	cbnz	r3, 80099ec <__sflush_r+0x7c>
 80099ea:	6560      	str	r0, [r4, #84]	; 0x54
 80099ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ee:	602f      	str	r7, [r5, #0]
 80099f0:	2900      	cmp	r1, #0
 80099f2:	d0ca      	beq.n	800998a <__sflush_r+0x1a>
 80099f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f8:	4299      	cmp	r1, r3
 80099fa:	d002      	beq.n	8009a02 <__sflush_r+0x92>
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7ff faa9 	bl	8008f54 <_free_r>
 8009a02:	2000      	movs	r0, #0
 8009a04:	6360      	str	r0, [r4, #52]	; 0x34
 8009a06:	e7c1      	b.n	800998c <__sflush_r+0x1c>
 8009a08:	6a21      	ldr	r1, [r4, #32]
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b0      	blx	r6
 8009a10:	1c41      	adds	r1, r0, #1
 8009a12:	d1c7      	bne.n	80099a4 <__sflush_r+0x34>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0c4      	beq.n	80099a4 <__sflush_r+0x34>
 8009a1a:	2b1d      	cmp	r3, #29
 8009a1c:	d001      	beq.n	8009a22 <__sflush_r+0xb2>
 8009a1e:	2b16      	cmp	r3, #22
 8009a20:	d101      	bne.n	8009a26 <__sflush_r+0xb6>
 8009a22:	602f      	str	r7, [r5, #0]
 8009a24:	e7b1      	b.n	800998a <__sflush_r+0x1a>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	e7ad      	b.n	800998c <__sflush_r+0x1c>
 8009a30:	690f      	ldr	r7, [r1, #16]
 8009a32:	2f00      	cmp	r7, #0
 8009a34:	d0a9      	beq.n	800998a <__sflush_r+0x1a>
 8009a36:	0793      	lsls	r3, r2, #30
 8009a38:	680e      	ldr	r6, [r1, #0]
 8009a3a:	bf08      	it	eq
 8009a3c:	694b      	ldreq	r3, [r1, #20]
 8009a3e:	600f      	str	r7, [r1, #0]
 8009a40:	bf18      	it	ne
 8009a42:	2300      	movne	r3, #0
 8009a44:	eba6 0807 	sub.w	r8, r6, r7
 8009a48:	608b      	str	r3, [r1, #8]
 8009a4a:	f1b8 0f00 	cmp.w	r8, #0
 8009a4e:	dd9c      	ble.n	800998a <__sflush_r+0x1a>
 8009a50:	6a21      	ldr	r1, [r4, #32]
 8009a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a54:	4643      	mov	r3, r8
 8009a56:	463a      	mov	r2, r7
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b0      	blx	r6
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	dc06      	bgt.n	8009a6e <__sflush_r+0xfe>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a6c:	e78e      	b.n	800998c <__sflush_r+0x1c>
 8009a6e:	4407      	add	r7, r0
 8009a70:	eba8 0800 	sub.w	r8, r8, r0
 8009a74:	e7e9      	b.n	8009a4a <__sflush_r+0xda>
 8009a76:	bf00      	nop
 8009a78:	20400001 	.word	0x20400001

08009a7c <_fflush_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	4605      	mov	r5, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b913      	cbnz	r3, 8009a8c <_fflush_r+0x10>
 8009a86:	2500      	movs	r5, #0
 8009a88:	4628      	mov	r0, r5
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	b118      	cbz	r0, 8009a96 <_fflush_r+0x1a>
 8009a8e:	6983      	ldr	r3, [r0, #24]
 8009a90:	b90b      	cbnz	r3, 8009a96 <_fflush_r+0x1a>
 8009a92:	f000 f887 	bl	8009ba4 <__sinit>
 8009a96:	4b14      	ldr	r3, [pc, #80]	; (8009ae8 <_fflush_r+0x6c>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	d11b      	bne.n	8009ad4 <_fflush_r+0x58>
 8009a9c:	686c      	ldr	r4, [r5, #4]
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0ef      	beq.n	8009a86 <_fflush_r+0xa>
 8009aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009aa8:	07d0      	lsls	r0, r2, #31
 8009aaa:	d404      	bmi.n	8009ab6 <_fflush_r+0x3a>
 8009aac:	0599      	lsls	r1, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_fflush_r+0x3a>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f000 f915 	bl	8009ce0 <__retarget_lock_acquire_recursive>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7ff ff59 	bl	8009970 <__sflush_r>
 8009abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac0:	07da      	lsls	r2, r3, #31
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	d4e0      	bmi.n	8009a88 <_fflush_r+0xc>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	d4dd      	bmi.n	8009a88 <_fflush_r+0xc>
 8009acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ace:	f000 f908 	bl	8009ce2 <__retarget_lock_release_recursive>
 8009ad2:	e7d9      	b.n	8009a88 <_fflush_r+0xc>
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <_fflush_r+0x70>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d101      	bne.n	8009ade <_fflush_r+0x62>
 8009ada:	68ac      	ldr	r4, [r5, #8]
 8009adc:	e7df      	b.n	8009a9e <_fflush_r+0x22>
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <_fflush_r+0x74>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	bf08      	it	eq
 8009ae4:	68ec      	ldreq	r4, [r5, #12]
 8009ae6:	e7da      	b.n	8009a9e <_fflush_r+0x22>
 8009ae8:	0800aac4 	.word	0x0800aac4
 8009aec:	0800aae4 	.word	0x0800aae4
 8009af0:	0800aaa4 	.word	0x0800aaa4

08009af4 <std>:
 8009af4:	2300      	movs	r3, #0
 8009af6:	b510      	push	{r4, lr}
 8009af8:	4604      	mov	r4, r0
 8009afa:	e9c0 3300 	strd	r3, r3, [r0]
 8009afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b02:	6083      	str	r3, [r0, #8]
 8009b04:	8181      	strh	r1, [r0, #12]
 8009b06:	6643      	str	r3, [r0, #100]	; 0x64
 8009b08:	81c2      	strh	r2, [r0, #14]
 8009b0a:	6183      	str	r3, [r0, #24]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2208      	movs	r2, #8
 8009b10:	305c      	adds	r0, #92	; 0x5c
 8009b12:	f7ff fa17 	bl	8008f44 <memset>
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <std+0x38>)
 8009b18:	6263      	str	r3, [r4, #36]	; 0x24
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <std+0x3c>)
 8009b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x40>)
 8009b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x44>)
 8009b24:	6224      	str	r4, [r4, #32]
 8009b26:	6323      	str	r3, [r4, #48]	; 0x30
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08009e99 	.word	0x08009e99
 8009b30:	08009ebb 	.word	0x08009ebb
 8009b34:	08009ef3 	.word	0x08009ef3
 8009b38:	08009f17 	.word	0x08009f17

08009b3c <_cleanup_r>:
 8009b3c:	4901      	ldr	r1, [pc, #4]	; (8009b44 <_cleanup_r+0x8>)
 8009b3e:	f000 b8af 	b.w	8009ca0 <_fwalk_reent>
 8009b42:	bf00      	nop
 8009b44:	08009a7d 	.word	0x08009a7d

08009b48 <__sfmoreglue>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	2268      	movs	r2, #104	; 0x68
 8009b4c:	1e4d      	subs	r5, r1, #1
 8009b4e:	4355      	muls	r5, r2
 8009b50:	460e      	mov	r6, r1
 8009b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b56:	f7ff fa69 	bl	800902c <_malloc_r>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	b140      	cbz	r0, 8009b70 <__sfmoreglue+0x28>
 8009b5e:	2100      	movs	r1, #0
 8009b60:	e9c0 1600 	strd	r1, r6, [r0]
 8009b64:	300c      	adds	r0, #12
 8009b66:	60a0      	str	r0, [r4, #8]
 8009b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b6c:	f7ff f9ea 	bl	8008f44 <memset>
 8009b70:	4620      	mov	r0, r4
 8009b72:	bd70      	pop	{r4, r5, r6, pc}

08009b74 <__sfp_lock_acquire>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__sfp_lock_acquire+0x8>)
 8009b76:	f000 b8b3 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	200002fd 	.word	0x200002fd

08009b80 <__sfp_lock_release>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sfp_lock_release+0x8>)
 8009b82:	f000 b8ae 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009b86:	bf00      	nop
 8009b88:	200002fd 	.word	0x200002fd

08009b8c <__sinit_lock_acquire>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sinit_lock_acquire+0x8>)
 8009b8e:	f000 b8a7 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009b92:	bf00      	nop
 8009b94:	200002fe 	.word	0x200002fe

08009b98 <__sinit_lock_release>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sinit_lock_release+0x8>)
 8009b9a:	f000 b8a2 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	200002fe 	.word	0x200002fe

08009ba4 <__sinit>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	f7ff fff0 	bl	8009b8c <__sinit_lock_acquire>
 8009bac:	69a3      	ldr	r3, [r4, #24]
 8009bae:	b11b      	cbz	r3, 8009bb8 <__sinit+0x14>
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f7ff bff0 	b.w	8009b98 <__sinit_lock_release>
 8009bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <__sinit+0x68>)
 8009bc0:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <__sinit+0x6c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	bf04      	itt	eq
 8009bca:	2301      	moveq	r3, #1
 8009bcc:	61a3      	streq	r3, [r4, #24]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 f820 	bl	8009c14 <__sfp>
 8009bd4:	6060      	str	r0, [r4, #4]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 f81c 	bl	8009c14 <__sfp>
 8009bdc:	60a0      	str	r0, [r4, #8]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 f818 	bl	8009c14 <__sfp>
 8009be4:	2200      	movs	r2, #0
 8009be6:	60e0      	str	r0, [r4, #12]
 8009be8:	2104      	movs	r1, #4
 8009bea:	6860      	ldr	r0, [r4, #4]
 8009bec:	f7ff ff82 	bl	8009af4 <std>
 8009bf0:	68a0      	ldr	r0, [r4, #8]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	2109      	movs	r1, #9
 8009bf6:	f7ff ff7d 	bl	8009af4 <std>
 8009bfa:	68e0      	ldr	r0, [r4, #12]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	2112      	movs	r1, #18
 8009c00:	f7ff ff78 	bl	8009af4 <std>
 8009c04:	2301      	movs	r3, #1
 8009c06:	61a3      	str	r3, [r4, #24]
 8009c08:	e7d2      	b.n	8009bb0 <__sinit+0xc>
 8009c0a:	bf00      	nop
 8009c0c:	0800aa6c 	.word	0x0800aa6c
 8009c10:	08009b3d 	.word	0x08009b3d

08009c14 <__sfp>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4607      	mov	r7, r0
 8009c18:	f7ff ffac 	bl	8009b74 <__sfp_lock_acquire>
 8009c1c:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <__sfp+0x84>)
 8009c1e:	681e      	ldr	r6, [r3, #0]
 8009c20:	69b3      	ldr	r3, [r6, #24]
 8009c22:	b913      	cbnz	r3, 8009c2a <__sfp+0x16>
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff ffbd 	bl	8009ba4 <__sinit>
 8009c2a:	3648      	adds	r6, #72	; 0x48
 8009c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	d503      	bpl.n	8009c3c <__sfp+0x28>
 8009c34:	6833      	ldr	r3, [r6, #0]
 8009c36:	b30b      	cbz	r3, 8009c7c <__sfp+0x68>
 8009c38:	6836      	ldr	r6, [r6, #0]
 8009c3a:	e7f7      	b.n	8009c2c <__sfp+0x18>
 8009c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c40:	b9d5      	cbnz	r5, 8009c78 <__sfp+0x64>
 8009c42:	4b16      	ldr	r3, [pc, #88]	; (8009c9c <__sfp+0x88>)
 8009c44:	60e3      	str	r3, [r4, #12]
 8009c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c4c:	f000 f847 	bl	8009cde <__retarget_lock_init_recursive>
 8009c50:	f7ff ff96 	bl	8009b80 <__sfp_lock_release>
 8009c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c5c:	6025      	str	r5, [r4, #0]
 8009c5e:	61a5      	str	r5, [r4, #24]
 8009c60:	2208      	movs	r2, #8
 8009c62:	4629      	mov	r1, r5
 8009c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c68:	f7ff f96c 	bl	8008f44 <memset>
 8009c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c74:	4620      	mov	r0, r4
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c78:	3468      	adds	r4, #104	; 0x68
 8009c7a:	e7d9      	b.n	8009c30 <__sfp+0x1c>
 8009c7c:	2104      	movs	r1, #4
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff ff62 	bl	8009b48 <__sfmoreglue>
 8009c84:	4604      	mov	r4, r0
 8009c86:	6030      	str	r0, [r6, #0]
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d1d5      	bne.n	8009c38 <__sfp+0x24>
 8009c8c:	f7ff ff78 	bl	8009b80 <__sfp_lock_release>
 8009c90:	230c      	movs	r3, #12
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	e7ee      	b.n	8009c74 <__sfp+0x60>
 8009c96:	bf00      	nop
 8009c98:	0800aa6c 	.word	0x0800aa6c
 8009c9c:	ffff0001 	.word	0xffff0001

08009ca0 <_fwalk_reent>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	4688      	mov	r8, r1
 8009ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cac:	2700      	movs	r7, #0
 8009cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cb6:	d505      	bpl.n	8009cc4 <_fwalk_reent+0x24>
 8009cb8:	6824      	ldr	r4, [r4, #0]
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d1f7      	bne.n	8009cae <_fwalk_reent+0xe>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc4:	89ab      	ldrh	r3, [r5, #12]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d907      	bls.n	8009cda <_fwalk_reent+0x3a>
 8009cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	d003      	beq.n	8009cda <_fwalk_reent+0x3a>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	47c0      	blx	r8
 8009cd8:	4307      	orrs	r7, r0
 8009cda:	3568      	adds	r5, #104	; 0x68
 8009cdc:	e7e9      	b.n	8009cb2 <_fwalk_reent+0x12>

08009cde <__retarget_lock_init_recursive>:
 8009cde:	4770      	bx	lr

08009ce0 <__retarget_lock_acquire_recursive>:
 8009ce0:	4770      	bx	lr

08009ce2 <__retarget_lock_release_recursive>:
 8009ce2:	4770      	bx	lr

08009ce4 <_lseek_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_lseek_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f7 f926 	bl	8000f44 <_lseek>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_lseek_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_lseek_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000300 	.word	0x20000300

08009d08 <__swhatbuf_r>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	2900      	cmp	r1, #0
 8009d12:	b096      	sub	sp, #88	; 0x58
 8009d14:	4614      	mov	r4, r2
 8009d16:	461d      	mov	r5, r3
 8009d18:	da08      	bge.n	8009d2c <__swhatbuf_r+0x24>
 8009d1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	061a      	lsls	r2, r3, #24
 8009d24:	d410      	bmi.n	8009d48 <__swhatbuf_r+0x40>
 8009d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d2a:	e00e      	b.n	8009d4a <__swhatbuf_r+0x42>
 8009d2c:	466a      	mov	r2, sp
 8009d2e:	f000 f8f7 	bl	8009f20 <_fstat_r>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	dbf1      	blt.n	8009d1a <__swhatbuf_r+0x12>
 8009d36:	9a01      	ldr	r2, [sp, #4]
 8009d38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d40:	425a      	negs	r2, r3
 8009d42:	415a      	adcs	r2, r3
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	e7ee      	b.n	8009d26 <__swhatbuf_r+0x1e>
 8009d48:	2340      	movs	r3, #64	; 0x40
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	b016      	add	sp, #88	; 0x58
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d54 <__smakebuf_r>:
 8009d54:	898b      	ldrh	r3, [r1, #12]
 8009d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d58:	079d      	lsls	r5, r3, #30
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	d507      	bpl.n	8009d70 <__smakebuf_r+0x1c>
 8009d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	2301      	movs	r3, #1
 8009d6a:	6163      	str	r3, [r4, #20]
 8009d6c:	b002      	add	sp, #8
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	ab01      	add	r3, sp, #4
 8009d72:	466a      	mov	r2, sp
 8009d74:	f7ff ffc8 	bl	8009d08 <__swhatbuf_r>
 8009d78:	9900      	ldr	r1, [sp, #0]
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7ff f955 	bl	800902c <_malloc_r>
 8009d82:	b948      	cbnz	r0, 8009d98 <__smakebuf_r+0x44>
 8009d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d88:	059a      	lsls	r2, r3, #22
 8009d8a:	d4ef      	bmi.n	8009d6c <__smakebuf_r+0x18>
 8009d8c:	f023 0303 	bic.w	r3, r3, #3
 8009d90:	f043 0302 	orr.w	r3, r3, #2
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	e7e3      	b.n	8009d60 <__smakebuf_r+0xc>
 8009d98:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <__smakebuf_r+0x7c>)
 8009d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	6163      	str	r3, [r4, #20]
 8009daa:	9b01      	ldr	r3, [sp, #4]
 8009dac:	6120      	str	r0, [r4, #16]
 8009dae:	b15b      	cbz	r3, 8009dc8 <__smakebuf_r+0x74>
 8009db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 f8c5 	bl	8009f44 <_isatty_r>
 8009dba:	b128      	cbz	r0, 8009dc8 <__smakebuf_r+0x74>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	89a0      	ldrh	r0, [r4, #12]
 8009dca:	4305      	orrs	r5, r0
 8009dcc:	81a5      	strh	r5, [r4, #12]
 8009dce:	e7cd      	b.n	8009d6c <__smakebuf_r+0x18>
 8009dd0:	08009b3d 	.word	0x08009b3d

08009dd4 <__malloc_lock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__malloc_lock+0x8>)
 8009dd6:	f7ff bf83 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009dda:	bf00      	nop
 8009ddc:	200002fc 	.word	0x200002fc

08009de0 <__malloc_unlock>:
 8009de0:	4801      	ldr	r0, [pc, #4]	; (8009de8 <__malloc_unlock+0x8>)
 8009de2:	f7ff bf7e 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009de6:	bf00      	nop
 8009de8:	200002fc 	.word	0x200002fc

08009dec <_read_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_read_r+0x20>)
 8009df0:	4604      	mov	r4, r0
 8009df2:	4608      	mov	r0, r1
 8009df4:	4611      	mov	r1, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f7f7 f842 	bl	8000e84 <_read>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_read_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_read_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000300 	.word	0x20000300

08009e10 <_raise_r>:
 8009e10:	291f      	cmp	r1, #31
 8009e12:	b538      	push	{r3, r4, r5, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	d904      	bls.n	8009e24 <_raise_r+0x14>
 8009e1a:	2316      	movs	r3, #22
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e26:	b112      	cbz	r2, 8009e2e <_raise_r+0x1e>
 8009e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e2c:	b94b      	cbnz	r3, 8009e42 <_raise_r+0x32>
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 f830 	bl	8009e94 <_getpid_r>
 8009e34:	462a      	mov	r2, r5
 8009e36:	4601      	mov	r1, r0
 8009e38:	4620      	mov	r0, r4
 8009e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3e:	f000 b817 	b.w	8009e70 <_kill_r>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d00a      	beq.n	8009e5c <_raise_r+0x4c>
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	d103      	bne.n	8009e52 <_raise_r+0x42>
 8009e4a:	2316      	movs	r3, #22
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	2001      	movs	r0, #1
 8009e50:	e7e7      	b.n	8009e22 <_raise_r+0x12>
 8009e52:	2400      	movs	r4, #0
 8009e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	4798      	blx	r3
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e7e0      	b.n	8009e22 <_raise_r+0x12>

08009e60 <raise>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <raise+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f7ff bfd3 	b.w	8009e10 <_raise_r>
 8009e6a:	bf00      	nop
 8009e6c:	2000000c 	.word	0x2000000c

08009e70 <_kill_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_kill_r+0x20>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	f7f6 ffe7 	bl	8000e50 <_kill>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d102      	bne.n	8009e8c <_kill_r+0x1c>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	b103      	cbz	r3, 8009e8c <_kill_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000300 	.word	0x20000300

08009e94 <_getpid_r>:
 8009e94:	f7f6 bfd4 	b.w	8000e40 <_getpid>

08009e98 <__sread>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea0:	f7ff ffa4 	bl	8009dec <_read_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	bfab      	itete	ge
 8009ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8009eac:	181b      	addge	r3, r3, r0
 8009eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009eb2:	bfac      	ite	ge
 8009eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eb6:	81a3      	strhlt	r3, [r4, #12]
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <__swrite>:
 8009eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	898b      	ldrh	r3, [r1, #12]
 8009ec2:	05db      	lsls	r3, r3, #23
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	4616      	mov	r6, r2
 8009eca:	d505      	bpl.n	8009ed8 <__swrite+0x1e>
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f7ff ff06 	bl	8009ce4 <_lseek_r>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	f7ff bca7 	b.w	8009840 <_write_r>

08009ef2 <__sseek>:
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efa:	f7ff fef3 	bl	8009ce4 <_lseek_r>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	bf15      	itete	ne
 8009f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f0e:	81a3      	strheq	r3, [r4, #12]
 8009f10:	bf18      	it	ne
 8009f12:	81a3      	strhne	r3, [r4, #12]
 8009f14:	bd10      	pop	{r4, pc}

08009f16 <__sclose>:
 8009f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1a:	f7ff bd19 	b.w	8009950 <_close_r>
	...

08009f20 <_fstat_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_fstat_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7f6 ffee 	bl	8000f0e <_fstat>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_fstat_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_fstat_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000300 	.word	0x20000300

08009f44 <_isatty_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_isatty_r+0x1c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f7f6 ffed 	bl	8000f2e <_isatty>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_isatty_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_isatty_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	20000300 	.word	0x20000300

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
